
sd_card_tars_son.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000095f0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000056c  080097c0  080097c0  0000a7c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d2c  08009d2c  0000b05c  2**0
                  CONTENTS
  4 .ARM          00000008  08009d2c  08009d2c  0000ad2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d34  08009d34  0000b05c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d34  08009d34  0000ad34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009d38  08009d38  0000ad38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08009d3c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002428  2000005c  08009d98  0000b05c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002484  08009d98  0000b484  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b05c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011dcb  00000000  00000000  0000b08c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e09  00000000  00000000  0001ce57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ec0  00000000  00000000  0001fc60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b54  00000000  00000000  00020b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023f04  00000000  00000000  00021674  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016991  00000000  00000000  00045578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf91b  00000000  00000000  0005bf09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012b824  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040f0  00000000  00000000  0012b868  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0012f958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080097a8 	.word	0x080097a8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	080097a8 	.word	0x080097a8

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96a 	b.w	80005cc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	460c      	mov	r4, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14e      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031c:	4694      	mov	ip, r2
 800031e:	458c      	cmp	ip, r1
 8000320:	4686      	mov	lr, r0
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	d962      	bls.n	80003ee <__udivmoddi4+0xde>
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0320 	rsb	r3, r2, #32
 800032e:	4091      	lsls	r1, r2
 8000330:	fa20 f303 	lsr.w	r3, r0, r3
 8000334:	fa0c fc02 	lsl.w	ip, ip, r2
 8000338:	4319      	orrs	r1, r3
 800033a:	fa00 fe02 	lsl.w	lr, r0, r2
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f f68c 	uxth.w	r6, ip
 8000346:	fbb1 f4f7 	udiv	r4, r1, r7
 800034a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034e:	fb07 1114 	mls	r1, r7, r4, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb04 f106 	mul.w	r1, r4, r6
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f104 30ff 	add.w	r0, r4, #4294967295
 8000366:	f080 8112 	bcs.w	800058e <__udivmoddi4+0x27e>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 810f 	bls.w	800058e <__udivmoddi4+0x27e>
 8000370:	3c02      	subs	r4, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb1 f0f7 	udiv	r0, r1, r7
 800037e:	fb07 1110 	mls	r1, r7, r0, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb00 f606 	mul.w	r6, r0, r6
 800038a:	429e      	cmp	r6, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x94>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 31ff 	add.w	r1, r0, #4294967295
 8000396:	f080 80fc 	bcs.w	8000592 <__udivmoddi4+0x282>
 800039a:	429e      	cmp	r6, r3
 800039c:	f240 80f9 	bls.w	8000592 <__udivmoddi4+0x282>
 80003a0:	4463      	add	r3, ip
 80003a2:	3802      	subs	r0, #2
 80003a4:	1b9b      	subs	r3, r3, r6
 80003a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003aa:	2100      	movs	r1, #0
 80003ac:	b11d      	cbz	r5, 80003b6 <__udivmoddi4+0xa6>
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	e9c5 3200 	strd	r3, r2, [r5]
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d905      	bls.n	80003ca <__udivmoddi4+0xba>
 80003be:	b10d      	cbz	r5, 80003c4 <__udivmoddi4+0xb4>
 80003c0:	e9c5 0100 	strd	r0, r1, [r5]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4608      	mov	r0, r1
 80003c8:	e7f5      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ca:	fab3 f183 	clz	r1, r3
 80003ce:	2900      	cmp	r1, #0
 80003d0:	d146      	bne.n	8000460 <__udivmoddi4+0x150>
 80003d2:	42a3      	cmp	r3, r4
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xcc>
 80003d6:	4290      	cmp	r0, r2
 80003d8:	f0c0 80f0 	bcc.w	80005bc <__udivmoddi4+0x2ac>
 80003dc:	1a86      	subs	r6, r0, r2
 80003de:	eb64 0303 	sbc.w	r3, r4, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	2d00      	cmp	r5, #0
 80003e6:	d0e6      	beq.n	80003b6 <__udivmoddi4+0xa6>
 80003e8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ec:	e7e3      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x204>
 80003f4:	eba1 040c 	sub.w	r4, r1, ip
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa1f f78c 	uxth.w	r7, ip
 8000400:	2101      	movs	r1, #1
 8000402:	fbb4 f6f8 	udiv	r6, r4, r8
 8000406:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040a:	fb08 4416 	mls	r4, r8, r6, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb07 f006 	mul.w	r0, r7, r6
 8000416:	4298      	cmp	r0, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x11c>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x11a>
 8000424:	4298      	cmp	r0, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 800042a:	4626      	mov	r6, r4
 800042c:	1a1c      	subs	r4, r3, r0
 800042e:	fa1f f38e 	uxth.w	r3, lr
 8000432:	fbb4 f0f8 	udiv	r0, r4, r8
 8000436:	fb08 4410 	mls	r4, r8, r0, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb00 f707 	mul.w	r7, r0, r7
 8000442:	429f      	cmp	r7, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x148>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 34ff 	add.w	r4, r0, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x146>
 8000450:	429f      	cmp	r7, r3
 8000452:	f200 80b0 	bhi.w	80005b6 <__udivmoddi4+0x2a6>
 8000456:	4620      	mov	r0, r4
 8000458:	1bdb      	subs	r3, r3, r7
 800045a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800045e:	e7a5      	b.n	80003ac <__udivmoddi4+0x9c>
 8000460:	f1c1 0620 	rsb	r6, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 f706 	lsr.w	r7, r2, r6
 800046a:	431f      	orrs	r7, r3
 800046c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000470:	fa04 f301 	lsl.w	r3, r4, r1
 8000474:	ea43 030c 	orr.w	r3, r3, ip
 8000478:	40f4      	lsrs	r4, r6
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	0c38      	lsrs	r0, r7, #16
 8000480:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000484:	fbb4 fef0 	udiv	lr, r4, r0
 8000488:	fa1f fc87 	uxth.w	ip, r7
 800048c:	fb00 441e 	mls	r4, r0, lr, r4
 8000490:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000494:	fb0e f90c 	mul.w	r9, lr, ip
 8000498:	45a1      	cmp	r9, r4
 800049a:	fa02 f201 	lsl.w	r2, r2, r1
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x1a6>
 80004a0:	193c      	adds	r4, r7, r4
 80004a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004a6:	f080 8084 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 80004aa:	45a1      	cmp	r9, r4
 80004ac:	f240 8081 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80004b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	eba4 0409 	sub.w	r4, r4, r9
 80004ba:	fa1f f983 	uxth.w	r9, r3
 80004be:	fbb4 f3f0 	udiv	r3, r4, r0
 80004c2:	fb00 4413 	mls	r4, r0, r3, r4
 80004c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x1d2>
 80004d2:	193c      	adds	r4, r7, r4
 80004d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d8:	d267      	bcs.n	80005aa <__udivmoddi4+0x29a>
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d965      	bls.n	80005aa <__udivmoddi4+0x29a>
 80004de:	3b02      	subs	r3, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	429c      	cmp	r4, r3
 80004f0:	46ce      	mov	lr, r9
 80004f2:	469c      	mov	ip, r3
 80004f4:	d351      	bcc.n	800059a <__udivmoddi4+0x28a>
 80004f6:	d04e      	beq.n	8000596 <__udivmoddi4+0x286>
 80004f8:	b155      	cbz	r5, 8000510 <__udivmoddi4+0x200>
 80004fa:	ebb8 030e 	subs.w	r3, r8, lr
 80004fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000502:	fa04 f606 	lsl.w	r6, r4, r6
 8000506:	40cb      	lsrs	r3, r1
 8000508:	431e      	orrs	r6, r3
 800050a:	40cc      	lsrs	r4, r1
 800050c:	e9c5 6400 	strd	r6, r4, [r5]
 8000510:	2100      	movs	r1, #0
 8000512:	e750      	b.n	80003b6 <__udivmoddi4+0xa6>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f103 	lsr.w	r1, r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa24 f303 	lsr.w	r3, r4, r3
 8000524:	4094      	lsls	r4, r2
 8000526:	430c      	orrs	r4, r1
 8000528:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800052c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000530:	fa1f f78c 	uxth.w	r7, ip
 8000534:	fbb3 f0f8 	udiv	r0, r3, r8
 8000538:	fb08 3110 	mls	r1, r8, r0, r3
 800053c:	0c23      	lsrs	r3, r4, #16
 800053e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000542:	fb00 f107 	mul.w	r1, r0, r7
 8000546:	4299      	cmp	r1, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x24c>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000552:	d22c      	bcs.n	80005ae <__udivmoddi4+0x29e>
 8000554:	4299      	cmp	r1, r3
 8000556:	d92a      	bls.n	80005ae <__udivmoddi4+0x29e>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb3 f1f8 	udiv	r1, r3, r8
 8000564:	fb08 3311 	mls	r3, r8, r1, r3
 8000568:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800056c:	fb01 f307 	mul.w	r3, r1, r7
 8000570:	42a3      	cmp	r3, r4
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x276>
 8000574:	eb1c 0404 	adds.w	r4, ip, r4
 8000578:	f101 36ff 	add.w	r6, r1, #4294967295
 800057c:	d213      	bcs.n	80005a6 <__udivmoddi4+0x296>
 800057e:	42a3      	cmp	r3, r4
 8000580:	d911      	bls.n	80005a6 <__udivmoddi4+0x296>
 8000582:	3902      	subs	r1, #2
 8000584:	4464      	add	r4, ip
 8000586:	1ae4      	subs	r4, r4, r3
 8000588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800058c:	e739      	b.n	8000402 <__udivmoddi4+0xf2>
 800058e:	4604      	mov	r4, r0
 8000590:	e6f0      	b.n	8000374 <__udivmoddi4+0x64>
 8000592:	4608      	mov	r0, r1
 8000594:	e706      	b.n	80003a4 <__udivmoddi4+0x94>
 8000596:	45c8      	cmp	r8, r9
 8000598:	d2ae      	bcs.n	80004f8 <__udivmoddi4+0x1e8>
 800059a:	ebb9 0e02 	subs.w	lr, r9, r2
 800059e:	eb63 0c07 	sbc.w	ip, r3, r7
 80005a2:	3801      	subs	r0, #1
 80005a4:	e7a8      	b.n	80004f8 <__udivmoddi4+0x1e8>
 80005a6:	4631      	mov	r1, r6
 80005a8:	e7ed      	b.n	8000586 <__udivmoddi4+0x276>
 80005aa:	4603      	mov	r3, r0
 80005ac:	e799      	b.n	80004e2 <__udivmoddi4+0x1d2>
 80005ae:	4630      	mov	r0, r6
 80005b0:	e7d4      	b.n	800055c <__udivmoddi4+0x24c>
 80005b2:	46d6      	mov	lr, sl
 80005b4:	e77f      	b.n	80004b6 <__udivmoddi4+0x1a6>
 80005b6:	4463      	add	r3, ip
 80005b8:	3802      	subs	r0, #2
 80005ba:	e74d      	b.n	8000458 <__udivmoddi4+0x148>
 80005bc:	4606      	mov	r6, r0
 80005be:	4623      	mov	r3, r4
 80005c0:	4608      	mov	r0, r1
 80005c2:	e70f      	b.n	80003e4 <__udivmoddi4+0xd4>
 80005c4:	3e02      	subs	r6, #2
 80005c6:	4463      	add	r3, ip
 80005c8:	e730      	b.n	800042c <__udivmoddi4+0x11c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <Send_Uart>:
DWORD fre_clust;
uint32_t total, free_space;


void Send_Uart (char *string)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(UART, (uint8_t *)string, strlen (string), HAL_MAX_DELAY);
 80005d8:	6878      	ldr	r0, [r7, #4]
 80005da:	f7ff fe23 	bl	8000224 <strlen>
 80005de:	4603      	mov	r3, r0
 80005e0:	b29a      	uxth	r2, r3
 80005e2:	f04f 33ff 	mov.w	r3, #4294967295
 80005e6:	6879      	ldr	r1, [r7, #4]
 80005e8:	4803      	ldr	r0, [pc, #12]	@ (80005f8 <Send_Uart+0x28>)
 80005ea:	f003 ffc5 	bl	8004578 <HAL_UART_Transmit>
}
 80005ee:	bf00      	nop
 80005f0:	3708      	adds	r7, #8
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	20002240 	.word	0x20002240

080005fc <Mount_SD>:



void Mount_SD (const TCHAR* path)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 1);
 8000604:	2201      	movs	r2, #1
 8000606:	6879      	ldr	r1, [r7, #4]
 8000608:	480a      	ldr	r0, [pc, #40]	@ (8000634 <Mount_SD+0x38>)
 800060a:	f007 fdbd 	bl	8008188 <f_mount>
 800060e:	4603      	mov	r3, r0
 8000610:	461a      	mov	r2, r3
 8000612:	4b09      	ldr	r3, [pc, #36]	@ (8000638 <Mount_SD+0x3c>)
 8000614:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) Send_Uart ("ERROR!!! in mounting SD CARD...\n\n");
 8000616:	4b08      	ldr	r3, [pc, #32]	@ (8000638 <Mount_SD+0x3c>)
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	2b00      	cmp	r3, #0
 800061c:	d003      	beq.n	8000626 <Mount_SD+0x2a>
 800061e:	4807      	ldr	r0, [pc, #28]	@ (800063c <Mount_SD+0x40>)
 8000620:	f7ff ffd6 	bl	80005d0 <Send_Uart>
	else Send_Uart("SD CARD mounted successfully...\n");
}
 8000624:	e002      	b.n	800062c <Mount_SD+0x30>
	else Send_Uart("SD CARD mounted successfully...\n");
 8000626:	4806      	ldr	r0, [pc, #24]	@ (8000640 <Mount_SD+0x44>)
 8000628:	f7ff ffd2 	bl	80005d0 <Send_Uart>
}
 800062c:	bf00      	nop
 800062e:	3708      	adds	r7, #8
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	20000078 	.word	0x20000078
 8000638:	200020f4 	.word	0x200020f4
 800063c:	080097c0 	.word	0x080097c0
 8000640:	080097e4 	.word	0x080097e4

08000644 <Format_SD>:
    return fresult;
}

/* Only supports removing files from home directory */
FRESULT Format_SD (void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b08e      	sub	sp, #56	@ 0x38
 8000648:	af00      	add	r7, sp, #0
    DIR dir;
    char *path = malloc(20*sizeof (char));
 800064a:	2014      	movs	r0, #20
 800064c:	f008 fbfc 	bl	8008e48 <malloc>
 8000650:	4603      	mov	r3, r0
 8000652:	637b      	str	r3, [r7, #52]	@ 0x34
    sprintf (path, "%s","/");
 8000654:	4a28      	ldr	r2, [pc, #160]	@ (80006f8 <Format_SD+0xb4>)
 8000656:	4929      	ldr	r1, [pc, #164]	@ (80006fc <Format_SD+0xb8>)
 8000658:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800065a:	f008 fcb3 	bl	8008fc4 <siprintf>

    fresult = f_opendir(&dir, path);                       /* Open the directory */
 800065e:	1d3b      	adds	r3, r7, #4
 8000660:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000662:	4618      	mov	r0, r3
 8000664:	f008 f9da 	bl	8008a1c <f_opendir>
 8000668:	4603      	mov	r3, r0
 800066a:	461a      	mov	r2, r3
 800066c:	4b24      	ldr	r3, [pc, #144]	@ (8000700 <Format_SD+0xbc>)
 800066e:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 8000670:	4b23      	ldr	r3, [pc, #140]	@ (8000700 <Format_SD+0xbc>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d136      	bne.n	80006e6 <Format_SD+0xa2>
    {
        for (;;)
        {
            fresult = f_readdir(&dir, &fno);                   /* Read a directory item */
 8000678:	1d3b      	adds	r3, r7, #4
 800067a:	4922      	ldr	r1, [pc, #136]	@ (8000704 <Format_SD+0xc0>)
 800067c:	4618      	mov	r0, r3
 800067e:	f008 fa66 	bl	8008b4e <f_readdir>
 8000682:	4603      	mov	r3, r0
 8000684:	461a      	mov	r2, r3
 8000686:	4b1e      	ldr	r3, [pc, #120]	@ (8000700 <Format_SD+0xbc>)
 8000688:	701a      	strb	r2, [r3, #0]
            if (fresult != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 800068a:	4b1d      	ldr	r3, [pc, #116]	@ (8000700 <Format_SD+0xbc>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d125      	bne.n	80006de <Format_SD+0x9a>
 8000692:	4b1c      	ldr	r3, [pc, #112]	@ (8000704 <Format_SD+0xc0>)
 8000694:	7a5b      	ldrb	r3, [r3, #9]
 8000696:	2b00      	cmp	r3, #0
 8000698:	d021      	beq.n	80006de <Format_SD+0x9a>
            if (fno.fattrib & AM_DIR)     /* It is a directory */
 800069a:	4b1a      	ldr	r3, [pc, #104]	@ (8000704 <Format_SD+0xc0>)
 800069c:	7a1b      	ldrb	r3, [r3, #8]
 800069e:	f003 0310 	and.w	r3, r3, #16
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d011      	beq.n	80006ca <Format_SD+0x86>
            {
            	if (!(strcmp ("SYSTEM~1", fno.fname))) continue;
 80006a6:	4918      	ldr	r1, [pc, #96]	@ (8000708 <Format_SD+0xc4>)
 80006a8:	4818      	ldr	r0, [pc, #96]	@ (800070c <Format_SD+0xc8>)
 80006aa:	f7ff fdb1 	bl	8000210 <strcmp>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d012      	beq.n	80006da <Format_SD+0x96>
            	fresult = f_unlink(fno.fname);
 80006b4:	4814      	ldr	r0, [pc, #80]	@ (8000708 <Format_SD+0xc4>)
 80006b6:	f008 fac0 	bl	8008c3a <f_unlink>
 80006ba:	4603      	mov	r3, r0
 80006bc:	461a      	mov	r2, r3
 80006be:	4b10      	ldr	r3, [pc, #64]	@ (8000700 <Format_SD+0xbc>)
 80006c0:	701a      	strb	r2, [r3, #0]
            	if (fresult == FR_DENIED) continue;
 80006c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000700 <Format_SD+0xbc>)
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	2b07      	cmp	r3, #7
 80006c8:	e7d6      	b.n	8000678 <Format_SD+0x34>
            }
            else
            {   /* It is a file. */
               fresult = f_unlink(fno.fname);
 80006ca:	480f      	ldr	r0, [pc, #60]	@ (8000708 <Format_SD+0xc4>)
 80006cc:	f008 fab5 	bl	8008c3a <f_unlink>
 80006d0:	4603      	mov	r3, r0
 80006d2:	461a      	mov	r2, r3
 80006d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000700 <Format_SD+0xbc>)
 80006d6:	701a      	strb	r2, [r3, #0]
 80006d8:	e7ce      	b.n	8000678 <Format_SD+0x34>
            	if (!(strcmp ("SYSTEM~1", fno.fname))) continue;
 80006da:	bf00      	nop
            fresult = f_readdir(&dir, &fno);                   /* Read a directory item */
 80006dc:	e7cc      	b.n	8000678 <Format_SD+0x34>
            }
        }
        f_closedir(&dir);
 80006de:	1d3b      	adds	r3, r7, #4
 80006e0:	4618      	mov	r0, r3
 80006e2:	f008 fa0e 	bl	8008b02 <f_closedir>
    }
    free(path);
 80006e6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80006e8:	f008 fbb6 	bl	8008e58 <free>
    return fresult;
 80006ec:	4b04      	ldr	r3, [pc, #16]	@ (8000700 <Format_SD+0xbc>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
}
 80006f0:	4618      	mov	r0, r3
 80006f2:	3738      	adds	r7, #56	@ 0x38
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	08009884 	.word	0x08009884
 80006fc:	08009854 	.word	0x08009854
 8000700:	200020f4 	.word	0x200020f4
 8000704:	200020dc 	.word	0x200020dc
 8000708:	200020e5 	.word	0x200020e5
 800070c:	08009858 	.word	0x08009858

08000710 <Create_File>:
	    return fresult;
	}
}

FRESULT Create_File (char *name)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b088      	sub	sp, #32
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
	fresult = f_stat (name, &fno);
 8000718:	4943      	ldr	r1, [pc, #268]	@ (8000828 <Create_File+0x118>)
 800071a:	6878      	ldr	r0, [r7, #4]
 800071c:	f008 fa54 	bl	8008bc8 <f_stat>
 8000720:	4603      	mov	r3, r0
 8000722:	461a      	mov	r2, r3
 8000724:	4b41      	ldr	r3, [pc, #260]	@ (800082c <Create_File+0x11c>)
 8000726:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 8000728:	4b40      	ldr	r3, [pc, #256]	@ (800082c <Create_File+0x11c>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d112      	bne.n	8000756 <Create_File+0x46>
	{
		char *buf = malloc(100*sizeof(char));
 8000730:	2064      	movs	r0, #100	@ 0x64
 8000732:	f008 fb89 	bl	8008e48 <malloc>
 8000736:	4603      	mov	r3, r0
 8000738:	60fb      	str	r3, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n\n",name);
 800073a:	687a      	ldr	r2, [r7, #4]
 800073c:	493c      	ldr	r1, [pc, #240]	@ (8000830 <Create_File+0x120>)
 800073e:	68f8      	ldr	r0, [r7, #12]
 8000740:	f008 fc40 	bl	8008fc4 <siprintf>
		Send_Uart(buf);
 8000744:	68f8      	ldr	r0, [r7, #12]
 8000746:	f7ff ff43 	bl	80005d0 <Send_Uart>
		free(buf);
 800074a:	68f8      	ldr	r0, [r7, #12]
 800074c:	f008 fb84 	bl	8008e58 <free>
	    return fresult;
 8000750:	4b36      	ldr	r3, [pc, #216]	@ (800082c <Create_File+0x11c>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	e063      	b.n	800081e <Create_File+0x10e>
	}
	else
	{
		fresult = f_open(&fil, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 8000756:	220b      	movs	r2, #11
 8000758:	6879      	ldr	r1, [r7, #4]
 800075a:	4836      	ldr	r0, [pc, #216]	@ (8000834 <Create_File+0x124>)
 800075c:	f007 fd5a 	bl	8008214 <f_open>
 8000760:	4603      	mov	r3, r0
 8000762:	461a      	mov	r2, r3
 8000764:	4b31      	ldr	r3, [pc, #196]	@ (800082c <Create_File+0x11c>)
 8000766:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8000768:	4b30      	ldr	r3, [pc, #192]	@ (800082c <Create_File+0x11c>)
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d015      	beq.n	800079c <Create_File+0x8c>
		{
			char *buf = malloc(100*sizeof(char));
 8000770:	2064      	movs	r0, #100	@ 0x64
 8000772:	f008 fb69 	bl	8008e48 <malloc>
 8000776:	4603      	mov	r3, r0
 8000778:	613b      	str	r3, [r7, #16]
			sprintf (buf, "ERROR!!! No. %d in creating file *%s*\n\n", fresult, name);
 800077a:	4b2c      	ldr	r3, [pc, #176]	@ (800082c <Create_File+0x11c>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	461a      	mov	r2, r3
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	492d      	ldr	r1, [pc, #180]	@ (8000838 <Create_File+0x128>)
 8000784:	6938      	ldr	r0, [r7, #16]
 8000786:	f008 fc1d 	bl	8008fc4 <siprintf>
			Send_Uart(buf);
 800078a:	6938      	ldr	r0, [r7, #16]
 800078c:	f7ff ff20 	bl	80005d0 <Send_Uart>
			free(buf);
 8000790:	6938      	ldr	r0, [r7, #16]
 8000792:	f008 fb61 	bl	8008e58 <free>
		    return fresult;
 8000796:	4b25      	ldr	r3, [pc, #148]	@ (800082c <Create_File+0x11c>)
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	e040      	b.n	800081e <Create_File+0x10e>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 800079c:	2064      	movs	r0, #100	@ 0x64
 800079e:	f008 fb53 	bl	8008e48 <malloc>
 80007a2:	4603      	mov	r3, r0
 80007a4:	61fb      	str	r3, [r7, #28]
			sprintf (buf, "*%s* created successfully\n Now use Write_File to write data\n",name);
 80007a6:	687a      	ldr	r2, [r7, #4]
 80007a8:	4924      	ldr	r1, [pc, #144]	@ (800083c <Create_File+0x12c>)
 80007aa:	69f8      	ldr	r0, [r7, #28]
 80007ac:	f008 fc0a 	bl	8008fc4 <siprintf>
			Send_Uart(buf);
 80007b0:	69f8      	ldr	r0, [r7, #28]
 80007b2:	f7ff ff0d 	bl	80005d0 <Send_Uart>
			free(buf);
 80007b6:	69f8      	ldr	r0, [r7, #28]
 80007b8:	f008 fb4e 	bl	8008e58 <free>
		}

		fresult = f_close(&fil);
 80007bc:	481d      	ldr	r0, [pc, #116]	@ (8000834 <Create_File+0x124>)
 80007be:	f008 f903 	bl	80089c8 <f_close>
 80007c2:	4603      	mov	r3, r0
 80007c4:	461a      	mov	r2, r3
 80007c6:	4b19      	ldr	r3, [pc, #100]	@ (800082c <Create_File+0x11c>)
 80007c8:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 80007ca:	4b18      	ldr	r3, [pc, #96]	@ (800082c <Create_File+0x11c>)
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d013      	beq.n	80007fa <Create_File+0xea>
		{

			char *buf = malloc(100*sizeof(char));
 80007d2:	2064      	movs	r0, #100	@ 0x64
 80007d4:	f008 fb38 	bl	8008e48 <malloc>
 80007d8:	4603      	mov	r3, r0
 80007da:	617b      	str	r3, [r7, #20]
			sprintf (buf, "ERROR No. %d in closing file *%s*\n\n", fresult, name);
 80007dc:	4b13      	ldr	r3, [pc, #76]	@ (800082c <Create_File+0x11c>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	461a      	mov	r2, r3
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	4916      	ldr	r1, [pc, #88]	@ (8000840 <Create_File+0x130>)
 80007e6:	6978      	ldr	r0, [r7, #20]
 80007e8:	f008 fbec 	bl	8008fc4 <siprintf>
			Send_Uart(buf);
 80007ec:	6978      	ldr	r0, [r7, #20]
 80007ee:	f7ff feef 	bl	80005d0 <Send_Uart>
			free(buf);
 80007f2:	6978      	ldr	r0, [r7, #20]
 80007f4:	f008 fb30 	bl	8008e58 <free>
 80007f8:	e00f      	b.n	800081a <Create_File+0x10a>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 80007fa:	2064      	movs	r0, #100	@ 0x64
 80007fc:	f008 fb24 	bl	8008e48 <malloc>
 8000800:	4603      	mov	r3, r0
 8000802:	61bb      	str	r3, [r7, #24]
			sprintf (buf, "File *%s* CLOSED successfully\n", name);
 8000804:	687a      	ldr	r2, [r7, #4]
 8000806:	490f      	ldr	r1, [pc, #60]	@ (8000844 <Create_File+0x134>)
 8000808:	69b8      	ldr	r0, [r7, #24]
 800080a:	f008 fbdb 	bl	8008fc4 <siprintf>
			Send_Uart(buf);
 800080e:	69b8      	ldr	r0, [r7, #24]
 8000810:	f7ff fede 	bl	80005d0 <Send_Uart>
			free(buf);
 8000814:	69b8      	ldr	r0, [r7, #24]
 8000816:	f008 fb1f 	bl	8008e58 <free>
		}
	}
    return fresult;
 800081a:	4b04      	ldr	r3, [pc, #16]	@ (800082c <Create_File+0x11c>)
 800081c:	781b      	ldrb	r3, [r3, #0]
}
 800081e:	4618      	mov	r0, r3
 8000820:	3720      	adds	r7, #32
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	200020dc 	.word	0x200020dc
 800082c:	200020f4 	.word	0x200020f4
 8000830:	08009a00 	.word	0x08009a00
 8000834:	200010ac 	.word	0x200010ac
 8000838:	08009a38 	.word	0x08009a38
 800083c:	08009a60 	.word	0x08009a60
 8000840:	08009aa0 	.word	0x08009aa0
 8000844:	080099e0 	.word	0x080099e0

08000848 <Update_File>:

FRESULT Update_File (char *name, char *data)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b088      	sub	sp, #32
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
 8000850:	6039      	str	r1, [r7, #0]
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &fno);
 8000852:	4956      	ldr	r1, [pc, #344]	@ (80009ac <Update_File+0x164>)
 8000854:	6878      	ldr	r0, [r7, #4]
 8000856:	f008 f9b7 	bl	8008bc8 <f_stat>
 800085a:	4603      	mov	r3, r0
 800085c:	461a      	mov	r2, r3
 800085e:	4b54      	ldr	r3, [pc, #336]	@ (80009b0 <Update_File+0x168>)
 8000860:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8000862:	4b53      	ldr	r3, [pc, #332]	@ (80009b0 <Update_File+0x168>)
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d012      	beq.n	8000890 <Update_File+0x48>
	{
		char *buf = malloc(100*sizeof(char));
 800086a:	2064      	movs	r0, #100	@ 0x64
 800086c:	f008 faec 	bl	8008e48 <malloc>
 8000870:	4603      	mov	r3, r0
 8000872:	60bb      	str	r3, [r7, #8]
		sprintf (buf, "ERROR!!! *%s* does not exists\n\n", name);
 8000874:	687a      	ldr	r2, [r7, #4]
 8000876:	494f      	ldr	r1, [pc, #316]	@ (80009b4 <Update_File+0x16c>)
 8000878:	68b8      	ldr	r0, [r7, #8]
 800087a:	f008 fba3 	bl	8008fc4 <siprintf>
		Send_Uart (buf);
 800087e:	68b8      	ldr	r0, [r7, #8]
 8000880:	f7ff fea6 	bl	80005d0 <Send_Uart>
		free(buf);
 8000884:	68b8      	ldr	r0, [r7, #8]
 8000886:	f008 fae7 	bl	8008e58 <free>
	    return fresult;
 800088a:	4b49      	ldr	r3, [pc, #292]	@ (80009b0 <Update_File+0x168>)
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	e088      	b.n	80009a2 <Update_File+0x15a>
	}

	else
	{
		 /* Create a file with read write access and open it */
	    fresult = f_open(&fil, name, FA_OPEN_APPEND | FA_WRITE);
 8000890:	2232      	movs	r2, #50	@ 0x32
 8000892:	6879      	ldr	r1, [r7, #4]
 8000894:	4848      	ldr	r0, [pc, #288]	@ (80009b8 <Update_File+0x170>)
 8000896:	f007 fcbd 	bl	8008214 <f_open>
 800089a:	4603      	mov	r3, r0
 800089c:	461a      	mov	r2, r3
 800089e:	4b44      	ldr	r3, [pc, #272]	@ (80009b0 <Update_File+0x168>)
 80008a0:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 80008a2:	4b43      	ldr	r3, [pc, #268]	@ (80009b0 <Update_File+0x168>)
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d015      	beq.n	80008d6 <Update_File+0x8e>
	    {
	    	char *buf = malloc(100*sizeof(char));
 80008aa:	2064      	movs	r0, #100	@ 0x64
 80008ac:	f008 facc 	bl	8008e48 <malloc>
 80008b0:	4603      	mov	r3, r0
 80008b2:	60fb      	str	r3, [r7, #12]
	    	sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult, name);
 80008b4:	4b3e      	ldr	r3, [pc, #248]	@ (80009b0 <Update_File+0x168>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	461a      	mov	r2, r3
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	493f      	ldr	r1, [pc, #252]	@ (80009bc <Update_File+0x174>)
 80008be:	68f8      	ldr	r0, [r7, #12]
 80008c0:	f008 fb80 	bl	8008fc4 <siprintf>
	    	Send_Uart(buf);
 80008c4:	68f8      	ldr	r0, [r7, #12]
 80008c6:	f7ff fe83 	bl	80005d0 <Send_Uart>
	        free(buf);
 80008ca:	68f8      	ldr	r0, [r7, #12]
 80008cc:	f008 fac4 	bl	8008e58 <free>
	        return fresult;
 80008d0:	4b37      	ldr	r3, [pc, #220]	@ (80009b0 <Update_File+0x168>)
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	e065      	b.n	80009a2 <Update_File+0x15a>
	    }

	    /* Writing text */
	    fresult = f_write(&fil, data, strlen (data), &bw);
 80008d6:	6838      	ldr	r0, [r7, #0]
 80008d8:	f7ff fca4 	bl	8000224 <strlen>
 80008dc:	4602      	mov	r2, r0
 80008de:	4b38      	ldr	r3, [pc, #224]	@ (80009c0 <Update_File+0x178>)
 80008e0:	6839      	ldr	r1, [r7, #0]
 80008e2:	4835      	ldr	r0, [pc, #212]	@ (80009b8 <Update_File+0x170>)
 80008e4:	f007 fe5e 	bl	80085a4 <f_write>
 80008e8:	4603      	mov	r3, r0
 80008ea:	461a      	mov	r2, r3
 80008ec:	4b30      	ldr	r3, [pc, #192]	@ (80009b0 <Update_File+0x168>)
 80008ee:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 80008f0:	4b2f      	ldr	r3, [pc, #188]	@ (80009b0 <Update_File+0x168>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d013      	beq.n	8000920 <Update_File+0xd8>
	    {
	    	char *buf = malloc(100*sizeof(char));
 80008f8:	2064      	movs	r0, #100	@ 0x64
 80008fa:	f008 faa5 	bl	8008e48 <malloc>
 80008fe:	4603      	mov	r3, r0
 8000900:	61bb      	str	r3, [r7, #24]
	    	sprintf (buf, "ERROR!!! No. %d in writing file *%s*\n\n", fresult, name);
 8000902:	4b2b      	ldr	r3, [pc, #172]	@ (80009b0 <Update_File+0x168>)
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	461a      	mov	r2, r3
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	492e      	ldr	r1, [pc, #184]	@ (80009c4 <Update_File+0x17c>)
 800090c:	69b8      	ldr	r0, [r7, #24]
 800090e:	f008 fb59 	bl	8008fc4 <siprintf>
	    	Send_Uart(buf);
 8000912:	69b8      	ldr	r0, [r7, #24]
 8000914:	f7ff fe5c 	bl	80005d0 <Send_Uart>
	    	free(buf);
 8000918:	69b8      	ldr	r0, [r7, #24]
 800091a:	f008 fa9d 	bl	8008e58 <free>
 800091e:	e00f      	b.n	8000940 <Update_File+0xf8>
	    }

	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 8000920:	2064      	movs	r0, #100	@ 0x64
 8000922:	f008 fa91 	bl	8008e48 <malloc>
 8000926:	4603      	mov	r3, r0
 8000928:	61fb      	str	r3, [r7, #28]
	    	sprintf (buf, "*%s* UPDATED successfully\n", name);
 800092a:	687a      	ldr	r2, [r7, #4]
 800092c:	4926      	ldr	r1, [pc, #152]	@ (80009c8 <Update_File+0x180>)
 800092e:	69f8      	ldr	r0, [r7, #28]
 8000930:	f008 fb48 	bl	8008fc4 <siprintf>
	    	Send_Uart(buf);
 8000934:	69f8      	ldr	r0, [r7, #28]
 8000936:	f7ff fe4b 	bl	80005d0 <Send_Uart>
	    	free(buf);
 800093a:	69f8      	ldr	r0, [r7, #28]
 800093c:	f008 fa8c 	bl	8008e58 <free>
	    }

	    /* Close file */
	    fresult = f_close(&fil);
 8000940:	481d      	ldr	r0, [pc, #116]	@ (80009b8 <Update_File+0x170>)
 8000942:	f008 f841 	bl	80089c8 <f_close>
 8000946:	4603      	mov	r3, r0
 8000948:	461a      	mov	r2, r3
 800094a:	4b19      	ldr	r3, [pc, #100]	@ (80009b0 <Update_File+0x168>)
 800094c:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 800094e:	4b18      	ldr	r3, [pc, #96]	@ (80009b0 <Update_File+0x168>)
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d013      	beq.n	800097e <Update_File+0x136>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8000956:	2064      	movs	r0, #100	@ 0x64
 8000958:	f008 fa76 	bl	8008e48 <malloc>
 800095c:	4603      	mov	r3, r0
 800095e:	613b      	str	r3, [r7, #16]
	    	sprintf (buf, "ERROR!!! No. %d in closing file *%s*\n\n", fresult, name);
 8000960:	4b13      	ldr	r3, [pc, #76]	@ (80009b0 <Update_File+0x168>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	461a      	mov	r2, r3
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	4918      	ldr	r1, [pc, #96]	@ (80009cc <Update_File+0x184>)
 800096a:	6938      	ldr	r0, [r7, #16]
 800096c:	f008 fb2a 	bl	8008fc4 <siprintf>
	    	Send_Uart(buf);
 8000970:	6938      	ldr	r0, [r7, #16]
 8000972:	f7ff fe2d 	bl	80005d0 <Send_Uart>
	    	free(buf);
 8000976:	6938      	ldr	r0, [r7, #16]
 8000978:	f008 fa6e 	bl	8008e58 <free>
 800097c:	e00f      	b.n	800099e <Update_File+0x156>
	    }
	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 800097e:	2064      	movs	r0, #100	@ 0x64
 8000980:	f008 fa62 	bl	8008e48 <malloc>
 8000984:	4603      	mov	r3, r0
 8000986:	617b      	str	r3, [r7, #20]
	    	sprintf (buf, "File *%s* CLOSED successfully\n", name);
 8000988:	687a      	ldr	r2, [r7, #4]
 800098a:	4911      	ldr	r1, [pc, #68]	@ (80009d0 <Update_File+0x188>)
 800098c:	6978      	ldr	r0, [r7, #20]
 800098e:	f008 fb19 	bl	8008fc4 <siprintf>
	    	Send_Uart(buf);
 8000992:	6978      	ldr	r0, [r7, #20]
 8000994:	f7ff fe1c 	bl	80005d0 <Send_Uart>
	    	free(buf);
 8000998:	6978      	ldr	r0, [r7, #20]
 800099a:	f008 fa5d 	bl	8008e58 <free>
	     }
	}
    return fresult;
 800099e:	4b04      	ldr	r3, [pc, #16]	@ (80009b0 <Update_File+0x168>)
 80009a0:	781b      	ldrb	r3, [r3, #0]
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3720      	adds	r7, #32
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	200020dc 	.word	0x200020dc
 80009b0:	200020f4 	.word	0x200020f4
 80009b4:	08009888 	.word	0x08009888
 80009b8:	200010ac 	.word	0x200010ac
 80009bc:	080098a8 	.word	0x080098a8
 80009c0:	200020f8 	.word	0x200020f8
 80009c4:	08009ac4 	.word	0x08009ac4
 80009c8:	08009aec 	.word	0x08009aec
 80009cc:	080099b8 	.word	0x080099b8
 80009d0:	080099e0 	.word	0x080099e0

080009d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009d8:	f000 fbf0 	bl	80011bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009dc:	f000 f832 	bl	8000a44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009e0:	f000 f90e 	bl	8000c00 <MX_GPIO_Init>
  MX_DMA_Init();
 80009e4:	f000 f8e4 	bl	8000bb0 <MX_DMA_Init>
  MX_SDIO_SD_Init();
 80009e8:	f000 f898 	bl	8000b1c <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 80009ec:	f005 faa8 	bl	8005f40 <MX_FATFS_Init>
  MX_USART1_UART_Init();
 80009f0:	f000 f8b4 	bl	8000b5c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  Mount_SD("/");
 80009f4:	480e      	ldr	r0, [pc, #56]	@ (8000a30 <main+0x5c>)
 80009f6:	f7ff fe01 	bl	80005fc <Mount_SD>
  Format_SD();
 80009fa:	f7ff fe23 	bl	8000644 <Format_SD>
  Create_File("FILE1.TXT");
 80009fe:	480d      	ldr	r0, [pc, #52]	@ (8000a34 <main+0x60>)
 8000a00:	f7ff fe86 	bl	8000710 <Create_File>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	sprintf(buffer, "berattan SD'ye---> %d\n", indx);
 8000a04:	4b0c      	ldr	r3, [pc, #48]	@ (8000a38 <main+0x64>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	461a      	mov	r2, r3
 8000a0a:	490c      	ldr	r1, [pc, #48]	@ (8000a3c <main+0x68>)
 8000a0c:	480c      	ldr	r0, [pc, #48]	@ (8000a40 <main+0x6c>)
 8000a0e:	f008 fad9 	bl	8008fc4 <siprintf>
	Update_File("FILE1.TXT", buffer);
 8000a12:	490b      	ldr	r1, [pc, #44]	@ (8000a40 <main+0x6c>)
 8000a14:	4807      	ldr	r0, [pc, #28]	@ (8000a34 <main+0x60>)
 8000a16:	f7ff ff17 	bl	8000848 <Update_File>



	indx++;
 8000a1a:	4b07      	ldr	r3, [pc, #28]	@ (8000a38 <main+0x64>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	3301      	adds	r3, #1
 8000a20:	4a05      	ldr	r2, [pc, #20]	@ (8000a38 <main+0x64>)
 8000a22:	6013      	str	r3, [r2, #0]

	HAL_Delay(2000);
 8000a24:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000a28:	f000 fc3a 	bl	80012a0 <HAL_Delay>
	sprintf(buffer, "berattan SD'ye---> %d\n", indx);
 8000a2c:	bf00      	nop
 8000a2e:	e7e9      	b.n	8000a04 <main+0x30>
 8000a30:	08009bd8 	.word	0x08009bd8
 8000a34:	08009bdc 	.word	0x08009bdc
 8000a38:	200022ec 	.word	0x200022ec
 8000a3c:	08009be8 	.word	0x08009be8
 8000a40:	20002288 	.word	0x20002288

08000a44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b094      	sub	sp, #80	@ 0x50
 8000a48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a4a:	f107 031c 	add.w	r3, r7, #28
 8000a4e:	2234      	movs	r2, #52	@ 0x34
 8000a50:	2100      	movs	r1, #0
 8000a52:	4618      	mov	r0, r3
 8000a54:	f008 fad6 	bl	8009004 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a58:	f107 0308 	add.w	r3, r7, #8
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]
 8000a64:	60da      	str	r2, [r3, #12]
 8000a66:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a68:	2300      	movs	r3, #0
 8000a6a:	607b      	str	r3, [r7, #4]
 8000a6c:	4b29      	ldr	r3, [pc, #164]	@ (8000b14 <SystemClock_Config+0xd0>)
 8000a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a70:	4a28      	ldr	r2, [pc, #160]	@ (8000b14 <SystemClock_Config+0xd0>)
 8000a72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a76:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a78:	4b26      	ldr	r3, [pc, #152]	@ (8000b14 <SystemClock_Config+0xd0>)
 8000a7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a80:	607b      	str	r3, [r7, #4]
 8000a82:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a84:	2300      	movs	r3, #0
 8000a86:	603b      	str	r3, [r7, #0]
 8000a88:	4b23      	ldr	r3, [pc, #140]	@ (8000b18 <SystemClock_Config+0xd4>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000a90:	4a21      	ldr	r2, [pc, #132]	@ (8000b18 <SystemClock_Config+0xd4>)
 8000a92:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a96:	6013      	str	r3, [r2, #0]
 8000a98:	4b1f      	ldr	r3, [pc, #124]	@ (8000b18 <SystemClock_Config+0xd4>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000aa0:	603b      	str	r3, [r7, #0]
 8000aa2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000aa8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000aac:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ab2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000ab6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ab8:	2304      	movs	r3, #4
 8000aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000abc:	2348      	movs	r3, #72	@ 0x48
 8000abe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000ac4:	2303      	movs	r3, #3
 8000ac6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000acc:	f107 031c 	add.w	r3, r7, #28
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f002 f949 	bl	8002d68 <HAL_RCC_OscConfig>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000adc:	f000 f8f6 	bl	8000ccc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ae0:	230f      	movs	r3, #15
 8000ae2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
 8000ae4:	2303      	movs	r3, #3
 8000ae6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000aec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000af0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000af2:	2300      	movs	r3, #0
 8000af4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000af6:	f107 0308 	add.w	r3, r7, #8
 8000afa:	2102      	movs	r1, #2
 8000afc:	4618      	mov	r0, r3
 8000afe:	f001 fabf 	bl	8002080 <HAL_RCC_ClockConfig>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000b08:	f000 f8e0 	bl	8000ccc <Error_Handler>
  }
}
 8000b0c:	bf00      	nop
 8000b0e:	3750      	adds	r7, #80	@ 0x50
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	40023800 	.word	0x40023800
 8000b18:	40007000 	.word	0x40007000

08000b1c <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000b20:	4b0c      	ldr	r3, [pc, #48]	@ (8000b54 <MX_SDIO_SD_Init+0x38>)
 8000b22:	4a0d      	ldr	r2, [pc, #52]	@ (8000b58 <MX_SDIO_SD_Init+0x3c>)
 8000b24:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000b26:	4b0b      	ldr	r3, [pc, #44]	@ (8000b54 <MX_SDIO_SD_Init+0x38>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000b2c:	4b09      	ldr	r3, [pc, #36]	@ (8000b54 <MX_SDIO_SD_Init+0x38>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000b32:	4b08      	ldr	r3, [pc, #32]	@ (8000b54 <MX_SDIO_SD_Init+0x38>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000b38:	4b06      	ldr	r3, [pc, #24]	@ (8000b54 <MX_SDIO_SD_Init+0x38>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000b3e:	4b05      	ldr	r3, [pc, #20]	@ (8000b54 <MX_SDIO_SD_Init+0x38>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 4;
 8000b44:	4b03      	ldr	r3, [pc, #12]	@ (8000b54 <MX_SDIO_SD_Init+0x38>)
 8000b46:	2204      	movs	r2, #4
 8000b48:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000b4a:	bf00      	nop
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr
 8000b54:	200020fc 	.word	0x200020fc
 8000b58:	40012c00 	.word	0x40012c00

08000b5c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b60:	4b11      	ldr	r3, [pc, #68]	@ (8000ba8 <MX_USART1_UART_Init+0x4c>)
 8000b62:	4a12      	ldr	r2, [pc, #72]	@ (8000bac <MX_USART1_UART_Init+0x50>)
 8000b64:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b66:	4b10      	ldr	r3, [pc, #64]	@ (8000ba8 <MX_USART1_UART_Init+0x4c>)
 8000b68:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b6c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ba8 <MX_USART1_UART_Init+0x4c>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b74:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba8 <MX_USART1_UART_Init+0x4c>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b7a:	4b0b      	ldr	r3, [pc, #44]	@ (8000ba8 <MX_USART1_UART_Init+0x4c>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b80:	4b09      	ldr	r3, [pc, #36]	@ (8000ba8 <MX_USART1_UART_Init+0x4c>)
 8000b82:	220c      	movs	r2, #12
 8000b84:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b86:	4b08      	ldr	r3, [pc, #32]	@ (8000ba8 <MX_USART1_UART_Init+0x4c>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b8c:	4b06      	ldr	r3, [pc, #24]	@ (8000ba8 <MX_USART1_UART_Init+0x4c>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b92:	4805      	ldr	r0, [pc, #20]	@ (8000ba8 <MX_USART1_UART_Init+0x4c>)
 8000b94:	f003 fca0 	bl	80044d8 <HAL_UART_Init>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000b9e:	f000 f895 	bl	8000ccc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	20002240 	.word	0x20002240
 8000bac:	40011000 	.word	0x40011000

08000bb0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	607b      	str	r3, [r7, #4]
 8000bba:	4b10      	ldr	r3, [pc, #64]	@ (8000bfc <MX_DMA_Init+0x4c>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bbe:	4a0f      	ldr	r2, [pc, #60]	@ (8000bfc <MX_DMA_Init+0x4c>)
 8000bc0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000bc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bc6:	4b0d      	ldr	r3, [pc, #52]	@ (8000bfc <MX_DMA_Init+0x4c>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000bce:	607b      	str	r3, [r7, #4]
 8000bd0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	203b      	movs	r0, #59	@ 0x3b
 8000bd8:	f000 fc61 	bl	800149e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000bdc:	203b      	movs	r0, #59	@ 0x3b
 8000bde:	f000 fc7a 	bl	80014d6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000be2:	2200      	movs	r2, #0
 8000be4:	2100      	movs	r1, #0
 8000be6:	2045      	movs	r0, #69	@ 0x45
 8000be8:	f000 fc59 	bl	800149e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000bec:	2045      	movs	r0, #69	@ 0x45
 8000bee:	f000 fc72 	bl	80014d6 <HAL_NVIC_EnableIRQ>

}
 8000bf2:	bf00      	nop
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	40023800 	.word	0x40023800

08000c00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b08a      	sub	sp, #40	@ 0x28
 8000c04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c06:	f107 0314 	add.w	r3, r7, #20
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
 8000c0e:	605a      	str	r2, [r3, #4]
 8000c10:	609a      	str	r2, [r3, #8]
 8000c12:	60da      	str	r2, [r3, #12]
 8000c14:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	613b      	str	r3, [r7, #16]
 8000c1a:	4b2a      	ldr	r3, [pc, #168]	@ (8000cc4 <MX_GPIO_Init+0xc4>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1e:	4a29      	ldr	r2, [pc, #164]	@ (8000cc4 <MX_GPIO_Init+0xc4>)
 8000c20:	f043 0304 	orr.w	r3, r3, #4
 8000c24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c26:	4b27      	ldr	r3, [pc, #156]	@ (8000cc4 <MX_GPIO_Init+0xc4>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2a:	f003 0304 	and.w	r3, r3, #4
 8000c2e:	613b      	str	r3, [r7, #16]
 8000c30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	60fb      	str	r3, [r7, #12]
 8000c36:	4b23      	ldr	r3, [pc, #140]	@ (8000cc4 <MX_GPIO_Init+0xc4>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3a:	4a22      	ldr	r2, [pc, #136]	@ (8000cc4 <MX_GPIO_Init+0xc4>)
 8000c3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c42:	4b20      	ldr	r3, [pc, #128]	@ (8000cc4 <MX_GPIO_Init+0xc4>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	60bb      	str	r3, [r7, #8]
 8000c52:	4b1c      	ldr	r3, [pc, #112]	@ (8000cc4 <MX_GPIO_Init+0xc4>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c56:	4a1b      	ldr	r2, [pc, #108]	@ (8000cc4 <MX_GPIO_Init+0xc4>)
 8000c58:	f043 0302 	orr.w	r3, r3, #2
 8000c5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c5e:	4b19      	ldr	r3, [pc, #100]	@ (8000cc4 <MX_GPIO_Init+0xc4>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c62:	f003 0302 	and.w	r3, r3, #2
 8000c66:	60bb      	str	r3, [r7, #8]
 8000c68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	607b      	str	r3, [r7, #4]
 8000c6e:	4b15      	ldr	r3, [pc, #84]	@ (8000cc4 <MX_GPIO_Init+0xc4>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c72:	4a14      	ldr	r2, [pc, #80]	@ (8000cc4 <MX_GPIO_Init+0xc4>)
 8000c74:	f043 0301 	orr.w	r3, r3, #1
 8000c78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c7a:	4b12      	ldr	r3, [pc, #72]	@ (8000cc4 <MX_GPIO_Init+0xc4>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7e:	f003 0301 	and.w	r3, r3, #1
 8000c82:	607b      	str	r3, [r7, #4]
 8000c84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	603b      	str	r3, [r7, #0]
 8000c8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000cc4 <MX_GPIO_Init+0xc4>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8e:	4a0d      	ldr	r2, [pc, #52]	@ (8000cc4 <MX_GPIO_Init+0xc4>)
 8000c90:	f043 0308 	orr.w	r3, r3, #8
 8000c94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c96:	4b0b      	ldr	r3, [pc, #44]	@ (8000cc4 <MX_GPIO_Init+0xc4>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9a:	f003 0308 	and.w	r3, r3, #8
 8000c9e:	603b      	str	r3, [r7, #0]
 8000ca0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000ca2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ca6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000cac:	2302      	movs	r3, #2
 8000cae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cb0:	f107 0314 	add.w	r3, r7, #20
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	4804      	ldr	r0, [pc, #16]	@ (8000cc8 <MX_GPIO_Init+0xc8>)
 8000cb8:	f001 f836 	bl	8001d28 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cbc:	bf00      	nop
 8000cbe:	3728      	adds	r7, #40	@ 0x28
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	40023800 	.word	0x40023800
 8000cc8:	40020800 	.word	0x40020800

08000ccc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000cd0:	bf00      	nop
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
	...

08000cdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	607b      	str	r3, [r7, #4]
 8000ce6:	4b10      	ldr	r3, [pc, #64]	@ (8000d28 <HAL_MspInit+0x4c>)
 8000ce8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cea:	4a0f      	ldr	r2, [pc, #60]	@ (8000d28 <HAL_MspInit+0x4c>)
 8000cec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cf0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cf2:	4b0d      	ldr	r3, [pc, #52]	@ (8000d28 <HAL_MspInit+0x4c>)
 8000cf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cf6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cfa:	607b      	str	r3, [r7, #4]
 8000cfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	603b      	str	r3, [r7, #0]
 8000d02:	4b09      	ldr	r3, [pc, #36]	@ (8000d28 <HAL_MspInit+0x4c>)
 8000d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d06:	4a08      	ldr	r2, [pc, #32]	@ (8000d28 <HAL_MspInit+0x4c>)
 8000d08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d0e:	4b06      	ldr	r3, [pc, #24]	@ (8000d28 <HAL_MspInit+0x4c>)
 8000d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d16:	603b      	str	r3, [r7, #0]
 8000d18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	370c      	adds	r7, #12
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	40023800 	.word	0x40023800

08000d2c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b0a2      	sub	sp, #136	@ 0x88
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d34:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	609a      	str	r2, [r3, #8]
 8000d40:	60da      	str	r2, [r3, #12]
 8000d42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d44:	f107 0318 	add.w	r3, r7, #24
 8000d48:	225c      	movs	r2, #92	@ 0x5c
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f008 f959 	bl	8009004 <memset>
  if(hsd->Instance==SDIO)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a83      	ldr	r2, [pc, #524]	@ (8000f64 <HAL_SD_MspInit+0x238>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	f040 80fe 	bne.w	8000f5a <HAL_SD_MspInit+0x22e>

  /* USER CODE END SDIO_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8000d5e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000d62:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000d64:	2300      	movs	r3, #0
 8000d66:	66fb      	str	r3, [r7, #108]	@ 0x6c
    PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d6c:	f107 0318 	add.w	r3, r7, #24
 8000d70:	4618      	mov	r0, r3
 8000d72:	f001 fa9f 	bl	80022b4 <HAL_RCCEx_PeriphCLKConfig>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8000d7c:	f7ff ffa6 	bl	8000ccc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000d80:	2300      	movs	r3, #0
 8000d82:	617b      	str	r3, [r7, #20]
 8000d84:	4b78      	ldr	r3, [pc, #480]	@ (8000f68 <HAL_SD_MspInit+0x23c>)
 8000d86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d88:	4a77      	ldr	r2, [pc, #476]	@ (8000f68 <HAL_SD_MspInit+0x23c>)
 8000d8a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000d8e:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d90:	4b75      	ldr	r3, [pc, #468]	@ (8000f68 <HAL_SD_MspInit+0x23c>)
 8000d92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000d98:	617b      	str	r3, [r7, #20]
 8000d9a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	613b      	str	r3, [r7, #16]
 8000da0:	4b71      	ldr	r3, [pc, #452]	@ (8000f68 <HAL_SD_MspInit+0x23c>)
 8000da2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da4:	4a70      	ldr	r2, [pc, #448]	@ (8000f68 <HAL_SD_MspInit+0x23c>)
 8000da6:	f043 0302 	orr.w	r3, r3, #2
 8000daa:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dac:	4b6e      	ldr	r3, [pc, #440]	@ (8000f68 <HAL_SD_MspInit+0x23c>)
 8000dae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db0:	f003 0302 	and.w	r3, r3, #2
 8000db4:	613b      	str	r3, [r7, #16]
 8000db6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000db8:	2300      	movs	r3, #0
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	4b6a      	ldr	r3, [pc, #424]	@ (8000f68 <HAL_SD_MspInit+0x23c>)
 8000dbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc0:	4a69      	ldr	r2, [pc, #420]	@ (8000f68 <HAL_SD_MspInit+0x23c>)
 8000dc2:	f043 0304 	orr.w	r3, r3, #4
 8000dc6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dc8:	4b67      	ldr	r3, [pc, #412]	@ (8000f68 <HAL_SD_MspInit+0x23c>)
 8000dca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dcc:	f003 0304 	and.w	r3, r3, #4
 8000dd0:	60fb      	str	r3, [r7, #12]
 8000dd2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	60bb      	str	r3, [r7, #8]
 8000dd8:	4b63      	ldr	r3, [pc, #396]	@ (8000f68 <HAL_SD_MspInit+0x23c>)
 8000dda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ddc:	4a62      	ldr	r2, [pc, #392]	@ (8000f68 <HAL_SD_MspInit+0x23c>)
 8000dde:	f043 0308 	orr.w	r3, r3, #8
 8000de2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000de4:	4b60      	ldr	r3, [pc, #384]	@ (8000f68 <HAL_SD_MspInit+0x23c>)
 8000de6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de8:	f003 0308 	and.w	r3, r3, #8
 8000dec:	60bb      	str	r3, [r7, #8]
 8000dee:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PB2     ------> SDIO_CK
    PC8     ------> SDIO_D0
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000df0:	2304      	movs	r3, #4
 8000df2:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df4:	2302      	movs	r3, #2
 8000df6:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dfc:	2303      	movs	r3, #3
 8000dfe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000e02:	230c      	movs	r3, #12
 8000e04:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e08:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4857      	ldr	r0, [pc, #348]	@ (8000f6c <HAL_SD_MspInit+0x240>)
 8000e10:	f000 ff8a 	bl	8001d28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000e14:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e18:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e22:	2303      	movs	r3, #3
 8000e24:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000e28:	230c      	movs	r3, #12
 8000e2a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e2e:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000e32:	4619      	mov	r1, r3
 8000e34:	484e      	ldr	r0, [pc, #312]	@ (8000f70 <HAL_SD_MspInit+0x244>)
 8000e36:	f000 ff77 	bl	8001d28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e3a:	2304      	movs	r3, #4
 8000e3c:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e46:	2303      	movs	r3, #3
 8000e48:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000e4c:	230c      	movs	r3, #12
 8000e4e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e52:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000e56:	4619      	mov	r1, r3
 8000e58:	4846      	ldr	r0, [pc, #280]	@ (8000f74 <HAL_SD_MspInit+0x248>)
 8000e5a:	f000 ff65 	bl	8001d28 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8000e5e:	4b46      	ldr	r3, [pc, #280]	@ (8000f78 <HAL_SD_MspInit+0x24c>)
 8000e60:	4a46      	ldr	r2, [pc, #280]	@ (8000f7c <HAL_SD_MspInit+0x250>)
 8000e62:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8000e64:	4b44      	ldr	r3, [pc, #272]	@ (8000f78 <HAL_SD_MspInit+0x24c>)
 8000e66:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000e6a:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e6c:	4b42      	ldr	r3, [pc, #264]	@ (8000f78 <HAL_SD_MspInit+0x24c>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e72:	4b41      	ldr	r3, [pc, #260]	@ (8000f78 <HAL_SD_MspInit+0x24c>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e78:	4b3f      	ldr	r3, [pc, #252]	@ (8000f78 <HAL_SD_MspInit+0x24c>)
 8000e7a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e7e:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000e80:	4b3d      	ldr	r3, [pc, #244]	@ (8000f78 <HAL_SD_MspInit+0x24c>)
 8000e82:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000e86:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000e88:	4b3b      	ldr	r3, [pc, #236]	@ (8000f78 <HAL_SD_MspInit+0x24c>)
 8000e8a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000e8e:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8000e90:	4b39      	ldr	r3, [pc, #228]	@ (8000f78 <HAL_SD_MspInit+0x24c>)
 8000e92:	2220      	movs	r2, #32
 8000e94:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e96:	4b38      	ldr	r3, [pc, #224]	@ (8000f78 <HAL_SD_MspInit+0x24c>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000e9c:	4b36      	ldr	r3, [pc, #216]	@ (8000f78 <HAL_SD_MspInit+0x24c>)
 8000e9e:	2204      	movs	r2, #4
 8000ea0:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000ea2:	4b35      	ldr	r3, [pc, #212]	@ (8000f78 <HAL_SD_MspInit+0x24c>)
 8000ea4:	2203      	movs	r2, #3
 8000ea6:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8000ea8:	4b33      	ldr	r3, [pc, #204]	@ (8000f78 <HAL_SD_MspInit+0x24c>)
 8000eaa:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000eae:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000eb0:	4b31      	ldr	r3, [pc, #196]	@ (8000f78 <HAL_SD_MspInit+0x24c>)
 8000eb2:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000eb6:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8000eb8:	482f      	ldr	r0, [pc, #188]	@ (8000f78 <HAL_SD_MspInit+0x24c>)
 8000eba:	f000 fb27 	bl	800150c <HAL_DMA_Init>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <HAL_SD_MspInit+0x19c>
    {
      Error_Handler();
 8000ec4:	f7ff ff02 	bl	8000ccc <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	4a2b      	ldr	r2, [pc, #172]	@ (8000f78 <HAL_SD_MspInit+0x24c>)
 8000ecc:	641a      	str	r2, [r3, #64]	@ 0x40
 8000ece:	4a2a      	ldr	r2, [pc, #168]	@ (8000f78 <HAL_SD_MspInit+0x24c>)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8000ed4:	4b2a      	ldr	r3, [pc, #168]	@ (8000f80 <HAL_SD_MspInit+0x254>)
 8000ed6:	4a2b      	ldr	r2, [pc, #172]	@ (8000f84 <HAL_SD_MspInit+0x258>)
 8000ed8:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8000eda:	4b29      	ldr	r3, [pc, #164]	@ (8000f80 <HAL_SD_MspInit+0x254>)
 8000edc:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000ee0:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ee2:	4b27      	ldr	r3, [pc, #156]	@ (8000f80 <HAL_SD_MspInit+0x254>)
 8000ee4:	2240      	movs	r2, #64	@ 0x40
 8000ee6:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ee8:	4b25      	ldr	r3, [pc, #148]	@ (8000f80 <HAL_SD_MspInit+0x254>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000eee:	4b24      	ldr	r3, [pc, #144]	@ (8000f80 <HAL_SD_MspInit+0x254>)
 8000ef0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ef4:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000ef6:	4b22      	ldr	r3, [pc, #136]	@ (8000f80 <HAL_SD_MspInit+0x254>)
 8000ef8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000efc:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000efe:	4b20      	ldr	r3, [pc, #128]	@ (8000f80 <HAL_SD_MspInit+0x254>)
 8000f00:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000f04:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8000f06:	4b1e      	ldr	r3, [pc, #120]	@ (8000f80 <HAL_SD_MspInit+0x254>)
 8000f08:	2220      	movs	r2, #32
 8000f0a:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f0c:	4b1c      	ldr	r3, [pc, #112]	@ (8000f80 <HAL_SD_MspInit+0x254>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000f12:	4b1b      	ldr	r3, [pc, #108]	@ (8000f80 <HAL_SD_MspInit+0x254>)
 8000f14:	2204      	movs	r2, #4
 8000f16:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000f18:	4b19      	ldr	r3, [pc, #100]	@ (8000f80 <HAL_SD_MspInit+0x254>)
 8000f1a:	2203      	movs	r2, #3
 8000f1c:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8000f1e:	4b18      	ldr	r3, [pc, #96]	@ (8000f80 <HAL_SD_MspInit+0x254>)
 8000f20:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000f24:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000f26:	4b16      	ldr	r3, [pc, #88]	@ (8000f80 <HAL_SD_MspInit+0x254>)
 8000f28:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000f2c:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8000f2e:	4814      	ldr	r0, [pc, #80]	@ (8000f80 <HAL_SD_MspInit+0x254>)
 8000f30:	f000 faec 	bl	800150c <HAL_DMA_Init>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <HAL_SD_MspInit+0x212>
    {
      Error_Handler();
 8000f3a:	f7ff fec7 	bl	8000ccc <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a0f      	ldr	r2, [pc, #60]	@ (8000f80 <HAL_SD_MspInit+0x254>)
 8000f42:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000f44:	4a0e      	ldr	r2, [pc, #56]	@ (8000f80 <HAL_SD_MspInit+0x254>)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	2031      	movs	r0, #49	@ 0x31
 8000f50:	f000 faa5 	bl	800149e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8000f54:	2031      	movs	r0, #49	@ 0x31
 8000f56:	f000 fabe 	bl	80014d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8000f5a:	bf00      	nop
 8000f5c:	3788      	adds	r7, #136	@ 0x88
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40012c00 	.word	0x40012c00
 8000f68:	40023800 	.word	0x40023800
 8000f6c:	40020400 	.word	0x40020400
 8000f70:	40020800 	.word	0x40020800
 8000f74:	40020c00 	.word	0x40020c00
 8000f78:	20002180 	.word	0x20002180
 8000f7c:	40026458 	.word	0x40026458
 8000f80:	200021e0 	.word	0x200021e0
 8000f84:	400264a0 	.word	0x400264a0

08000f88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b08a      	sub	sp, #40	@ 0x28
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f90:	f107 0314 	add.w	r3, r7, #20
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	60da      	str	r2, [r3, #12]
 8000f9e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a1d      	ldr	r2, [pc, #116]	@ (800101c <HAL_UART_MspInit+0x94>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d134      	bne.n	8001014 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	613b      	str	r3, [r7, #16]
 8000fae:	4b1c      	ldr	r3, [pc, #112]	@ (8001020 <HAL_UART_MspInit+0x98>)
 8000fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fb2:	4a1b      	ldr	r2, [pc, #108]	@ (8001020 <HAL_UART_MspInit+0x98>)
 8000fb4:	f043 0310 	orr.w	r3, r3, #16
 8000fb8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fba:	4b19      	ldr	r3, [pc, #100]	@ (8001020 <HAL_UART_MspInit+0x98>)
 8000fbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fbe:	f003 0310 	and.w	r3, r3, #16
 8000fc2:	613b      	str	r3, [r7, #16]
 8000fc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60fb      	str	r3, [r7, #12]
 8000fca:	4b15      	ldr	r3, [pc, #84]	@ (8001020 <HAL_UART_MspInit+0x98>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fce:	4a14      	ldr	r2, [pc, #80]	@ (8001020 <HAL_UART_MspInit+0x98>)
 8000fd0:	f043 0301 	orr.w	r3, r3, #1
 8000fd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fd6:	4b12      	ldr	r3, [pc, #72]	@ (8001020 <HAL_UART_MspInit+0x98>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fda:	f003 0301 	and.w	r3, r3, #1
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000fe2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000fe6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fec:	2300      	movs	r3, #0
 8000fee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff0:	2303      	movs	r3, #3
 8000ff2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ff4:	2307      	movs	r3, #7
 8000ff6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff8:	f107 0314 	add.w	r3, r7, #20
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4809      	ldr	r0, [pc, #36]	@ (8001024 <HAL_UART_MspInit+0x9c>)
 8001000:	f000 fe92 	bl	8001d28 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001004:	2200      	movs	r2, #0
 8001006:	2100      	movs	r1, #0
 8001008:	2025      	movs	r0, #37	@ 0x25
 800100a:	f000 fa48 	bl	800149e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800100e:	2025      	movs	r0, #37	@ 0x25
 8001010:	f000 fa61 	bl	80014d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001014:	bf00      	nop
 8001016:	3728      	adds	r7, #40	@ 0x28
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	40011000 	.word	0x40011000
 8001020:	40023800 	.word	0x40023800
 8001024:	40020000 	.word	0x40020000

08001028 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800102c:	bf00      	nop
 800102e:	e7fd      	b.n	800102c <NMI_Handler+0x4>

08001030 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001034:	bf00      	nop
 8001036:	e7fd      	b.n	8001034 <HardFault_Handler+0x4>

08001038 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800103c:	bf00      	nop
 800103e:	e7fd      	b.n	800103c <MemManage_Handler+0x4>

08001040 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001044:	bf00      	nop
 8001046:	e7fd      	b.n	8001044 <BusFault_Handler+0x4>

08001048 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800104c:	bf00      	nop
 800104e:	e7fd      	b.n	800104c <UsageFault_Handler+0x4>

08001050 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001054:	bf00      	nop
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr

0800105e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800105e:	b480      	push	{r7}
 8001060:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001062:	bf00      	nop
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001070:	bf00      	nop
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr

0800107a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800107a:	b580      	push	{r7, lr}
 800107c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800107e:	f000 f8ef 	bl	8001260 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}
	...

08001088 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800108c:	4802      	ldr	r0, [pc, #8]	@ (8001098 <USART1_IRQHandler+0x10>)
 800108e:	f003 faff 	bl	8004690 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001092:	bf00      	nop
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	20002240 	.word	0x20002240

0800109c <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80010a0:	4802      	ldr	r0, [pc, #8]	@ (80010ac <SDIO_IRQHandler+0x10>)
 80010a2:	f002 fb71 	bl	8003788 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	200020fc 	.word	0x200020fc

080010b0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 80010b4:	4802      	ldr	r0, [pc, #8]	@ (80010c0 <DMA2_Stream3_IRQHandler+0x10>)
 80010b6:	f000 fbc1 	bl	800183c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80010ba:	bf00      	nop
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	20002180 	.word	0x20002180

080010c4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 80010c8:	4802      	ldr	r0, [pc, #8]	@ (80010d4 <DMA2_Stream6_IRQHandler+0x10>)
 80010ca:	f000 fbb7 	bl	800183c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	200021e0 	.word	0x200021e0

080010d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010e0:	4a14      	ldr	r2, [pc, #80]	@ (8001134 <_sbrk+0x5c>)
 80010e2:	4b15      	ldr	r3, [pc, #84]	@ (8001138 <_sbrk+0x60>)
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010ec:	4b13      	ldr	r3, [pc, #76]	@ (800113c <_sbrk+0x64>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d102      	bne.n	80010fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010f4:	4b11      	ldr	r3, [pc, #68]	@ (800113c <_sbrk+0x64>)
 80010f6:	4a12      	ldr	r2, [pc, #72]	@ (8001140 <_sbrk+0x68>)
 80010f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010fa:	4b10      	ldr	r3, [pc, #64]	@ (800113c <_sbrk+0x64>)
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4413      	add	r3, r2
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	429a      	cmp	r2, r3
 8001106:	d207      	bcs.n	8001118 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001108:	f007 ff94 	bl	8009034 <__errno>
 800110c:	4603      	mov	r3, r0
 800110e:	220c      	movs	r2, #12
 8001110:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001112:	f04f 33ff 	mov.w	r3, #4294967295
 8001116:	e009      	b.n	800112c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001118:	4b08      	ldr	r3, [pc, #32]	@ (800113c <_sbrk+0x64>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800111e:	4b07      	ldr	r3, [pc, #28]	@ (800113c <_sbrk+0x64>)
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4413      	add	r3, r2
 8001126:	4a05      	ldr	r2, [pc, #20]	@ (800113c <_sbrk+0x64>)
 8001128:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800112a:	68fb      	ldr	r3, [r7, #12]
}
 800112c:	4618      	mov	r0, r3
 800112e:	3718      	adds	r7, #24
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	20020000 	.word	0x20020000
 8001138:	00000400 	.word	0x00000400
 800113c:	200022f0 	.word	0x200022f0
 8001140:	20002488 	.word	0x20002488

08001144 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001148:	4b06      	ldr	r3, [pc, #24]	@ (8001164 <SystemInit+0x20>)
 800114a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800114e:	4a05      	ldr	r2, [pc, #20]	@ (8001164 <SystemInit+0x20>)
 8001150:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001154:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001158:	bf00      	nop
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	e000ed00 	.word	0xe000ed00

08001168 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001168:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011a0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800116c:	f7ff ffea 	bl	8001144 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001170:	480c      	ldr	r0, [pc, #48]	@ (80011a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001172:	490d      	ldr	r1, [pc, #52]	@ (80011a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001174:	4a0d      	ldr	r2, [pc, #52]	@ (80011ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001176:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001178:	e002      	b.n	8001180 <LoopCopyDataInit>

0800117a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800117a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800117c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800117e:	3304      	adds	r3, #4

08001180 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001180:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001182:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001184:	d3f9      	bcc.n	800117a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001186:	4a0a      	ldr	r2, [pc, #40]	@ (80011b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001188:	4c0a      	ldr	r4, [pc, #40]	@ (80011b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800118a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800118c:	e001      	b.n	8001192 <LoopFillZerobss>

0800118e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800118e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001190:	3204      	adds	r2, #4

08001192 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001192:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001194:	d3fb      	bcc.n	800118e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001196:	f007 ff53 	bl	8009040 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800119a:	f7ff fc1b 	bl	80009d4 <main>
  bx  lr    
 800119e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011a8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80011ac:	08009d3c 	.word	0x08009d3c
  ldr r2, =_sbss
 80011b0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80011b4:	20002484 	.word	0x20002484

080011b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011b8:	e7fe      	b.n	80011b8 <ADC_IRQHandler>
	...

080011bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011c0:	4b0e      	ldr	r3, [pc, #56]	@ (80011fc <HAL_Init+0x40>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a0d      	ldr	r2, [pc, #52]	@ (80011fc <HAL_Init+0x40>)
 80011c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011cc:	4b0b      	ldr	r3, [pc, #44]	@ (80011fc <HAL_Init+0x40>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a0a      	ldr	r2, [pc, #40]	@ (80011fc <HAL_Init+0x40>)
 80011d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011d8:	4b08      	ldr	r3, [pc, #32]	@ (80011fc <HAL_Init+0x40>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a07      	ldr	r2, [pc, #28]	@ (80011fc <HAL_Init+0x40>)
 80011de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011e4:	2003      	movs	r0, #3
 80011e6:	f000 f94f 	bl	8001488 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011ea:	200f      	movs	r0, #15
 80011ec:	f000 f808 	bl	8001200 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011f0:	f7ff fd74 	bl	8000cdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011f4:	2300      	movs	r3, #0
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	40023c00 	.word	0x40023c00

08001200 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001208:	4b12      	ldr	r3, [pc, #72]	@ (8001254 <HAL_InitTick+0x54>)
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	4b12      	ldr	r3, [pc, #72]	@ (8001258 <HAL_InitTick+0x58>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	4619      	mov	r1, r3
 8001212:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001216:	fbb3 f3f1 	udiv	r3, r3, r1
 800121a:	fbb2 f3f3 	udiv	r3, r2, r3
 800121e:	4618      	mov	r0, r3
 8001220:	f000 f967 	bl	80014f2 <HAL_SYSTICK_Config>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	e00e      	b.n	800124c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2b0f      	cmp	r3, #15
 8001232:	d80a      	bhi.n	800124a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001234:	2200      	movs	r2, #0
 8001236:	6879      	ldr	r1, [r7, #4]
 8001238:	f04f 30ff 	mov.w	r0, #4294967295
 800123c:	f000 f92f 	bl	800149e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001240:	4a06      	ldr	r2, [pc, #24]	@ (800125c <HAL_InitTick+0x5c>)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001246:	2300      	movs	r3, #0
 8001248:	e000      	b.n	800124c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
}
 800124c:	4618      	mov	r0, r3
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	20000000 	.word	0x20000000
 8001258:	20000008 	.word	0x20000008
 800125c:	20000004 	.word	0x20000004

08001260 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001264:	4b06      	ldr	r3, [pc, #24]	@ (8001280 <HAL_IncTick+0x20>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	461a      	mov	r2, r3
 800126a:	4b06      	ldr	r3, [pc, #24]	@ (8001284 <HAL_IncTick+0x24>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4413      	add	r3, r2
 8001270:	4a04      	ldr	r2, [pc, #16]	@ (8001284 <HAL_IncTick+0x24>)
 8001272:	6013      	str	r3, [r2, #0]
}
 8001274:	bf00      	nop
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	20000008 	.word	0x20000008
 8001284:	200022f4 	.word	0x200022f4

08001288 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  return uwTick;
 800128c:	4b03      	ldr	r3, [pc, #12]	@ (800129c <HAL_GetTick+0x14>)
 800128e:	681b      	ldr	r3, [r3, #0]
}
 8001290:	4618      	mov	r0, r3
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	200022f4 	.word	0x200022f4

080012a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012a8:	f7ff ffee 	bl	8001288 <HAL_GetTick>
 80012ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012b8:	d005      	beq.n	80012c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012ba:	4b0a      	ldr	r3, [pc, #40]	@ (80012e4 <HAL_Delay+0x44>)
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	461a      	mov	r2, r3
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	4413      	add	r3, r2
 80012c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012c6:	bf00      	nop
 80012c8:	f7ff ffde 	bl	8001288 <HAL_GetTick>
 80012cc:	4602      	mov	r2, r0
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	68fa      	ldr	r2, [r7, #12]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d8f7      	bhi.n	80012c8 <HAL_Delay+0x28>
  {
  }
}
 80012d8:	bf00      	nop
 80012da:	bf00      	nop
 80012dc:	3710      	adds	r7, #16
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	20000008 	.word	0x20000008

080012e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b085      	sub	sp, #20
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f003 0307 	and.w	r3, r3, #7
 80012f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012f8:	4b0c      	ldr	r3, [pc, #48]	@ (800132c <__NVIC_SetPriorityGrouping+0x44>)
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012fe:	68ba      	ldr	r2, [r7, #8]
 8001300:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001304:	4013      	ands	r3, r2
 8001306:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001310:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001314:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001318:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800131a:	4a04      	ldr	r2, [pc, #16]	@ (800132c <__NVIC_SetPriorityGrouping+0x44>)
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	60d3      	str	r3, [r2, #12]
}
 8001320:	bf00      	nop
 8001322:	3714      	adds	r7, #20
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr
 800132c:	e000ed00 	.word	0xe000ed00

08001330 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001334:	4b04      	ldr	r3, [pc, #16]	@ (8001348 <__NVIC_GetPriorityGrouping+0x18>)
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	0a1b      	lsrs	r3, r3, #8
 800133a:	f003 0307 	and.w	r3, r3, #7
}
 800133e:	4618      	mov	r0, r3
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr
 8001348:	e000ed00 	.word	0xe000ed00

0800134c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	4603      	mov	r3, r0
 8001354:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135a:	2b00      	cmp	r3, #0
 800135c:	db0b      	blt.n	8001376 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800135e:	79fb      	ldrb	r3, [r7, #7]
 8001360:	f003 021f 	and.w	r2, r3, #31
 8001364:	4907      	ldr	r1, [pc, #28]	@ (8001384 <__NVIC_EnableIRQ+0x38>)
 8001366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136a:	095b      	lsrs	r3, r3, #5
 800136c:	2001      	movs	r0, #1
 800136e:	fa00 f202 	lsl.w	r2, r0, r2
 8001372:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001376:	bf00      	nop
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	e000e100 	.word	0xe000e100

08001388 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	4603      	mov	r3, r0
 8001390:	6039      	str	r1, [r7, #0]
 8001392:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001394:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001398:	2b00      	cmp	r3, #0
 800139a:	db0a      	blt.n	80013b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	b2da      	uxtb	r2, r3
 80013a0:	490c      	ldr	r1, [pc, #48]	@ (80013d4 <__NVIC_SetPriority+0x4c>)
 80013a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a6:	0112      	lsls	r2, r2, #4
 80013a8:	b2d2      	uxtb	r2, r2
 80013aa:	440b      	add	r3, r1
 80013ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013b0:	e00a      	b.n	80013c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	b2da      	uxtb	r2, r3
 80013b6:	4908      	ldr	r1, [pc, #32]	@ (80013d8 <__NVIC_SetPriority+0x50>)
 80013b8:	79fb      	ldrb	r3, [r7, #7]
 80013ba:	f003 030f 	and.w	r3, r3, #15
 80013be:	3b04      	subs	r3, #4
 80013c0:	0112      	lsls	r2, r2, #4
 80013c2:	b2d2      	uxtb	r2, r2
 80013c4:	440b      	add	r3, r1
 80013c6:	761a      	strb	r2, [r3, #24]
}
 80013c8:	bf00      	nop
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	e000e100 	.word	0xe000e100
 80013d8:	e000ed00 	.word	0xe000ed00

080013dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013dc:	b480      	push	{r7}
 80013de:	b089      	sub	sp, #36	@ 0x24
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	60f8      	str	r0, [r7, #12]
 80013e4:	60b9      	str	r1, [r7, #8]
 80013e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	f003 0307 	and.w	r3, r3, #7
 80013ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	f1c3 0307 	rsb	r3, r3, #7
 80013f6:	2b04      	cmp	r3, #4
 80013f8:	bf28      	it	cs
 80013fa:	2304      	movcs	r3, #4
 80013fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	3304      	adds	r3, #4
 8001402:	2b06      	cmp	r3, #6
 8001404:	d902      	bls.n	800140c <NVIC_EncodePriority+0x30>
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	3b03      	subs	r3, #3
 800140a:	e000      	b.n	800140e <NVIC_EncodePriority+0x32>
 800140c:	2300      	movs	r3, #0
 800140e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001410:	f04f 32ff 	mov.w	r2, #4294967295
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	fa02 f303 	lsl.w	r3, r2, r3
 800141a:	43da      	mvns	r2, r3
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	401a      	ands	r2, r3
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001424:	f04f 31ff 	mov.w	r1, #4294967295
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	fa01 f303 	lsl.w	r3, r1, r3
 800142e:	43d9      	mvns	r1, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001434:	4313      	orrs	r3, r2
         );
}
 8001436:	4618      	mov	r0, r3
 8001438:	3724      	adds	r7, #36	@ 0x24
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
	...

08001444 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	3b01      	subs	r3, #1
 8001450:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001454:	d301      	bcc.n	800145a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001456:	2301      	movs	r3, #1
 8001458:	e00f      	b.n	800147a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800145a:	4a0a      	ldr	r2, [pc, #40]	@ (8001484 <SysTick_Config+0x40>)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	3b01      	subs	r3, #1
 8001460:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001462:	210f      	movs	r1, #15
 8001464:	f04f 30ff 	mov.w	r0, #4294967295
 8001468:	f7ff ff8e 	bl	8001388 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800146c:	4b05      	ldr	r3, [pc, #20]	@ (8001484 <SysTick_Config+0x40>)
 800146e:	2200      	movs	r2, #0
 8001470:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001472:	4b04      	ldr	r3, [pc, #16]	@ (8001484 <SysTick_Config+0x40>)
 8001474:	2207      	movs	r2, #7
 8001476:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001478:	2300      	movs	r3, #0
}
 800147a:	4618      	mov	r0, r3
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	e000e010 	.word	0xe000e010

08001488 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f7ff ff29 	bl	80012e8 <__NVIC_SetPriorityGrouping>
}
 8001496:	bf00      	nop
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}

0800149e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800149e:	b580      	push	{r7, lr}
 80014a0:	b086      	sub	sp, #24
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	4603      	mov	r3, r0
 80014a6:	60b9      	str	r1, [r7, #8]
 80014a8:	607a      	str	r2, [r7, #4]
 80014aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014ac:	2300      	movs	r3, #0
 80014ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014b0:	f7ff ff3e 	bl	8001330 <__NVIC_GetPriorityGrouping>
 80014b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	68b9      	ldr	r1, [r7, #8]
 80014ba:	6978      	ldr	r0, [r7, #20]
 80014bc:	f7ff ff8e 	bl	80013dc <NVIC_EncodePriority>
 80014c0:	4602      	mov	r2, r0
 80014c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014c6:	4611      	mov	r1, r2
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff ff5d 	bl	8001388 <__NVIC_SetPriority>
}
 80014ce:	bf00      	nop
 80014d0:	3718      	adds	r7, #24
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b082      	sub	sp, #8
 80014da:	af00      	add	r7, sp, #0
 80014dc:	4603      	mov	r3, r0
 80014de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff ff31 	bl	800134c <__NVIC_EnableIRQ>
}
 80014ea:	bf00      	nop
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b082      	sub	sp, #8
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f7ff ffa2 	bl	8001444 <SysTick_Config>
 8001500:	4603      	mov	r3, r0
}
 8001502:	4618      	mov	r0, r3
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
	...

0800150c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b086      	sub	sp, #24
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001514:	2300      	movs	r3, #0
 8001516:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001518:	f7ff feb6 	bl	8001288 <HAL_GetTick>
 800151c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d101      	bne.n	8001528 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	e099      	b.n	800165c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2202      	movs	r2, #2
 800152c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2200      	movs	r2, #0
 8001534:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f022 0201 	bic.w	r2, r2, #1
 8001546:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001548:	e00f      	b.n	800156a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800154a:	f7ff fe9d 	bl	8001288 <HAL_GetTick>
 800154e:	4602      	mov	r2, r0
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	2b05      	cmp	r3, #5
 8001556:	d908      	bls.n	800156a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2220      	movs	r2, #32
 800155c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2203      	movs	r2, #3
 8001562:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e078      	b.n	800165c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 0301 	and.w	r3, r3, #1
 8001574:	2b00      	cmp	r3, #0
 8001576:	d1e8      	bne.n	800154a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001580:	697a      	ldr	r2, [r7, #20]
 8001582:	4b38      	ldr	r3, [pc, #224]	@ (8001664 <HAL_DMA_Init+0x158>)
 8001584:	4013      	ands	r3, r2
 8001586:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	685a      	ldr	r2, [r3, #4]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001596:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	691b      	ldr	r3, [r3, #16]
 800159c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	699b      	ldr	r3, [r3, #24]
 80015a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6a1b      	ldr	r3, [r3, #32]
 80015b4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015b6:	697a      	ldr	r2, [r7, #20]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015c0:	2b04      	cmp	r3, #4
 80015c2:	d107      	bne.n	80015d4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015cc:	4313      	orrs	r3, r2
 80015ce:	697a      	ldr	r2, [r7, #20]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	697a      	ldr	r2, [r7, #20]
 80015da:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	695b      	ldr	r3, [r3, #20]
 80015e2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	f023 0307 	bic.w	r3, r3, #7
 80015ea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015f0:	697a      	ldr	r2, [r7, #20]
 80015f2:	4313      	orrs	r3, r2
 80015f4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015fa:	2b04      	cmp	r3, #4
 80015fc:	d117      	bne.n	800162e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001602:	697a      	ldr	r2, [r7, #20]
 8001604:	4313      	orrs	r3, r2
 8001606:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800160c:	2b00      	cmp	r3, #0
 800160e:	d00e      	beq.n	800162e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001610:	6878      	ldr	r0, [r7, #4]
 8001612:	f000 fb0d 	bl	8001c30 <DMA_CheckFifoParam>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d008      	beq.n	800162e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2240      	movs	r2, #64	@ 0x40
 8001620:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2201      	movs	r2, #1
 8001626:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800162a:	2301      	movs	r3, #1
 800162c:	e016      	b.n	800165c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	697a      	ldr	r2, [r7, #20]
 8001634:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f000 fac4 	bl	8001bc4 <DMA_CalcBaseAndBitshift>
 800163c:	4603      	mov	r3, r0
 800163e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001644:	223f      	movs	r2, #63	@ 0x3f
 8001646:	409a      	lsls	r2, r3
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2200      	movs	r2, #0
 8001650:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2201      	movs	r2, #1
 8001656:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800165a:	2300      	movs	r3, #0
}
 800165c:	4618      	mov	r0, r3
 800165e:	3718      	adds	r7, #24
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	f010803f 	.word	0xf010803f

08001668 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b086      	sub	sp, #24
 800166c:	af00      	add	r7, sp, #0
 800166e:	60f8      	str	r0, [r7, #12]
 8001670:	60b9      	str	r1, [r7, #8]
 8001672:	607a      	str	r2, [r7, #4]
 8001674:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001676:	2300      	movs	r3, #0
 8001678:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800167e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001686:	2b01      	cmp	r3, #1
 8001688:	d101      	bne.n	800168e <HAL_DMA_Start_IT+0x26>
 800168a:	2302      	movs	r3, #2
 800168c:	e040      	b.n	8001710 <HAL_DMA_Start_IT+0xa8>
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	2201      	movs	r2, #1
 8001692:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800169c:	b2db      	uxtb	r3, r3
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d12f      	bne.n	8001702 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	2202      	movs	r2, #2
 80016a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	2200      	movs	r2, #0
 80016ae:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	68b9      	ldr	r1, [r7, #8]
 80016b6:	68f8      	ldr	r0, [r7, #12]
 80016b8:	f000 fa56 	bl	8001b68 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016c0:	223f      	movs	r2, #63	@ 0x3f
 80016c2:	409a      	lsls	r2, r3
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f042 0216 	orr.w	r2, r2, #22
 80016d6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d007      	beq.n	80016f0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f042 0208 	orr.w	r2, r2, #8
 80016ee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f042 0201 	orr.w	r2, r2, #1
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	e005      	b.n	800170e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	2200      	movs	r2, #0
 8001706:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800170a:	2302      	movs	r3, #2
 800170c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800170e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001710:	4618      	mov	r0, r3
 8001712:	3718      	adds	r7, #24
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}

08001718 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001724:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001726:	f7ff fdaf 	bl	8001288 <HAL_GetTick>
 800172a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001732:	b2db      	uxtb	r3, r3
 8001734:	2b02      	cmp	r3, #2
 8001736:	d008      	beq.n	800174a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2280      	movs	r2, #128	@ 0x80
 800173c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2200      	movs	r2, #0
 8001742:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e052      	b.n	80017f0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f022 0216 	bic.w	r2, r2, #22
 8001758:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	695a      	ldr	r2, [r3, #20]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001768:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800176e:	2b00      	cmp	r3, #0
 8001770:	d103      	bne.n	800177a <HAL_DMA_Abort+0x62>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001776:	2b00      	cmp	r3, #0
 8001778:	d007      	beq.n	800178a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f022 0208 	bic.w	r2, r2, #8
 8001788:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f022 0201 	bic.w	r2, r2, #1
 8001798:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800179a:	e013      	b.n	80017c4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800179c:	f7ff fd74 	bl	8001288 <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	2b05      	cmp	r3, #5
 80017a8:	d90c      	bls.n	80017c4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2220      	movs	r2, #32
 80017ae:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2203      	movs	r2, #3
 80017b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2200      	movs	r2, #0
 80017bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80017c0:	2303      	movs	r3, #3
 80017c2:	e015      	b.n	80017f0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d1e4      	bne.n	800179c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017d6:	223f      	movs	r2, #63	@ 0x3f
 80017d8:	409a      	lsls	r2, r3
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2201      	movs	r2, #1
 80017e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2200      	movs	r2, #0
 80017ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80017ee:	2300      	movs	r3, #0
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3710      	adds	r7, #16
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001806:	b2db      	uxtb	r3, r3
 8001808:	2b02      	cmp	r3, #2
 800180a:	d004      	beq.n	8001816 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2280      	movs	r2, #128	@ 0x80
 8001810:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e00c      	b.n	8001830 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2205      	movs	r2, #5
 800181a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f022 0201 	bic.w	r2, r2, #1
 800182c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800182e:	2300      	movs	r3, #0
}
 8001830:	4618      	mov	r0, r3
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b086      	sub	sp, #24
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001844:	2300      	movs	r3, #0
 8001846:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001848:	4b8e      	ldr	r3, [pc, #568]	@ (8001a84 <HAL_DMA_IRQHandler+0x248>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a8e      	ldr	r2, [pc, #568]	@ (8001a88 <HAL_DMA_IRQHandler+0x24c>)
 800184e:	fba2 2303 	umull	r2, r3, r2, r3
 8001852:	0a9b      	lsrs	r3, r3, #10
 8001854:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800185a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001866:	2208      	movs	r2, #8
 8001868:	409a      	lsls	r2, r3
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	4013      	ands	r3, r2
 800186e:	2b00      	cmp	r3, #0
 8001870:	d01a      	beq.n	80018a8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 0304 	and.w	r3, r3, #4
 800187c:	2b00      	cmp	r3, #0
 800187e:	d013      	beq.n	80018a8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f022 0204 	bic.w	r2, r2, #4
 800188e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001894:	2208      	movs	r2, #8
 8001896:	409a      	lsls	r2, r3
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018a0:	f043 0201 	orr.w	r2, r3, #1
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018ac:	2201      	movs	r2, #1
 80018ae:	409a      	lsls	r2, r3
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	4013      	ands	r3, r2
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d012      	beq.n	80018de <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	695b      	ldr	r3, [r3, #20]
 80018be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d00b      	beq.n	80018de <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018ca:	2201      	movs	r2, #1
 80018cc:	409a      	lsls	r2, r3
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018d6:	f043 0202 	orr.w	r2, r3, #2
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018e2:	2204      	movs	r2, #4
 80018e4:	409a      	lsls	r2, r3
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	4013      	ands	r3, r2
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d012      	beq.n	8001914 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 0302 	and.w	r3, r3, #2
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d00b      	beq.n	8001914 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001900:	2204      	movs	r2, #4
 8001902:	409a      	lsls	r2, r3
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800190c:	f043 0204 	orr.w	r2, r3, #4
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001918:	2210      	movs	r2, #16
 800191a:	409a      	lsls	r2, r3
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	4013      	ands	r3, r2
 8001920:	2b00      	cmp	r3, #0
 8001922:	d043      	beq.n	80019ac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0308 	and.w	r3, r3, #8
 800192e:	2b00      	cmp	r3, #0
 8001930:	d03c      	beq.n	80019ac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001936:	2210      	movs	r2, #16
 8001938:	409a      	lsls	r2, r3
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d018      	beq.n	800197e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d108      	bne.n	800196c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800195e:	2b00      	cmp	r3, #0
 8001960:	d024      	beq.n	80019ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	4798      	blx	r3
 800196a:	e01f      	b.n	80019ac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001970:	2b00      	cmp	r3, #0
 8001972:	d01b      	beq.n	80019ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	4798      	blx	r3
 800197c:	e016      	b.n	80019ac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001988:	2b00      	cmp	r3, #0
 800198a:	d107      	bne.n	800199c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f022 0208 	bic.w	r2, r2, #8
 800199a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d003      	beq.n	80019ac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019b0:	2220      	movs	r2, #32
 80019b2:	409a      	lsls	r2, r3
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	4013      	ands	r3, r2
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	f000 808f 	beq.w	8001adc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0310 	and.w	r3, r3, #16
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	f000 8087 	beq.w	8001adc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019d2:	2220      	movs	r2, #32
 80019d4:	409a      	lsls	r2, r3
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	2b05      	cmp	r3, #5
 80019e4:	d136      	bne.n	8001a54 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f022 0216 	bic.w	r2, r2, #22
 80019f4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	695a      	ldr	r2, [r3, #20]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001a04:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d103      	bne.n	8001a16 <HAL_DMA_IRQHandler+0x1da>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d007      	beq.n	8001a26 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f022 0208 	bic.w	r2, r2, #8
 8001a24:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a2a:	223f      	movs	r2, #63	@ 0x3f
 8001a2c:	409a      	lsls	r2, r3
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2201      	movs	r2, #1
 8001a36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d07e      	beq.n	8001b48 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	4798      	blx	r3
        }
        return;
 8001a52:	e079      	b.n	8001b48 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d01d      	beq.n	8001a9e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d10d      	bne.n	8001a8c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d031      	beq.n	8001adc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	4798      	blx	r3
 8001a80:	e02c      	b.n	8001adc <HAL_DMA_IRQHandler+0x2a0>
 8001a82:	bf00      	nop
 8001a84:	20000000 	.word	0x20000000
 8001a88:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d023      	beq.n	8001adc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	4798      	blx	r3
 8001a9c:	e01e      	b.n	8001adc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d10f      	bne.n	8001acc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f022 0210 	bic.w	r2, r2, #16
 8001aba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2201      	movs	r2, #1
 8001ac0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d003      	beq.n	8001adc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d032      	beq.n	8001b4a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ae8:	f003 0301 	and.w	r3, r3, #1
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d022      	beq.n	8001b36 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2205      	movs	r2, #5
 8001af4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f022 0201 	bic.w	r2, r2, #1
 8001b06:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	60bb      	str	r3, [r7, #8]
 8001b0e:	697a      	ldr	r2, [r7, #20]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d307      	bcc.n	8001b24 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d1f2      	bne.n	8001b08 <HAL_DMA_IRQHandler+0x2cc>
 8001b22:	e000      	b.n	8001b26 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001b24:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2201      	movs	r2, #1
 8001b2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2200      	movs	r2, #0
 8001b32:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d005      	beq.n	8001b4a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	4798      	blx	r3
 8001b46:	e000      	b.n	8001b4a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001b48:	bf00      	nop
    }
  }
}
 8001b4a:	3718      	adds	r7, #24
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b085      	sub	sp, #20
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	60f8      	str	r0, [r7, #12]
 8001b70:	60b9      	str	r1, [r7, #8]
 8001b72:	607a      	str	r2, [r7, #4]
 8001b74:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001b84:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	683a      	ldr	r2, [r7, #0]
 8001b8c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	2b40      	cmp	r3, #64	@ 0x40
 8001b94:	d108      	bne.n	8001ba8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	68ba      	ldr	r2, [r7, #8]
 8001ba4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001ba6:	e007      	b.n	8001bb8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	68ba      	ldr	r2, [r7, #8]
 8001bae:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	60da      	str	r2, [r3, #12]
}
 8001bb8:	bf00      	nop
 8001bba:	3714      	adds	r7, #20
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b085      	sub	sp, #20
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	3b10      	subs	r3, #16
 8001bd4:	4a14      	ldr	r2, [pc, #80]	@ (8001c28 <DMA_CalcBaseAndBitshift+0x64>)
 8001bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bda:	091b      	lsrs	r3, r3, #4
 8001bdc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001bde:	4a13      	ldr	r2, [pc, #76]	@ (8001c2c <DMA_CalcBaseAndBitshift+0x68>)
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	4413      	add	r3, r2
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	461a      	mov	r2, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	2b03      	cmp	r3, #3
 8001bf0:	d909      	bls.n	8001c06 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001bfa:	f023 0303 	bic.w	r3, r3, #3
 8001bfe:	1d1a      	adds	r2, r3, #4
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	659a      	str	r2, [r3, #88]	@ 0x58
 8001c04:	e007      	b.n	8001c16 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001c0e:	f023 0303 	bic.w	r3, r3, #3
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3714      	adds	r7, #20
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	aaaaaaab 	.word	0xaaaaaaab
 8001c2c:	08009c5c 	.word	0x08009c5c

08001c30 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b085      	sub	sp, #20
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c40:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	699b      	ldr	r3, [r3, #24]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d11f      	bne.n	8001c8a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	2b03      	cmp	r3, #3
 8001c4e:	d856      	bhi.n	8001cfe <DMA_CheckFifoParam+0xce>
 8001c50:	a201      	add	r2, pc, #4	@ (adr r2, 8001c58 <DMA_CheckFifoParam+0x28>)
 8001c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c56:	bf00      	nop
 8001c58:	08001c69 	.word	0x08001c69
 8001c5c:	08001c7b 	.word	0x08001c7b
 8001c60:	08001c69 	.word	0x08001c69
 8001c64:	08001cff 	.word	0x08001cff
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c6c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d046      	beq.n	8001d02 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c78:	e043      	b.n	8001d02 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c7e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001c82:	d140      	bne.n	8001d06 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c88:	e03d      	b.n	8001d06 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	699b      	ldr	r3, [r3, #24]
 8001c8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001c92:	d121      	bne.n	8001cd8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	2b03      	cmp	r3, #3
 8001c98:	d837      	bhi.n	8001d0a <DMA_CheckFifoParam+0xda>
 8001c9a:	a201      	add	r2, pc, #4	@ (adr r2, 8001ca0 <DMA_CheckFifoParam+0x70>)
 8001c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ca0:	08001cb1 	.word	0x08001cb1
 8001ca4:	08001cb7 	.word	0x08001cb7
 8001ca8:	08001cb1 	.word	0x08001cb1
 8001cac:	08001cc9 	.word	0x08001cc9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	73fb      	strb	r3, [r7, #15]
      break;
 8001cb4:	e030      	b.n	8001d18 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d025      	beq.n	8001d0e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001cc6:	e022      	b.n	8001d0e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ccc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001cd0:	d11f      	bne.n	8001d12 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001cd6:	e01c      	b.n	8001d12 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d903      	bls.n	8001ce6 <DMA_CheckFifoParam+0xb6>
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	2b03      	cmp	r3, #3
 8001ce2:	d003      	beq.n	8001cec <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001ce4:	e018      	b.n	8001d18 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	73fb      	strb	r3, [r7, #15]
      break;
 8001cea:	e015      	b.n	8001d18 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cf0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d00e      	beq.n	8001d16 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	73fb      	strb	r3, [r7, #15]
      break;
 8001cfc:	e00b      	b.n	8001d16 <DMA_CheckFifoParam+0xe6>
      break;
 8001cfe:	bf00      	nop
 8001d00:	e00a      	b.n	8001d18 <DMA_CheckFifoParam+0xe8>
      break;
 8001d02:	bf00      	nop
 8001d04:	e008      	b.n	8001d18 <DMA_CheckFifoParam+0xe8>
      break;
 8001d06:	bf00      	nop
 8001d08:	e006      	b.n	8001d18 <DMA_CheckFifoParam+0xe8>
      break;
 8001d0a:	bf00      	nop
 8001d0c:	e004      	b.n	8001d18 <DMA_CheckFifoParam+0xe8>
      break;
 8001d0e:	bf00      	nop
 8001d10:	e002      	b.n	8001d18 <DMA_CheckFifoParam+0xe8>
      break;   
 8001d12:	bf00      	nop
 8001d14:	e000      	b.n	8001d18 <DMA_CheckFifoParam+0xe8>
      break;
 8001d16:	bf00      	nop
    }
  } 
  
  return status; 
 8001d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3714      	adds	r7, #20
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop

08001d28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b089      	sub	sp, #36	@ 0x24
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d32:	2300      	movs	r3, #0
 8001d34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d36:	2300      	movs	r3, #0
 8001d38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d3e:	2300      	movs	r3, #0
 8001d40:	61fb      	str	r3, [r7, #28]
 8001d42:	e165      	b.n	8002010 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d44:	2201      	movs	r2, #1
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	697a      	ldr	r2, [r7, #20]
 8001d54:	4013      	ands	r3, r2
 8001d56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d58:	693a      	ldr	r2, [r7, #16]
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	f040 8154 	bne.w	800200a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f003 0303 	and.w	r3, r3, #3
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d005      	beq.n	8001d7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d130      	bne.n	8001ddc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	005b      	lsls	r3, r3, #1
 8001d84:	2203      	movs	r2, #3
 8001d86:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8a:	43db      	mvns	r3, r3
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	4013      	ands	r3, r2
 8001d90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	68da      	ldr	r2, [r3, #12]
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001db0:	2201      	movs	r2, #1
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	fa02 f303 	lsl.w	r3, r2, r3
 8001db8:	43db      	mvns	r3, r3
 8001dba:	69ba      	ldr	r2, [r7, #24]
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	091b      	lsrs	r3, r3, #4
 8001dc6:	f003 0201 	and.w	r2, r3, #1
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f003 0303 	and.w	r3, r3, #3
 8001de4:	2b03      	cmp	r3, #3
 8001de6:	d017      	beq.n	8001e18 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	2203      	movs	r2, #3
 8001df4:	fa02 f303 	lsl.w	r3, r2, r3
 8001df8:	43db      	mvns	r3, r3
 8001dfa:	69ba      	ldr	r2, [r7, #24]
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	689a      	ldr	r2, [r3, #8]
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	005b      	lsls	r3, r3, #1
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	69ba      	ldr	r2, [r7, #24]
 8001e16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f003 0303 	and.w	r3, r3, #3
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d123      	bne.n	8001e6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	08da      	lsrs	r2, r3, #3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	3208      	adds	r2, #8
 8001e2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	f003 0307 	and.w	r3, r3, #7
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	220f      	movs	r2, #15
 8001e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e40:	43db      	mvns	r3, r3
 8001e42:	69ba      	ldr	r2, [r7, #24]
 8001e44:	4013      	ands	r3, r2
 8001e46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	691a      	ldr	r2, [r3, #16]
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	f003 0307 	and.w	r3, r3, #7
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	fa02 f303 	lsl.w	r3, r2, r3
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	08da      	lsrs	r2, r3, #3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	3208      	adds	r2, #8
 8001e66:	69b9      	ldr	r1, [r7, #24]
 8001e68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	005b      	lsls	r3, r3, #1
 8001e76:	2203      	movs	r2, #3
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	43db      	mvns	r3, r3
 8001e7e:	69ba      	ldr	r2, [r7, #24]
 8001e80:	4013      	ands	r3, r2
 8001e82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f003 0203 	and.w	r2, r3, #3
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	f000 80ae 	beq.w	800200a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eae:	2300      	movs	r3, #0
 8001eb0:	60fb      	str	r3, [r7, #12]
 8001eb2:	4b5d      	ldr	r3, [pc, #372]	@ (8002028 <HAL_GPIO_Init+0x300>)
 8001eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eb6:	4a5c      	ldr	r2, [pc, #368]	@ (8002028 <HAL_GPIO_Init+0x300>)
 8001eb8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ebc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ebe:	4b5a      	ldr	r3, [pc, #360]	@ (8002028 <HAL_GPIO_Init+0x300>)
 8001ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ec2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ec6:	60fb      	str	r3, [r7, #12]
 8001ec8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001eca:	4a58      	ldr	r2, [pc, #352]	@ (800202c <HAL_GPIO_Init+0x304>)
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	089b      	lsrs	r3, r3, #2
 8001ed0:	3302      	adds	r3, #2
 8001ed2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	f003 0303 	and.w	r3, r3, #3
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	220f      	movs	r2, #15
 8001ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee6:	43db      	mvns	r3, r3
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	4013      	ands	r3, r2
 8001eec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a4f      	ldr	r2, [pc, #316]	@ (8002030 <HAL_GPIO_Init+0x308>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d025      	beq.n	8001f42 <HAL_GPIO_Init+0x21a>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a4e      	ldr	r2, [pc, #312]	@ (8002034 <HAL_GPIO_Init+0x30c>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d01f      	beq.n	8001f3e <HAL_GPIO_Init+0x216>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a4d      	ldr	r2, [pc, #308]	@ (8002038 <HAL_GPIO_Init+0x310>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d019      	beq.n	8001f3a <HAL_GPIO_Init+0x212>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a4c      	ldr	r2, [pc, #304]	@ (800203c <HAL_GPIO_Init+0x314>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d013      	beq.n	8001f36 <HAL_GPIO_Init+0x20e>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a4b      	ldr	r2, [pc, #300]	@ (8002040 <HAL_GPIO_Init+0x318>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d00d      	beq.n	8001f32 <HAL_GPIO_Init+0x20a>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a4a      	ldr	r2, [pc, #296]	@ (8002044 <HAL_GPIO_Init+0x31c>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d007      	beq.n	8001f2e <HAL_GPIO_Init+0x206>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a49      	ldr	r2, [pc, #292]	@ (8002048 <HAL_GPIO_Init+0x320>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d101      	bne.n	8001f2a <HAL_GPIO_Init+0x202>
 8001f26:	2306      	movs	r3, #6
 8001f28:	e00c      	b.n	8001f44 <HAL_GPIO_Init+0x21c>
 8001f2a:	2307      	movs	r3, #7
 8001f2c:	e00a      	b.n	8001f44 <HAL_GPIO_Init+0x21c>
 8001f2e:	2305      	movs	r3, #5
 8001f30:	e008      	b.n	8001f44 <HAL_GPIO_Init+0x21c>
 8001f32:	2304      	movs	r3, #4
 8001f34:	e006      	b.n	8001f44 <HAL_GPIO_Init+0x21c>
 8001f36:	2303      	movs	r3, #3
 8001f38:	e004      	b.n	8001f44 <HAL_GPIO_Init+0x21c>
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	e002      	b.n	8001f44 <HAL_GPIO_Init+0x21c>
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e000      	b.n	8001f44 <HAL_GPIO_Init+0x21c>
 8001f42:	2300      	movs	r3, #0
 8001f44:	69fa      	ldr	r2, [r7, #28]
 8001f46:	f002 0203 	and.w	r2, r2, #3
 8001f4a:	0092      	lsls	r2, r2, #2
 8001f4c:	4093      	lsls	r3, r2
 8001f4e:	69ba      	ldr	r2, [r7, #24]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f54:	4935      	ldr	r1, [pc, #212]	@ (800202c <HAL_GPIO_Init+0x304>)
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	089b      	lsrs	r3, r3, #2
 8001f5a:	3302      	adds	r3, #2
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f62:	4b3a      	ldr	r3, [pc, #232]	@ (800204c <HAL_GPIO_Init+0x324>)
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	43db      	mvns	r3, r3
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	4013      	ands	r3, r2
 8001f70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d003      	beq.n	8001f86 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f86:	4a31      	ldr	r2, [pc, #196]	@ (800204c <HAL_GPIO_Init+0x324>)
 8001f88:	69bb      	ldr	r3, [r7, #24]
 8001f8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f8c:	4b2f      	ldr	r3, [pc, #188]	@ (800204c <HAL_GPIO_Init+0x324>)
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	43db      	mvns	r3, r3
 8001f96:	69ba      	ldr	r2, [r7, #24]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d003      	beq.n	8001fb0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fb0:	4a26      	ldr	r2, [pc, #152]	@ (800204c <HAL_GPIO_Init+0x324>)
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001fb6:	4b25      	ldr	r3, [pc, #148]	@ (800204c <HAL_GPIO_Init+0x324>)
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	43db      	mvns	r3, r3
 8001fc0:	69ba      	ldr	r2, [r7, #24]
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d003      	beq.n	8001fda <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001fd2:	69ba      	ldr	r2, [r7, #24]
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fda:	4a1c      	ldr	r2, [pc, #112]	@ (800204c <HAL_GPIO_Init+0x324>)
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fe0:	4b1a      	ldr	r3, [pc, #104]	@ (800204c <HAL_GPIO_Init+0x324>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	43db      	mvns	r3, r3
 8001fea:	69ba      	ldr	r2, [r7, #24]
 8001fec:	4013      	ands	r3, r2
 8001fee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d003      	beq.n	8002004 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	4313      	orrs	r3, r2
 8002002:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002004:	4a11      	ldr	r2, [pc, #68]	@ (800204c <HAL_GPIO_Init+0x324>)
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	3301      	adds	r3, #1
 800200e:	61fb      	str	r3, [r7, #28]
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	2b0f      	cmp	r3, #15
 8002014:	f67f ae96 	bls.w	8001d44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002018:	bf00      	nop
 800201a:	bf00      	nop
 800201c:	3724      	adds	r7, #36	@ 0x24
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	40023800 	.word	0x40023800
 800202c:	40013800 	.word	0x40013800
 8002030:	40020000 	.word	0x40020000
 8002034:	40020400 	.word	0x40020400
 8002038:	40020800 	.word	0x40020800
 800203c:	40020c00 	.word	0x40020c00
 8002040:	40021000 	.word	0x40021000
 8002044:	40021400 	.word	0x40021400
 8002048:	40021800 	.word	0x40021800
 800204c:	40013c00 	.word	0x40013c00

08002050 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002050:	b480      	push	{r7}
 8002052:	b085      	sub	sp, #20
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	460b      	mov	r3, r1
 800205a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	691a      	ldr	r2, [r3, #16]
 8002060:	887b      	ldrh	r3, [r7, #2]
 8002062:	4013      	ands	r3, r2
 8002064:	2b00      	cmp	r3, #0
 8002066:	d002      	beq.n	800206e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002068:	2301      	movs	r3, #1
 800206a:	73fb      	strb	r3, [r7, #15]
 800206c:	e001      	b.n	8002072 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800206e:	2300      	movs	r3, #0
 8002070:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002072:	7bfb      	ldrb	r3, [r7, #15]
}
 8002074:	4618      	mov	r0, r3
 8002076:	3714      	adds	r7, #20
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d101      	bne.n	8002094 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e0cc      	b.n	800222e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002094:	4b68      	ldr	r3, [pc, #416]	@ (8002238 <HAL_RCC_ClockConfig+0x1b8>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 030f 	and.w	r3, r3, #15
 800209c:	683a      	ldr	r2, [r7, #0]
 800209e:	429a      	cmp	r2, r3
 80020a0:	d90c      	bls.n	80020bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020a2:	4b65      	ldr	r3, [pc, #404]	@ (8002238 <HAL_RCC_ClockConfig+0x1b8>)
 80020a4:	683a      	ldr	r2, [r7, #0]
 80020a6:	b2d2      	uxtb	r2, r2
 80020a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020aa:	4b63      	ldr	r3, [pc, #396]	@ (8002238 <HAL_RCC_ClockConfig+0x1b8>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 030f 	and.w	r3, r3, #15
 80020b2:	683a      	ldr	r2, [r7, #0]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d001      	beq.n	80020bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e0b8      	b.n	800222e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0302 	and.w	r3, r3, #2
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d020      	beq.n	800210a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0304 	and.w	r3, r3, #4
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d005      	beq.n	80020e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020d4:	4b59      	ldr	r3, [pc, #356]	@ (800223c <HAL_RCC_ClockConfig+0x1bc>)
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	4a58      	ldr	r2, [pc, #352]	@ (800223c <HAL_RCC_ClockConfig+0x1bc>)
 80020da:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80020de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0308 	and.w	r3, r3, #8
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d005      	beq.n	80020f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020ec:	4b53      	ldr	r3, [pc, #332]	@ (800223c <HAL_RCC_ClockConfig+0x1bc>)
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	4a52      	ldr	r2, [pc, #328]	@ (800223c <HAL_RCC_ClockConfig+0x1bc>)
 80020f2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80020f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020f8:	4b50      	ldr	r3, [pc, #320]	@ (800223c <HAL_RCC_ClockConfig+0x1bc>)
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	494d      	ldr	r1, [pc, #308]	@ (800223c <HAL_RCC_ClockConfig+0x1bc>)
 8002106:	4313      	orrs	r3, r2
 8002108:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0301 	and.w	r3, r3, #1
 8002112:	2b00      	cmp	r3, #0
 8002114:	d044      	beq.n	80021a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	2b01      	cmp	r3, #1
 800211c:	d107      	bne.n	800212e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800211e:	4b47      	ldr	r3, [pc, #284]	@ (800223c <HAL_RCC_ClockConfig+0x1bc>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d119      	bne.n	800215e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e07f      	b.n	800222e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	2b02      	cmp	r3, #2
 8002134:	d003      	beq.n	800213e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800213a:	2b03      	cmp	r3, #3
 800213c:	d107      	bne.n	800214e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800213e:	4b3f      	ldr	r3, [pc, #252]	@ (800223c <HAL_RCC_ClockConfig+0x1bc>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d109      	bne.n	800215e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e06f      	b.n	800222e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800214e:	4b3b      	ldr	r3, [pc, #236]	@ (800223c <HAL_RCC_ClockConfig+0x1bc>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0302 	and.w	r3, r3, #2
 8002156:	2b00      	cmp	r3, #0
 8002158:	d101      	bne.n	800215e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e067      	b.n	800222e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800215e:	4b37      	ldr	r3, [pc, #220]	@ (800223c <HAL_RCC_ClockConfig+0x1bc>)
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	f023 0203 	bic.w	r2, r3, #3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	4934      	ldr	r1, [pc, #208]	@ (800223c <HAL_RCC_ClockConfig+0x1bc>)
 800216c:	4313      	orrs	r3, r2
 800216e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002170:	f7ff f88a 	bl	8001288 <HAL_GetTick>
 8002174:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002176:	e00a      	b.n	800218e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002178:	f7ff f886 	bl	8001288 <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002186:	4293      	cmp	r3, r2
 8002188:	d901      	bls.n	800218e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e04f      	b.n	800222e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800218e:	4b2b      	ldr	r3, [pc, #172]	@ (800223c <HAL_RCC_ClockConfig+0x1bc>)
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	f003 020c 	and.w	r2, r3, #12
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	429a      	cmp	r2, r3
 800219e:	d1eb      	bne.n	8002178 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021a0:	4b25      	ldr	r3, [pc, #148]	@ (8002238 <HAL_RCC_ClockConfig+0x1b8>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 030f 	and.w	r3, r3, #15
 80021a8:	683a      	ldr	r2, [r7, #0]
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d20c      	bcs.n	80021c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ae:	4b22      	ldr	r3, [pc, #136]	@ (8002238 <HAL_RCC_ClockConfig+0x1b8>)
 80021b0:	683a      	ldr	r2, [r7, #0]
 80021b2:	b2d2      	uxtb	r2, r2
 80021b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021b6:	4b20      	ldr	r3, [pc, #128]	@ (8002238 <HAL_RCC_ClockConfig+0x1b8>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 030f 	and.w	r3, r3, #15
 80021be:	683a      	ldr	r2, [r7, #0]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d001      	beq.n	80021c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e032      	b.n	800222e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0304 	and.w	r3, r3, #4
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d008      	beq.n	80021e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021d4:	4b19      	ldr	r3, [pc, #100]	@ (800223c <HAL_RCC_ClockConfig+0x1bc>)
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	4916      	ldr	r1, [pc, #88]	@ (800223c <HAL_RCC_ClockConfig+0x1bc>)
 80021e2:	4313      	orrs	r3, r2
 80021e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0308 	and.w	r3, r3, #8
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d009      	beq.n	8002206 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021f2:	4b12      	ldr	r3, [pc, #72]	@ (800223c <HAL_RCC_ClockConfig+0x1bc>)
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	691b      	ldr	r3, [r3, #16]
 80021fe:	00db      	lsls	r3, r3, #3
 8002200:	490e      	ldr	r1, [pc, #56]	@ (800223c <HAL_RCC_ClockConfig+0x1bc>)
 8002202:	4313      	orrs	r3, r2
 8002204:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002206:	f000 fb7f 	bl	8002908 <HAL_RCC_GetSysClockFreq>
 800220a:	4602      	mov	r2, r0
 800220c:	4b0b      	ldr	r3, [pc, #44]	@ (800223c <HAL_RCC_ClockConfig+0x1bc>)
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	091b      	lsrs	r3, r3, #4
 8002212:	f003 030f 	and.w	r3, r3, #15
 8002216:	490a      	ldr	r1, [pc, #40]	@ (8002240 <HAL_RCC_ClockConfig+0x1c0>)
 8002218:	5ccb      	ldrb	r3, [r1, r3]
 800221a:	fa22 f303 	lsr.w	r3, r2, r3
 800221e:	4a09      	ldr	r2, [pc, #36]	@ (8002244 <HAL_RCC_ClockConfig+0x1c4>)
 8002220:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002222:	4b09      	ldr	r3, [pc, #36]	@ (8002248 <HAL_RCC_ClockConfig+0x1c8>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4618      	mov	r0, r3
 8002228:	f7fe ffea 	bl	8001200 <HAL_InitTick>

  return HAL_OK;
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3710      	adds	r7, #16
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	40023c00 	.word	0x40023c00
 800223c:	40023800 	.word	0x40023800
 8002240:	08009c44 	.word	0x08009c44
 8002244:	20000000 	.word	0x20000000
 8002248:	20000004 	.word	0x20000004

0800224c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002250:	4b03      	ldr	r3, [pc, #12]	@ (8002260 <HAL_RCC_GetHCLKFreq+0x14>)
 8002252:	681b      	ldr	r3, [r3, #0]
}
 8002254:	4618      	mov	r0, r3
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	20000000 	.word	0x20000000

08002264 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002268:	f7ff fff0 	bl	800224c <HAL_RCC_GetHCLKFreq>
 800226c:	4602      	mov	r2, r0
 800226e:	4b05      	ldr	r3, [pc, #20]	@ (8002284 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	0a9b      	lsrs	r3, r3, #10
 8002274:	f003 0307 	and.w	r3, r3, #7
 8002278:	4903      	ldr	r1, [pc, #12]	@ (8002288 <HAL_RCC_GetPCLK1Freq+0x24>)
 800227a:	5ccb      	ldrb	r3, [r1, r3]
 800227c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002280:	4618      	mov	r0, r3
 8002282:	bd80      	pop	{r7, pc}
 8002284:	40023800 	.word	0x40023800
 8002288:	08009c54 	.word	0x08009c54

0800228c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002290:	f7ff ffdc 	bl	800224c <HAL_RCC_GetHCLKFreq>
 8002294:	4602      	mov	r2, r0
 8002296:	4b05      	ldr	r3, [pc, #20]	@ (80022ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	0b5b      	lsrs	r3, r3, #13
 800229c:	f003 0307 	and.w	r3, r3, #7
 80022a0:	4903      	ldr	r1, [pc, #12]	@ (80022b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022a2:	5ccb      	ldrb	r3, [r1, r3]
 80022a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	40023800 	.word	0x40023800
 80022b0:	08009c54 	.word	0x08009c54

080022b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b08c      	sub	sp, #48	@ 0x30
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022bc:	2300      	movs	r3, #0
 80022be:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 80022c0:	2300      	movs	r3, #0
 80022c2:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80022c4:	2300      	movs	r3, #0
 80022c6:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80022c8:	2300      	movs	r3, #0
 80022ca:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80022cc:	2300      	movs	r3, #0
 80022ce:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80022d0:	2300      	movs	r3, #0
 80022d2:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80022d4:	2300      	movs	r3, #0
 80022d6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80022d8:	2300      	movs	r3, #0
 80022da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 80022dc:	2300      	movs	r3, #0
 80022de:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0301 	and.w	r3, r3, #1
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d010      	beq.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80022ec:	4b6f      	ldr	r3, [pc, #444]	@ (80024ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80022ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80022f2:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022fa:	496c      	ldr	r1, [pc, #432]	@ (80024ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80022fc:	4313      	orrs	r3, r2
 80022fe:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002306:	2b00      	cmp	r3, #0
 8002308:	d101      	bne.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800230a:	2301      	movs	r3, #1
 800230c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0302 	and.w	r3, r3, #2
 8002316:	2b00      	cmp	r3, #0
 8002318:	d010      	beq.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800231a:	4b64      	ldr	r3, [pc, #400]	@ (80024ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800231c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002320:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002328:	4960      	ldr	r1, [pc, #384]	@ (80024ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800232a:	4313      	orrs	r3, r2
 800232c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002334:	2b00      	cmp	r3, #0
 8002336:	d101      	bne.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8002338:	2301      	movs	r3, #1
 800233a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0304 	and.w	r3, r3, #4
 8002344:	2b00      	cmp	r3, #0
 8002346:	d017      	beq.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002348:	4b58      	ldr	r3, [pc, #352]	@ (80024ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800234a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800234e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002356:	4955      	ldr	r1, [pc, #340]	@ (80024ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002358:	4313      	orrs	r3, r2
 800235a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002362:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002366:	d101      	bne.n	800236c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002368:	2301      	movs	r3, #1
 800236a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002370:	2b00      	cmp	r3, #0
 8002372:	d101      	bne.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8002374:	2301      	movs	r3, #1
 8002376:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0308 	and.w	r3, r3, #8
 8002380:	2b00      	cmp	r3, #0
 8002382:	d017      	beq.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002384:	4b49      	ldr	r3, [pc, #292]	@ (80024ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002386:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800238a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002392:	4946      	ldr	r1, [pc, #280]	@ (80024ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002394:	4313      	orrs	r3, r2
 8002396:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800239e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80023a2:	d101      	bne.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80023a4:	2301      	movs	r3, #1
 80023a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d101      	bne.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80023b0:	2301      	movs	r3, #1
 80023b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0320 	and.w	r3, r3, #32
 80023bc:	2b00      	cmp	r3, #0
 80023be:	f000 808a 	beq.w	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80023c2:	2300      	movs	r3, #0
 80023c4:	60bb      	str	r3, [r7, #8]
 80023c6:	4b39      	ldr	r3, [pc, #228]	@ (80024ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80023c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ca:	4a38      	ldr	r2, [pc, #224]	@ (80024ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80023cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80023d2:	4b36      	ldr	r3, [pc, #216]	@ (80024ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80023d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023da:	60bb      	str	r3, [r7, #8]
 80023dc:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80023de:	4b34      	ldr	r3, [pc, #208]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a33      	ldr	r2, [pc, #204]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80023e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023e8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80023ea:	f7fe ff4d 	bl	8001288 <HAL_GetTick>
 80023ee:	6278      	str	r0, [r7, #36]	@ 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80023f0:	e008      	b.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80023f2:	f7fe ff49 	bl	8001288 <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	d901      	bls.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	e278      	b.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002404:	4b2a      	ldr	r3, [pc, #168]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800240c:	2b00      	cmp	r3, #0
 800240e:	d0f0      	beq.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002410:	4b26      	ldr	r3, [pc, #152]	@ (80024ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002412:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002414:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002418:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800241a:	6a3b      	ldr	r3, [r7, #32]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d02f      	beq.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002424:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002428:	6a3a      	ldr	r2, [r7, #32]
 800242a:	429a      	cmp	r2, r3
 800242c:	d028      	beq.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800242e:	4b1f      	ldr	r3, [pc, #124]	@ (80024ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002430:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002432:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002436:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002438:	4b1e      	ldr	r3, [pc, #120]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800243a:	2201      	movs	r2, #1
 800243c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800243e:	4b1d      	ldr	r3, [pc, #116]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002440:	2200      	movs	r2, #0
 8002442:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002444:	4a19      	ldr	r2, [pc, #100]	@ (80024ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002446:	6a3b      	ldr	r3, [r7, #32]
 8002448:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800244a:	4b18      	ldr	r3, [pc, #96]	@ (80024ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800244c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800244e:	f003 0301 	and.w	r3, r3, #1
 8002452:	2b01      	cmp	r3, #1
 8002454:	d114      	bne.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002456:	f7fe ff17 	bl	8001288 <HAL_GetTick>
 800245a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800245c:	e00a      	b.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800245e:	f7fe ff13 	bl	8001288 <HAL_GetTick>
 8002462:	4602      	mov	r2, r0
 8002464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	f241 3288 	movw	r2, #5000	@ 0x1388
 800246c:	4293      	cmp	r3, r2
 800246e:	d901      	bls.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8002470:	2303      	movs	r3, #3
 8002472:	e240      	b.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002474:	4b0d      	ldr	r3, [pc, #52]	@ (80024ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002476:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002478:	f003 0302 	and.w	r3, r3, #2
 800247c:	2b00      	cmp	r3, #0
 800247e:	d0ee      	beq.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002484:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002488:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800248c:	d114      	bne.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800248e:	4b07      	ldr	r3, [pc, #28]	@ (80024ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800249a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800249e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80024a2:	4902      	ldr	r1, [pc, #8]	@ (80024ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80024a4:	4313      	orrs	r3, r2
 80024a6:	608b      	str	r3, [r1, #8]
 80024a8:	e00c      	b.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80024aa:	bf00      	nop
 80024ac:	40023800 	.word	0x40023800
 80024b0:	40007000 	.word	0x40007000
 80024b4:	42470e40 	.word	0x42470e40
 80024b8:	4b4a      	ldr	r3, [pc, #296]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	4a49      	ldr	r2, [pc, #292]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80024be:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80024c2:	6093      	str	r3, [r2, #8]
 80024c4:	4b47      	ldr	r3, [pc, #284]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80024c6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024d0:	4944      	ldr	r1, [pc, #272]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80024d2:	4313      	orrs	r3, r2
 80024d4:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0310 	and.w	r3, r3, #16
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d004      	beq.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80024e8:	4b3f      	ldr	r3, [pc, #252]	@ (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80024ea:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d00a      	beq.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80024f8:	4b3a      	ldr	r3, [pc, #232]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80024fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024fe:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002506:	4937      	ldr	r1, [pc, #220]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002508:	4313      	orrs	r3, r2
 800250a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002516:	2b00      	cmp	r3, #0
 8002518:	d00a      	beq.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800251a:	4b32      	ldr	r3, [pc, #200]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800251c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002520:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002528:	492e      	ldr	r1, [pc, #184]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800252a:	4313      	orrs	r3, r2
 800252c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002538:	2b00      	cmp	r3, #0
 800253a:	d011      	beq.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800253c:	4b29      	ldr	r3, [pc, #164]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800253e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002542:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800254a:	4926      	ldr	r1, [pc, #152]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800254c:	4313      	orrs	r3, r2
 800254e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002556:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800255a:	d101      	bne.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 800255c:	2301      	movs	r3, #1
 800255e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002568:	2b00      	cmp	r3, #0
 800256a:	d00a      	beq.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800256c:	4b1d      	ldr	r3, [pc, #116]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800256e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002572:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800257a:	491a      	ldr	r1, [pc, #104]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800257c:	4313      	orrs	r3, r2
 800257e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800258a:	2b00      	cmp	r3, #0
 800258c:	d011      	beq.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800258e:	4b15      	ldr	r3, [pc, #84]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002590:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002594:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800259c:	4911      	ldr	r1, [pc, #68]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80025ac:	d101      	bne.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80025ae:	2301      	movs	r3, #1
 80025b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80025b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d005      	beq.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80025c0:	f040 80ff 	bne.w	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80025c4:	4b09      	ldr	r3, [pc, #36]	@ (80025ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80025ca:	f7fe fe5d 	bl	8001288 <HAL_GetTick>
 80025ce:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80025d0:	e00e      	b.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80025d2:	f7fe fe59 	bl	8001288 <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d907      	bls.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	e188      	b.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80025e4:	40023800 	.word	0x40023800
 80025e8:	424711e0 	.word	0x424711e0
 80025ec:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80025f0:	4b7e      	ldr	r3, [pc, #504]	@ (80027ec <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d1ea      	bne.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0301 	and.w	r3, r3, #1
 8002604:	2b00      	cmp	r3, #0
 8002606:	d003      	beq.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800260c:	2b00      	cmp	r3, #0
 800260e:	d009      	beq.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002618:	2b00      	cmp	r3, #0
 800261a:	d028      	beq.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002620:	2b00      	cmp	r3, #0
 8002622:	d124      	bne.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002624:	4b71      	ldr	r3, [pc, #452]	@ (80027ec <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002626:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800262a:	0c1b      	lsrs	r3, r3, #16
 800262c:	f003 0303 	and.w	r3, r3, #3
 8002630:	3301      	adds	r3, #1
 8002632:	005b      	lsls	r3, r3, #1
 8002634:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002636:	4b6d      	ldr	r3, [pc, #436]	@ (80027ec <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002638:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800263c:	0e1b      	lsrs	r3, r3, #24
 800263e:	f003 030f 	and.w	r3, r3, #15
 8002642:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	685a      	ldr	r2, [r3, #4]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	019b      	lsls	r3, r3, #6
 800264e:	431a      	orrs	r2, r3
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	085b      	lsrs	r3, r3, #1
 8002654:	3b01      	subs	r3, #1
 8002656:	041b      	lsls	r3, r3, #16
 8002658:	431a      	orrs	r2, r3
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	061b      	lsls	r3, r3, #24
 800265e:	431a      	orrs	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	695b      	ldr	r3, [r3, #20]
 8002664:	071b      	lsls	r3, r3, #28
 8002666:	4961      	ldr	r1, [pc, #388]	@ (80027ec <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002668:	4313      	orrs	r3, r2
 800266a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0304 	and.w	r3, r3, #4
 8002676:	2b00      	cmp	r3, #0
 8002678:	d004      	beq.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800267e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002682:	d00a      	beq.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800268c:	2b00      	cmp	r3, #0
 800268e:	d035      	beq.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002694:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002698:	d130      	bne.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800269a:	4b54      	ldr	r3, [pc, #336]	@ (80027ec <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800269c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80026a0:	0c1b      	lsrs	r3, r3, #16
 80026a2:	f003 0303 	and.w	r3, r3, #3
 80026a6:	3301      	adds	r3, #1
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80026ac:	4b4f      	ldr	r3, [pc, #316]	@ (80027ec <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80026ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80026b2:	0f1b      	lsrs	r3, r3, #28
 80026b4:	f003 0307 	and.w	r3, r3, #7
 80026b8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685a      	ldr	r2, [r3, #4]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	019b      	lsls	r3, r3, #6
 80026c4:	431a      	orrs	r2, r3
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	085b      	lsrs	r3, r3, #1
 80026ca:	3b01      	subs	r3, #1
 80026cc:	041b      	lsls	r3, r3, #16
 80026ce:	431a      	orrs	r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	691b      	ldr	r3, [r3, #16]
 80026d4:	061b      	lsls	r3, r3, #24
 80026d6:	431a      	orrs	r2, r3
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	071b      	lsls	r3, r3, #28
 80026dc:	4943      	ldr	r1, [pc, #268]	@ (80027ec <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80026e4:	4b41      	ldr	r3, [pc, #260]	@ (80027ec <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80026e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80026ea:	f023 021f 	bic.w	r2, r3, #31
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026f2:	3b01      	subs	r3, #1
 80026f4:	493d      	ldr	r1, [pc, #244]	@ (80027ec <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80026f6:	4313      	orrs	r3, r2
 80026f8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002704:	2b00      	cmp	r3, #0
 8002706:	d029      	beq.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800270c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002710:	d124      	bne.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002712:	4b36      	ldr	r3, [pc, #216]	@ (80027ec <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002714:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002718:	0c1b      	lsrs	r3, r3, #16
 800271a:	f003 0303 	and.w	r3, r3, #3
 800271e:	3301      	adds	r3, #1
 8002720:	005b      	lsls	r3, r3, #1
 8002722:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002724:	4b31      	ldr	r3, [pc, #196]	@ (80027ec <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002726:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800272a:	0f1b      	lsrs	r3, r3, #28
 800272c:	f003 0307 	and.w	r3, r3, #7
 8002730:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685a      	ldr	r2, [r3, #4]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	019b      	lsls	r3, r3, #6
 800273c:	431a      	orrs	r2, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	085b      	lsrs	r3, r3, #1
 8002744:	3b01      	subs	r3, #1
 8002746:	041b      	lsls	r3, r3, #16
 8002748:	431a      	orrs	r2, r3
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	061b      	lsls	r3, r3, #24
 800274e:	431a      	orrs	r2, r3
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	071b      	lsls	r3, r3, #28
 8002754:	4925      	ldr	r1, [pc, #148]	@ (80027ec <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002756:	4313      	orrs	r3, r2
 8002758:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002764:	2b00      	cmp	r3, #0
 8002766:	d016      	beq.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	685a      	ldr	r2, [r3, #4]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	019b      	lsls	r3, r3, #6
 8002772:	431a      	orrs	r2, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	085b      	lsrs	r3, r3, #1
 800277a:	3b01      	subs	r3, #1
 800277c:	041b      	lsls	r3, r3, #16
 800277e:	431a      	orrs	r2, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	691b      	ldr	r3, [r3, #16]
 8002784:	061b      	lsls	r3, r3, #24
 8002786:	431a      	orrs	r2, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	695b      	ldr	r3, [r3, #20]
 800278c:	071b      	lsls	r3, r3, #28
 800278e:	4917      	ldr	r1, [pc, #92]	@ (80027ec <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002790:	4313      	orrs	r3, r2
 8002792:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002796:	4b16      	ldr	r3, [pc, #88]	@ (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002798:	2201      	movs	r2, #1
 800279a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800279c:	f7fe fd74 	bl	8001288 <HAL_GetTick>
 80027a0:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80027a2:	e008      	b.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80027a4:	f7fe fd70 	bl	8001288 <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d901      	bls.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e09f      	b.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80027b6:	4b0d      	ldr	r3, [pc, #52]	@ (80027ec <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d0f0      	beq.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80027c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	f040 8095 	bne.w	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80027ca:	4b0a      	ldr	r3, [pc, #40]	@ (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80027d0:	f7fe fd5a 	bl	8001288 <HAL_GetTick>
 80027d4:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80027d6:	e00f      	b.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80027d8:	f7fe fd56 	bl	8001288 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d908      	bls.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e085      	b.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80027ea:	bf00      	nop
 80027ec:	40023800 	.word	0x40023800
 80027f0:	42470068 	.word	0x42470068
 80027f4:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80027f8:	4b41      	ldr	r3, [pc, #260]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002800:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002804:	d0e8      	beq.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0304 	and.w	r3, r3, #4
 800280e:	2b00      	cmp	r3, #0
 8002810:	d003      	beq.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x566>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002816:	2b00      	cmp	r3, #0
 8002818:	d009      	beq.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002822:	2b00      	cmp	r3, #0
 8002824:	d02b      	beq.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800282a:	2b00      	cmp	r3, #0
 800282c:	d127      	bne.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800282e:	4b34      	ldr	r3, [pc, #208]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002830:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002834:	0c1b      	lsrs	r3, r3, #16
 8002836:	f003 0303 	and.w	r3, r3, #3
 800283a:	3301      	adds	r3, #1
 800283c:	005b      	lsls	r3, r3, #1
 800283e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	699a      	ldr	r2, [r3, #24]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	69db      	ldr	r3, [r3, #28]
 8002848:	019b      	lsls	r3, r3, #6
 800284a:	431a      	orrs	r2, r3
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	085b      	lsrs	r3, r3, #1
 8002850:	3b01      	subs	r3, #1
 8002852:	041b      	lsls	r3, r3, #16
 8002854:	431a      	orrs	r2, r3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800285a:	061b      	lsls	r3, r3, #24
 800285c:	4928      	ldr	r1, [pc, #160]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800285e:	4313      	orrs	r3, r2
 8002860:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002864:	4b26      	ldr	r3, [pc, #152]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002866:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800286a:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002872:	3b01      	subs	r3, #1
 8002874:	021b      	lsls	r3, r3, #8
 8002876:	4922      	ldr	r1, [pc, #136]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002878:	4313      	orrs	r3, r2
 800287a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002886:	2b00      	cmp	r3, #0
 8002888:	d01d      	beq.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x612>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800288e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002892:	d118      	bne.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002894:	4b1a      	ldr	r3, [pc, #104]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002896:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800289a:	0e1b      	lsrs	r3, r3, #24
 800289c:	f003 030f 	and.w	r3, r3, #15
 80028a0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	699a      	ldr	r2, [r3, #24]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	69db      	ldr	r3, [r3, #28]
 80028aa:	019b      	lsls	r3, r3, #6
 80028ac:	431a      	orrs	r2, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6a1b      	ldr	r3, [r3, #32]
 80028b2:	085b      	lsrs	r3, r3, #1
 80028b4:	3b01      	subs	r3, #1
 80028b6:	041b      	lsls	r3, r3, #16
 80028b8:	431a      	orrs	r2, r3
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	061b      	lsls	r3, r3, #24
 80028be:	4910      	ldr	r1, [pc, #64]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80028c0:	4313      	orrs	r3, r2
 80028c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80028c6:	4b0f      	ldr	r3, [pc, #60]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80028c8:	2201      	movs	r2, #1
 80028ca:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80028cc:	f7fe fcdc 	bl	8001288 <HAL_GetTick>
 80028d0:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80028d2:	e008      	b.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80028d4:	f7fe fcd8 	bl	8001288 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d901      	bls.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e007      	b.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80028e6:	4b06      	ldr	r3, [pc, #24]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80028ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80028f2:	d1ef      	bne.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3730      	adds	r7, #48	@ 0x30
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	40023800 	.word	0x40023800
 8002904:	42470070 	.word	0x42470070

08002908 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002908:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800290c:	b0ae      	sub	sp, #184	@ 0xb8
 800290e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002910:	2300      	movs	r3, #0
 8002912:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002916:	2300      	movs	r3, #0
 8002918:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800291c:	2300      	movs	r3, #0
 800291e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002922:	2300      	movs	r3, #0
 8002924:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002928:	2300      	movs	r3, #0
 800292a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800292e:	4bcb      	ldr	r3, [pc, #812]	@ (8002c5c <HAL_RCC_GetSysClockFreq+0x354>)
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f003 030c 	and.w	r3, r3, #12
 8002936:	2b0c      	cmp	r3, #12
 8002938:	f200 8206 	bhi.w	8002d48 <HAL_RCC_GetSysClockFreq+0x440>
 800293c:	a201      	add	r2, pc, #4	@ (adr r2, 8002944 <HAL_RCC_GetSysClockFreq+0x3c>)
 800293e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002942:	bf00      	nop
 8002944:	08002979 	.word	0x08002979
 8002948:	08002d49 	.word	0x08002d49
 800294c:	08002d49 	.word	0x08002d49
 8002950:	08002d49 	.word	0x08002d49
 8002954:	08002981 	.word	0x08002981
 8002958:	08002d49 	.word	0x08002d49
 800295c:	08002d49 	.word	0x08002d49
 8002960:	08002d49 	.word	0x08002d49
 8002964:	08002989 	.word	0x08002989
 8002968:	08002d49 	.word	0x08002d49
 800296c:	08002d49 	.word	0x08002d49
 8002970:	08002d49 	.word	0x08002d49
 8002974:	08002b79 	.word	0x08002b79
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002978:	4bb9      	ldr	r3, [pc, #740]	@ (8002c60 <HAL_RCC_GetSysClockFreq+0x358>)
 800297a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 800297e:	e1e7      	b.n	8002d50 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002980:	4bb8      	ldr	r3, [pc, #736]	@ (8002c64 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002982:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002986:	e1e3      	b.n	8002d50 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002988:	4bb4      	ldr	r3, [pc, #720]	@ (8002c5c <HAL_RCC_GetSysClockFreq+0x354>)
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002990:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002994:	4bb1      	ldr	r3, [pc, #708]	@ (8002c5c <HAL_RCC_GetSysClockFreq+0x354>)
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d071      	beq.n	8002a84 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029a0:	4bae      	ldr	r3, [pc, #696]	@ (8002c5c <HAL_RCC_GetSysClockFreq+0x354>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	099b      	lsrs	r3, r3, #6
 80029a6:	2200      	movs	r2, #0
 80029a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80029ac:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80029b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80029b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029b8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80029bc:	2300      	movs	r3, #0
 80029be:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80029c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80029c6:	4622      	mov	r2, r4
 80029c8:	462b      	mov	r3, r5
 80029ca:	f04f 0000 	mov.w	r0, #0
 80029ce:	f04f 0100 	mov.w	r1, #0
 80029d2:	0159      	lsls	r1, r3, #5
 80029d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029d8:	0150      	lsls	r0, r2, #5
 80029da:	4602      	mov	r2, r0
 80029dc:	460b      	mov	r3, r1
 80029de:	4621      	mov	r1, r4
 80029e0:	1a51      	subs	r1, r2, r1
 80029e2:	6439      	str	r1, [r7, #64]	@ 0x40
 80029e4:	4629      	mov	r1, r5
 80029e6:	eb63 0301 	sbc.w	r3, r3, r1
 80029ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80029ec:	f04f 0200 	mov.w	r2, #0
 80029f0:	f04f 0300 	mov.w	r3, #0
 80029f4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80029f8:	4649      	mov	r1, r9
 80029fa:	018b      	lsls	r3, r1, #6
 80029fc:	4641      	mov	r1, r8
 80029fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a02:	4641      	mov	r1, r8
 8002a04:	018a      	lsls	r2, r1, #6
 8002a06:	4641      	mov	r1, r8
 8002a08:	1a51      	subs	r1, r2, r1
 8002a0a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002a0c:	4649      	mov	r1, r9
 8002a0e:	eb63 0301 	sbc.w	r3, r3, r1
 8002a12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a14:	f04f 0200 	mov.w	r2, #0
 8002a18:	f04f 0300 	mov.w	r3, #0
 8002a1c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002a20:	4649      	mov	r1, r9
 8002a22:	00cb      	lsls	r3, r1, #3
 8002a24:	4641      	mov	r1, r8
 8002a26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a2a:	4641      	mov	r1, r8
 8002a2c:	00ca      	lsls	r2, r1, #3
 8002a2e:	4610      	mov	r0, r2
 8002a30:	4619      	mov	r1, r3
 8002a32:	4603      	mov	r3, r0
 8002a34:	4622      	mov	r2, r4
 8002a36:	189b      	adds	r3, r3, r2
 8002a38:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a3a:	462b      	mov	r3, r5
 8002a3c:	460a      	mov	r2, r1
 8002a3e:	eb42 0303 	adc.w	r3, r2, r3
 8002a42:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a44:	f04f 0200 	mov.w	r2, #0
 8002a48:	f04f 0300 	mov.w	r3, #0
 8002a4c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002a50:	4629      	mov	r1, r5
 8002a52:	024b      	lsls	r3, r1, #9
 8002a54:	4621      	mov	r1, r4
 8002a56:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002a5a:	4621      	mov	r1, r4
 8002a5c:	024a      	lsls	r2, r1, #9
 8002a5e:	4610      	mov	r0, r2
 8002a60:	4619      	mov	r1, r3
 8002a62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002a66:	2200      	movs	r2, #0
 8002a68:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002a6c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002a70:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002a74:	f7fd fc34 	bl	80002e0 <__aeabi_uldivmod>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002a82:	e067      	b.n	8002b54 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a84:	4b75      	ldr	r3, [pc, #468]	@ (8002c5c <HAL_RCC_GetSysClockFreq+0x354>)
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	099b      	lsrs	r3, r3, #6
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002a90:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002a94:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002a98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a9c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002aa2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002aa6:	4622      	mov	r2, r4
 8002aa8:	462b      	mov	r3, r5
 8002aaa:	f04f 0000 	mov.w	r0, #0
 8002aae:	f04f 0100 	mov.w	r1, #0
 8002ab2:	0159      	lsls	r1, r3, #5
 8002ab4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ab8:	0150      	lsls	r0, r2, #5
 8002aba:	4602      	mov	r2, r0
 8002abc:	460b      	mov	r3, r1
 8002abe:	4621      	mov	r1, r4
 8002ac0:	1a51      	subs	r1, r2, r1
 8002ac2:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002ac4:	4629      	mov	r1, r5
 8002ac6:	eb63 0301 	sbc.w	r3, r3, r1
 8002aca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002acc:	f04f 0200 	mov.w	r2, #0
 8002ad0:	f04f 0300 	mov.w	r3, #0
 8002ad4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002ad8:	4649      	mov	r1, r9
 8002ada:	018b      	lsls	r3, r1, #6
 8002adc:	4641      	mov	r1, r8
 8002ade:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ae2:	4641      	mov	r1, r8
 8002ae4:	018a      	lsls	r2, r1, #6
 8002ae6:	4641      	mov	r1, r8
 8002ae8:	ebb2 0a01 	subs.w	sl, r2, r1
 8002aec:	4649      	mov	r1, r9
 8002aee:	eb63 0b01 	sbc.w	fp, r3, r1
 8002af2:	f04f 0200 	mov.w	r2, #0
 8002af6:	f04f 0300 	mov.w	r3, #0
 8002afa:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002afe:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002b02:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b06:	4692      	mov	sl, r2
 8002b08:	469b      	mov	fp, r3
 8002b0a:	4623      	mov	r3, r4
 8002b0c:	eb1a 0303 	adds.w	r3, sl, r3
 8002b10:	623b      	str	r3, [r7, #32]
 8002b12:	462b      	mov	r3, r5
 8002b14:	eb4b 0303 	adc.w	r3, fp, r3
 8002b18:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b1a:	f04f 0200 	mov.w	r2, #0
 8002b1e:	f04f 0300 	mov.w	r3, #0
 8002b22:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002b26:	4629      	mov	r1, r5
 8002b28:	028b      	lsls	r3, r1, #10
 8002b2a:	4621      	mov	r1, r4
 8002b2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b30:	4621      	mov	r1, r4
 8002b32:	028a      	lsls	r2, r1, #10
 8002b34:	4610      	mov	r0, r2
 8002b36:	4619      	mov	r1, r3
 8002b38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	673b      	str	r3, [r7, #112]	@ 0x70
 8002b40:	677a      	str	r2, [r7, #116]	@ 0x74
 8002b42:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002b46:	f7fd fbcb 	bl	80002e0 <__aeabi_uldivmod>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	460b      	mov	r3, r1
 8002b4e:	4613      	mov	r3, r2
 8002b50:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b54:	4b41      	ldr	r3, [pc, #260]	@ (8002c5c <HAL_RCC_GetSysClockFreq+0x354>)
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	0c1b      	lsrs	r3, r3, #16
 8002b5a:	f003 0303 	and.w	r3, r3, #3
 8002b5e:	3301      	adds	r3, #1
 8002b60:	005b      	lsls	r3, r3, #1
 8002b62:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8002b66:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002b6a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b72:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002b76:	e0eb      	b.n	8002d50 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b78:	4b38      	ldr	r3, [pc, #224]	@ (8002c5c <HAL_RCC_GetSysClockFreq+0x354>)
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b80:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b84:	4b35      	ldr	r3, [pc, #212]	@ (8002c5c <HAL_RCC_GetSysClockFreq+0x354>)
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d06b      	beq.n	8002c68 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b90:	4b32      	ldr	r3, [pc, #200]	@ (8002c5c <HAL_RCC_GetSysClockFreq+0x354>)
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	099b      	lsrs	r3, r3, #6
 8002b96:	2200      	movs	r2, #0
 8002b98:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002b9a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002b9c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002b9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ba2:	663b      	str	r3, [r7, #96]	@ 0x60
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	667b      	str	r3, [r7, #100]	@ 0x64
 8002ba8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002bac:	4622      	mov	r2, r4
 8002bae:	462b      	mov	r3, r5
 8002bb0:	f04f 0000 	mov.w	r0, #0
 8002bb4:	f04f 0100 	mov.w	r1, #0
 8002bb8:	0159      	lsls	r1, r3, #5
 8002bba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bbe:	0150      	lsls	r0, r2, #5
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	4621      	mov	r1, r4
 8002bc6:	1a51      	subs	r1, r2, r1
 8002bc8:	61b9      	str	r1, [r7, #24]
 8002bca:	4629      	mov	r1, r5
 8002bcc:	eb63 0301 	sbc.w	r3, r3, r1
 8002bd0:	61fb      	str	r3, [r7, #28]
 8002bd2:	f04f 0200 	mov.w	r2, #0
 8002bd6:	f04f 0300 	mov.w	r3, #0
 8002bda:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002bde:	4659      	mov	r1, fp
 8002be0:	018b      	lsls	r3, r1, #6
 8002be2:	4651      	mov	r1, sl
 8002be4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002be8:	4651      	mov	r1, sl
 8002bea:	018a      	lsls	r2, r1, #6
 8002bec:	4651      	mov	r1, sl
 8002bee:	ebb2 0801 	subs.w	r8, r2, r1
 8002bf2:	4659      	mov	r1, fp
 8002bf4:	eb63 0901 	sbc.w	r9, r3, r1
 8002bf8:	f04f 0200 	mov.w	r2, #0
 8002bfc:	f04f 0300 	mov.w	r3, #0
 8002c00:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c04:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c08:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c0c:	4690      	mov	r8, r2
 8002c0e:	4699      	mov	r9, r3
 8002c10:	4623      	mov	r3, r4
 8002c12:	eb18 0303 	adds.w	r3, r8, r3
 8002c16:	613b      	str	r3, [r7, #16]
 8002c18:	462b      	mov	r3, r5
 8002c1a:	eb49 0303 	adc.w	r3, r9, r3
 8002c1e:	617b      	str	r3, [r7, #20]
 8002c20:	f04f 0200 	mov.w	r2, #0
 8002c24:	f04f 0300 	mov.w	r3, #0
 8002c28:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002c2c:	4629      	mov	r1, r5
 8002c2e:	024b      	lsls	r3, r1, #9
 8002c30:	4621      	mov	r1, r4
 8002c32:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c36:	4621      	mov	r1, r4
 8002c38:	024a      	lsls	r2, r1, #9
 8002c3a:	4610      	mov	r0, r2
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002c42:	2200      	movs	r2, #0
 8002c44:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002c46:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002c48:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002c4c:	f7fd fb48 	bl	80002e0 <__aeabi_uldivmod>
 8002c50:	4602      	mov	r2, r0
 8002c52:	460b      	mov	r3, r1
 8002c54:	4613      	mov	r3, r2
 8002c56:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002c5a:	e065      	b.n	8002d28 <HAL_RCC_GetSysClockFreq+0x420>
 8002c5c:	40023800 	.word	0x40023800
 8002c60:	00f42400 	.word	0x00f42400
 8002c64:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c68:	4b3d      	ldr	r3, [pc, #244]	@ (8002d60 <HAL_RCC_GetSysClockFreq+0x458>)
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	099b      	lsrs	r3, r3, #6
 8002c6e:	2200      	movs	r2, #0
 8002c70:	4618      	mov	r0, r3
 8002c72:	4611      	mov	r1, r2
 8002c74:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c78:	653b      	str	r3, [r7, #80]	@ 0x50
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	657b      	str	r3, [r7, #84]	@ 0x54
 8002c7e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002c82:	4642      	mov	r2, r8
 8002c84:	464b      	mov	r3, r9
 8002c86:	f04f 0000 	mov.w	r0, #0
 8002c8a:	f04f 0100 	mov.w	r1, #0
 8002c8e:	0159      	lsls	r1, r3, #5
 8002c90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c94:	0150      	lsls	r0, r2, #5
 8002c96:	4602      	mov	r2, r0
 8002c98:	460b      	mov	r3, r1
 8002c9a:	4641      	mov	r1, r8
 8002c9c:	1a51      	subs	r1, r2, r1
 8002c9e:	60b9      	str	r1, [r7, #8]
 8002ca0:	4649      	mov	r1, r9
 8002ca2:	eb63 0301 	sbc.w	r3, r3, r1
 8002ca6:	60fb      	str	r3, [r7, #12]
 8002ca8:	f04f 0200 	mov.w	r2, #0
 8002cac:	f04f 0300 	mov.w	r3, #0
 8002cb0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002cb4:	4659      	mov	r1, fp
 8002cb6:	018b      	lsls	r3, r1, #6
 8002cb8:	4651      	mov	r1, sl
 8002cba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002cbe:	4651      	mov	r1, sl
 8002cc0:	018a      	lsls	r2, r1, #6
 8002cc2:	4651      	mov	r1, sl
 8002cc4:	1a54      	subs	r4, r2, r1
 8002cc6:	4659      	mov	r1, fp
 8002cc8:	eb63 0501 	sbc.w	r5, r3, r1
 8002ccc:	f04f 0200 	mov.w	r2, #0
 8002cd0:	f04f 0300 	mov.w	r3, #0
 8002cd4:	00eb      	lsls	r3, r5, #3
 8002cd6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002cda:	00e2      	lsls	r2, r4, #3
 8002cdc:	4614      	mov	r4, r2
 8002cde:	461d      	mov	r5, r3
 8002ce0:	4643      	mov	r3, r8
 8002ce2:	18e3      	adds	r3, r4, r3
 8002ce4:	603b      	str	r3, [r7, #0]
 8002ce6:	464b      	mov	r3, r9
 8002ce8:	eb45 0303 	adc.w	r3, r5, r3
 8002cec:	607b      	str	r3, [r7, #4]
 8002cee:	f04f 0200 	mov.w	r2, #0
 8002cf2:	f04f 0300 	mov.w	r3, #0
 8002cf6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002cfa:	4629      	mov	r1, r5
 8002cfc:	028b      	lsls	r3, r1, #10
 8002cfe:	4621      	mov	r1, r4
 8002d00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d04:	4621      	mov	r1, r4
 8002d06:	028a      	lsls	r2, r1, #10
 8002d08:	4610      	mov	r0, r2
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002d10:	2200      	movs	r2, #0
 8002d12:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002d14:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002d16:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002d1a:	f7fd fae1 	bl	80002e0 <__aeabi_uldivmod>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	460b      	mov	r3, r1
 8002d22:	4613      	mov	r3, r2
 8002d24:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002d28:	4b0d      	ldr	r3, [pc, #52]	@ (8002d60 <HAL_RCC_GetSysClockFreq+0x458>)
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	0f1b      	lsrs	r3, r3, #28
 8002d2e:	f003 0307 	and.w	r3, r3, #7
 8002d32:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8002d36:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002d3a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d42:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002d46:	e003      	b.n	8002d50 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d48:	4b06      	ldr	r3, [pc, #24]	@ (8002d64 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002d4a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002d4e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d50:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	37b8      	adds	r7, #184	@ 0xb8
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d5e:	bf00      	nop
 8002d60:	40023800 	.word	0x40023800
 8002d64:	00f42400 	.word	0x00f42400

08002d68 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b086      	sub	sp, #24
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d101      	bne.n	8002d7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e28d      	b.n	8003296 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0301 	and.w	r3, r3, #1
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	f000 8083 	beq.w	8002e8e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002d88:	4b94      	ldr	r3, [pc, #592]	@ (8002fdc <HAL_RCC_OscConfig+0x274>)
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	f003 030c 	and.w	r3, r3, #12
 8002d90:	2b04      	cmp	r3, #4
 8002d92:	d019      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002d94:	4b91      	ldr	r3, [pc, #580]	@ (8002fdc <HAL_RCC_OscConfig+0x274>)
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002d9c:	2b08      	cmp	r3, #8
 8002d9e:	d106      	bne.n	8002dae <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002da0:	4b8e      	ldr	r3, [pc, #568]	@ (8002fdc <HAL_RCC_OscConfig+0x274>)
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002da8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002dac:	d00c      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dae:	4b8b      	ldr	r3, [pc, #556]	@ (8002fdc <HAL_RCC_OscConfig+0x274>)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002db6:	2b0c      	cmp	r3, #12
 8002db8:	d112      	bne.n	8002de0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dba:	4b88      	ldr	r3, [pc, #544]	@ (8002fdc <HAL_RCC_OscConfig+0x274>)
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dc2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002dc6:	d10b      	bne.n	8002de0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dc8:	4b84      	ldr	r3, [pc, #528]	@ (8002fdc <HAL_RCC_OscConfig+0x274>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d05b      	beq.n	8002e8c <HAL_RCC_OscConfig+0x124>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d157      	bne.n	8002e8c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e25a      	b.n	8003296 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002de8:	d106      	bne.n	8002df8 <HAL_RCC_OscConfig+0x90>
 8002dea:	4b7c      	ldr	r3, [pc, #496]	@ (8002fdc <HAL_RCC_OscConfig+0x274>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a7b      	ldr	r2, [pc, #492]	@ (8002fdc <HAL_RCC_OscConfig+0x274>)
 8002df0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002df4:	6013      	str	r3, [r2, #0]
 8002df6:	e01d      	b.n	8002e34 <HAL_RCC_OscConfig+0xcc>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e00:	d10c      	bne.n	8002e1c <HAL_RCC_OscConfig+0xb4>
 8002e02:	4b76      	ldr	r3, [pc, #472]	@ (8002fdc <HAL_RCC_OscConfig+0x274>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a75      	ldr	r2, [pc, #468]	@ (8002fdc <HAL_RCC_OscConfig+0x274>)
 8002e08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e0c:	6013      	str	r3, [r2, #0]
 8002e0e:	4b73      	ldr	r3, [pc, #460]	@ (8002fdc <HAL_RCC_OscConfig+0x274>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a72      	ldr	r2, [pc, #456]	@ (8002fdc <HAL_RCC_OscConfig+0x274>)
 8002e14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e18:	6013      	str	r3, [r2, #0]
 8002e1a:	e00b      	b.n	8002e34 <HAL_RCC_OscConfig+0xcc>
 8002e1c:	4b6f      	ldr	r3, [pc, #444]	@ (8002fdc <HAL_RCC_OscConfig+0x274>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a6e      	ldr	r2, [pc, #440]	@ (8002fdc <HAL_RCC_OscConfig+0x274>)
 8002e22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e26:	6013      	str	r3, [r2, #0]
 8002e28:	4b6c      	ldr	r3, [pc, #432]	@ (8002fdc <HAL_RCC_OscConfig+0x274>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a6b      	ldr	r2, [pc, #428]	@ (8002fdc <HAL_RCC_OscConfig+0x274>)
 8002e2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d013      	beq.n	8002e64 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e3c:	f7fe fa24 	bl	8001288 <HAL_GetTick>
 8002e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e42:	e008      	b.n	8002e56 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e44:	f7fe fa20 	bl	8001288 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b64      	cmp	r3, #100	@ 0x64
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e21f      	b.n	8003296 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e56:	4b61      	ldr	r3, [pc, #388]	@ (8002fdc <HAL_RCC_OscConfig+0x274>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d0f0      	beq.n	8002e44 <HAL_RCC_OscConfig+0xdc>
 8002e62:	e014      	b.n	8002e8e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e64:	f7fe fa10 	bl	8001288 <HAL_GetTick>
 8002e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e6a:	e008      	b.n	8002e7e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e6c:	f7fe fa0c 	bl	8001288 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b64      	cmp	r3, #100	@ 0x64
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e20b      	b.n	8003296 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e7e:	4b57      	ldr	r3, [pc, #348]	@ (8002fdc <HAL_RCC_OscConfig+0x274>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d1f0      	bne.n	8002e6c <HAL_RCC_OscConfig+0x104>
 8002e8a:	e000      	b.n	8002e8e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0302 	and.w	r3, r3, #2
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d06f      	beq.n	8002f7a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002e9a:	4b50      	ldr	r3, [pc, #320]	@ (8002fdc <HAL_RCC_OscConfig+0x274>)
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f003 030c 	and.w	r3, r3, #12
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d017      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002ea6:	4b4d      	ldr	r3, [pc, #308]	@ (8002fdc <HAL_RCC_OscConfig+0x274>)
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002eae:	2b08      	cmp	r3, #8
 8002eb0:	d105      	bne.n	8002ebe <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002eb2:	4b4a      	ldr	r3, [pc, #296]	@ (8002fdc <HAL_RCC_OscConfig+0x274>)
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d00b      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ebe:	4b47      	ldr	r3, [pc, #284]	@ (8002fdc <HAL_RCC_OscConfig+0x274>)
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002ec6:	2b0c      	cmp	r3, #12
 8002ec8:	d11c      	bne.n	8002f04 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002eca:	4b44      	ldr	r3, [pc, #272]	@ (8002fdc <HAL_RCC_OscConfig+0x274>)
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d116      	bne.n	8002f04 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ed6:	4b41      	ldr	r3, [pc, #260]	@ (8002fdc <HAL_RCC_OscConfig+0x274>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0302 	and.w	r3, r3, #2
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d005      	beq.n	8002eee <HAL_RCC_OscConfig+0x186>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d001      	beq.n	8002eee <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e1d3      	b.n	8003296 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eee:	4b3b      	ldr	r3, [pc, #236]	@ (8002fdc <HAL_RCC_OscConfig+0x274>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	00db      	lsls	r3, r3, #3
 8002efc:	4937      	ldr	r1, [pc, #220]	@ (8002fdc <HAL_RCC_OscConfig+0x274>)
 8002efe:	4313      	orrs	r3, r2
 8002f00:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f02:	e03a      	b.n	8002f7a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d020      	beq.n	8002f4e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f0c:	4b34      	ldr	r3, [pc, #208]	@ (8002fe0 <HAL_RCC_OscConfig+0x278>)
 8002f0e:	2201      	movs	r2, #1
 8002f10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f12:	f7fe f9b9 	bl	8001288 <HAL_GetTick>
 8002f16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f18:	e008      	b.n	8002f2c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f1a:	f7fe f9b5 	bl	8001288 <HAL_GetTick>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d901      	bls.n	8002f2c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	e1b4      	b.n	8003296 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f2c:	4b2b      	ldr	r3, [pc, #172]	@ (8002fdc <HAL_RCC_OscConfig+0x274>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0302 	and.w	r3, r3, #2
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d0f0      	beq.n	8002f1a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f38:	4b28      	ldr	r3, [pc, #160]	@ (8002fdc <HAL_RCC_OscConfig+0x274>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	691b      	ldr	r3, [r3, #16]
 8002f44:	00db      	lsls	r3, r3, #3
 8002f46:	4925      	ldr	r1, [pc, #148]	@ (8002fdc <HAL_RCC_OscConfig+0x274>)
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	600b      	str	r3, [r1, #0]
 8002f4c:	e015      	b.n	8002f7a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f4e:	4b24      	ldr	r3, [pc, #144]	@ (8002fe0 <HAL_RCC_OscConfig+0x278>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f54:	f7fe f998 	bl	8001288 <HAL_GetTick>
 8002f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f5a:	e008      	b.n	8002f6e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f5c:	f7fe f994 	bl	8001288 <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d901      	bls.n	8002f6e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e193      	b.n	8003296 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f6e:	4b1b      	ldr	r3, [pc, #108]	@ (8002fdc <HAL_RCC_OscConfig+0x274>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0302 	and.w	r3, r3, #2
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d1f0      	bne.n	8002f5c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0308 	and.w	r3, r3, #8
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d036      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	695b      	ldr	r3, [r3, #20]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d016      	beq.n	8002fbc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f8e:	4b15      	ldr	r3, [pc, #84]	@ (8002fe4 <HAL_RCC_OscConfig+0x27c>)
 8002f90:	2201      	movs	r2, #1
 8002f92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f94:	f7fe f978 	bl	8001288 <HAL_GetTick>
 8002f98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f9a:	e008      	b.n	8002fae <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f9c:	f7fe f974 	bl	8001288 <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d901      	bls.n	8002fae <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e173      	b.n	8003296 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fae:	4b0b      	ldr	r3, [pc, #44]	@ (8002fdc <HAL_RCC_OscConfig+0x274>)
 8002fb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fb2:	f003 0302 	and.w	r3, r3, #2
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d0f0      	beq.n	8002f9c <HAL_RCC_OscConfig+0x234>
 8002fba:	e01b      	b.n	8002ff4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fbc:	4b09      	ldr	r3, [pc, #36]	@ (8002fe4 <HAL_RCC_OscConfig+0x27c>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fc2:	f7fe f961 	bl	8001288 <HAL_GetTick>
 8002fc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fc8:	e00e      	b.n	8002fe8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fca:	f7fe f95d 	bl	8001288 <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d907      	bls.n	8002fe8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	e15c      	b.n	8003296 <HAL_RCC_OscConfig+0x52e>
 8002fdc:	40023800 	.word	0x40023800
 8002fe0:	42470000 	.word	0x42470000
 8002fe4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fe8:	4b8a      	ldr	r3, [pc, #552]	@ (8003214 <HAL_RCC_OscConfig+0x4ac>)
 8002fea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fec:	f003 0302 	and.w	r3, r3, #2
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d1ea      	bne.n	8002fca <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0304 	and.w	r3, r3, #4
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	f000 8097 	beq.w	8003130 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003002:	2300      	movs	r3, #0
 8003004:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003006:	4b83      	ldr	r3, [pc, #524]	@ (8003214 <HAL_RCC_OscConfig+0x4ac>)
 8003008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800300a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d10f      	bne.n	8003032 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003012:	2300      	movs	r3, #0
 8003014:	60bb      	str	r3, [r7, #8]
 8003016:	4b7f      	ldr	r3, [pc, #508]	@ (8003214 <HAL_RCC_OscConfig+0x4ac>)
 8003018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800301a:	4a7e      	ldr	r2, [pc, #504]	@ (8003214 <HAL_RCC_OscConfig+0x4ac>)
 800301c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003020:	6413      	str	r3, [r2, #64]	@ 0x40
 8003022:	4b7c      	ldr	r3, [pc, #496]	@ (8003214 <HAL_RCC_OscConfig+0x4ac>)
 8003024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003026:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800302a:	60bb      	str	r3, [r7, #8]
 800302c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800302e:	2301      	movs	r3, #1
 8003030:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003032:	4b79      	ldr	r3, [pc, #484]	@ (8003218 <HAL_RCC_OscConfig+0x4b0>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800303a:	2b00      	cmp	r3, #0
 800303c:	d118      	bne.n	8003070 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800303e:	4b76      	ldr	r3, [pc, #472]	@ (8003218 <HAL_RCC_OscConfig+0x4b0>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a75      	ldr	r2, [pc, #468]	@ (8003218 <HAL_RCC_OscConfig+0x4b0>)
 8003044:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003048:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800304a:	f7fe f91d 	bl	8001288 <HAL_GetTick>
 800304e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003050:	e008      	b.n	8003064 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003052:	f7fe f919 	bl	8001288 <HAL_GetTick>
 8003056:	4602      	mov	r2, r0
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	2b02      	cmp	r3, #2
 800305e:	d901      	bls.n	8003064 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003060:	2303      	movs	r3, #3
 8003062:	e118      	b.n	8003296 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003064:	4b6c      	ldr	r3, [pc, #432]	@ (8003218 <HAL_RCC_OscConfig+0x4b0>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800306c:	2b00      	cmp	r3, #0
 800306e:	d0f0      	beq.n	8003052 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	2b01      	cmp	r3, #1
 8003076:	d106      	bne.n	8003086 <HAL_RCC_OscConfig+0x31e>
 8003078:	4b66      	ldr	r3, [pc, #408]	@ (8003214 <HAL_RCC_OscConfig+0x4ac>)
 800307a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800307c:	4a65      	ldr	r2, [pc, #404]	@ (8003214 <HAL_RCC_OscConfig+0x4ac>)
 800307e:	f043 0301 	orr.w	r3, r3, #1
 8003082:	6713      	str	r3, [r2, #112]	@ 0x70
 8003084:	e01c      	b.n	80030c0 <HAL_RCC_OscConfig+0x358>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	2b05      	cmp	r3, #5
 800308c:	d10c      	bne.n	80030a8 <HAL_RCC_OscConfig+0x340>
 800308e:	4b61      	ldr	r3, [pc, #388]	@ (8003214 <HAL_RCC_OscConfig+0x4ac>)
 8003090:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003092:	4a60      	ldr	r2, [pc, #384]	@ (8003214 <HAL_RCC_OscConfig+0x4ac>)
 8003094:	f043 0304 	orr.w	r3, r3, #4
 8003098:	6713      	str	r3, [r2, #112]	@ 0x70
 800309a:	4b5e      	ldr	r3, [pc, #376]	@ (8003214 <HAL_RCC_OscConfig+0x4ac>)
 800309c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800309e:	4a5d      	ldr	r2, [pc, #372]	@ (8003214 <HAL_RCC_OscConfig+0x4ac>)
 80030a0:	f043 0301 	orr.w	r3, r3, #1
 80030a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80030a6:	e00b      	b.n	80030c0 <HAL_RCC_OscConfig+0x358>
 80030a8:	4b5a      	ldr	r3, [pc, #360]	@ (8003214 <HAL_RCC_OscConfig+0x4ac>)
 80030aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030ac:	4a59      	ldr	r2, [pc, #356]	@ (8003214 <HAL_RCC_OscConfig+0x4ac>)
 80030ae:	f023 0301 	bic.w	r3, r3, #1
 80030b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80030b4:	4b57      	ldr	r3, [pc, #348]	@ (8003214 <HAL_RCC_OscConfig+0x4ac>)
 80030b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030b8:	4a56      	ldr	r2, [pc, #344]	@ (8003214 <HAL_RCC_OscConfig+0x4ac>)
 80030ba:	f023 0304 	bic.w	r3, r3, #4
 80030be:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d015      	beq.n	80030f4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030c8:	f7fe f8de 	bl	8001288 <HAL_GetTick>
 80030cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030ce:	e00a      	b.n	80030e6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030d0:	f7fe f8da 	bl	8001288 <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030de:	4293      	cmp	r3, r2
 80030e0:	d901      	bls.n	80030e6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e0d7      	b.n	8003296 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030e6:	4b4b      	ldr	r3, [pc, #300]	@ (8003214 <HAL_RCC_OscConfig+0x4ac>)
 80030e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030ea:	f003 0302 	and.w	r3, r3, #2
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d0ee      	beq.n	80030d0 <HAL_RCC_OscConfig+0x368>
 80030f2:	e014      	b.n	800311e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030f4:	f7fe f8c8 	bl	8001288 <HAL_GetTick>
 80030f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030fa:	e00a      	b.n	8003112 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030fc:	f7fe f8c4 	bl	8001288 <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	f241 3288 	movw	r2, #5000	@ 0x1388
 800310a:	4293      	cmp	r3, r2
 800310c:	d901      	bls.n	8003112 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e0c1      	b.n	8003296 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003112:	4b40      	ldr	r3, [pc, #256]	@ (8003214 <HAL_RCC_OscConfig+0x4ac>)
 8003114:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003116:	f003 0302 	and.w	r3, r3, #2
 800311a:	2b00      	cmp	r3, #0
 800311c:	d1ee      	bne.n	80030fc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800311e:	7dfb      	ldrb	r3, [r7, #23]
 8003120:	2b01      	cmp	r3, #1
 8003122:	d105      	bne.n	8003130 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003124:	4b3b      	ldr	r3, [pc, #236]	@ (8003214 <HAL_RCC_OscConfig+0x4ac>)
 8003126:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003128:	4a3a      	ldr	r2, [pc, #232]	@ (8003214 <HAL_RCC_OscConfig+0x4ac>)
 800312a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800312e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	699b      	ldr	r3, [r3, #24]
 8003134:	2b00      	cmp	r3, #0
 8003136:	f000 80ad 	beq.w	8003294 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800313a:	4b36      	ldr	r3, [pc, #216]	@ (8003214 <HAL_RCC_OscConfig+0x4ac>)
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f003 030c 	and.w	r3, r3, #12
 8003142:	2b08      	cmp	r3, #8
 8003144:	d060      	beq.n	8003208 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	699b      	ldr	r3, [r3, #24]
 800314a:	2b02      	cmp	r3, #2
 800314c:	d145      	bne.n	80031da <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800314e:	4b33      	ldr	r3, [pc, #204]	@ (800321c <HAL_RCC_OscConfig+0x4b4>)
 8003150:	2200      	movs	r2, #0
 8003152:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003154:	f7fe f898 	bl	8001288 <HAL_GetTick>
 8003158:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800315a:	e008      	b.n	800316e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800315c:	f7fe f894 	bl	8001288 <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	2b02      	cmp	r3, #2
 8003168:	d901      	bls.n	800316e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	e093      	b.n	8003296 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800316e:	4b29      	ldr	r3, [pc, #164]	@ (8003214 <HAL_RCC_OscConfig+0x4ac>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d1f0      	bne.n	800315c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	69da      	ldr	r2, [r3, #28]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a1b      	ldr	r3, [r3, #32]
 8003182:	431a      	orrs	r2, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003188:	019b      	lsls	r3, r3, #6
 800318a:	431a      	orrs	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003190:	085b      	lsrs	r3, r3, #1
 8003192:	3b01      	subs	r3, #1
 8003194:	041b      	lsls	r3, r3, #16
 8003196:	431a      	orrs	r2, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800319c:	061b      	lsls	r3, r3, #24
 800319e:	431a      	orrs	r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031a4:	071b      	lsls	r3, r3, #28
 80031a6:	491b      	ldr	r1, [pc, #108]	@ (8003214 <HAL_RCC_OscConfig+0x4ac>)
 80031a8:	4313      	orrs	r3, r2
 80031aa:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031ac:	4b1b      	ldr	r3, [pc, #108]	@ (800321c <HAL_RCC_OscConfig+0x4b4>)
 80031ae:	2201      	movs	r2, #1
 80031b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b2:	f7fe f869 	bl	8001288 <HAL_GetTick>
 80031b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031b8:	e008      	b.n	80031cc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031ba:	f7fe f865 	bl	8001288 <HAL_GetTick>
 80031be:	4602      	mov	r2, r0
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d901      	bls.n	80031cc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80031c8:	2303      	movs	r3, #3
 80031ca:	e064      	b.n	8003296 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031cc:	4b11      	ldr	r3, [pc, #68]	@ (8003214 <HAL_RCC_OscConfig+0x4ac>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d0f0      	beq.n	80031ba <HAL_RCC_OscConfig+0x452>
 80031d8:	e05c      	b.n	8003294 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031da:	4b10      	ldr	r3, [pc, #64]	@ (800321c <HAL_RCC_OscConfig+0x4b4>)
 80031dc:	2200      	movs	r2, #0
 80031de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e0:	f7fe f852 	bl	8001288 <HAL_GetTick>
 80031e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031e6:	e008      	b.n	80031fa <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031e8:	f7fe f84e 	bl	8001288 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e04d      	b.n	8003296 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031fa:	4b06      	ldr	r3, [pc, #24]	@ (8003214 <HAL_RCC_OscConfig+0x4ac>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d1f0      	bne.n	80031e8 <HAL_RCC_OscConfig+0x480>
 8003206:	e045      	b.n	8003294 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	699b      	ldr	r3, [r3, #24]
 800320c:	2b01      	cmp	r3, #1
 800320e:	d107      	bne.n	8003220 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e040      	b.n	8003296 <HAL_RCC_OscConfig+0x52e>
 8003214:	40023800 	.word	0x40023800
 8003218:	40007000 	.word	0x40007000
 800321c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003220:	4b1f      	ldr	r3, [pc, #124]	@ (80032a0 <HAL_RCC_OscConfig+0x538>)
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	699b      	ldr	r3, [r3, #24]
 800322a:	2b01      	cmp	r3, #1
 800322c:	d030      	beq.n	8003290 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003238:	429a      	cmp	r2, r3
 800323a:	d129      	bne.n	8003290 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003246:	429a      	cmp	r2, r3
 8003248:	d122      	bne.n	8003290 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800324a:	68fa      	ldr	r2, [r7, #12]
 800324c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003250:	4013      	ands	r3, r2
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003256:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003258:	4293      	cmp	r3, r2
 800325a:	d119      	bne.n	8003290 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003266:	085b      	lsrs	r3, r3, #1
 8003268:	3b01      	subs	r3, #1
 800326a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800326c:	429a      	cmp	r2, r3
 800326e:	d10f      	bne.n	8003290 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800327a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800327c:	429a      	cmp	r2, r3
 800327e:	d107      	bne.n	8003290 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800328a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800328c:	429a      	cmp	r2, r3
 800328e:	d001      	beq.n	8003294 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e000      	b.n	8003296 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	3718      	adds	r7, #24
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	40023800 	.word	0x40023800

080032a4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d101      	bne.n	80032b6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e022      	b.n	80032fc <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d105      	bne.n	80032ce <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f7fd fd2f 	bl	8000d2c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2203      	movs	r2, #3
 80032d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f000 f814 	bl	8003304 <HAL_SD_InitCard>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d001      	beq.n	80032e6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e00a      	b.n	80032fc <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2201      	movs	r2, #1
 80032f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80032fa:	2300      	movs	r3, #0
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3708      	adds	r7, #8
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}

08003304 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003304:	b5b0      	push	{r4, r5, r7, lr}
 8003306:	b08e      	sub	sp, #56	@ 0x38
 8003308:	af04      	add	r7, sp, #16
 800330a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800330c:	2300      	movs	r3, #0
 800330e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8003310:	2300      	movs	r3, #0
 8003312:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003314:	2300      	movs	r3, #0
 8003316:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8003318:	2300      	movs	r3, #0
 800331a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800331c:	2300      	movs	r3, #0
 800331e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8003320:	2376      	movs	r3, #118	@ 0x76
 8003322:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681d      	ldr	r5, [r3, #0]
 8003328:	466c      	mov	r4, sp
 800332a:	f107 0314 	add.w	r3, r7, #20
 800332e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003332:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003336:	f107 0308 	add.w	r3, r7, #8
 800333a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800333c:	4628      	mov	r0, r5
 800333e:	f002 f8cd 	bl	80054dc <SDIO_Init>
 8003342:	4603      	mov	r3, r0
 8003344:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8003348:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800334c:	2b00      	cmp	r3, #0
 800334e:	d001      	beq.n	8003354 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e04f      	b.n	80033f4 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8003354:	4b29      	ldr	r3, [pc, #164]	@ (80033fc <HAL_SD_InitCard+0xf8>)
 8003356:	2200      	movs	r2, #0
 8003358:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4618      	mov	r0, r3
 8003360:	f002 f905 	bl	800556e <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8003364:	4b25      	ldr	r3, [pc, #148]	@ (80033fc <HAL_SD_InitCard+0xf8>)
 8003366:	2201      	movs	r2, #1
 8003368:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800336a:	2002      	movs	r0, #2
 800336c:	f7fd ff98 	bl	80012a0 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f000 ff55 	bl	8004220 <SD_PowerON>
 8003376:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003378:	6a3b      	ldr	r3, [r7, #32]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d00b      	beq.n	8003396 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2201      	movs	r2, #1
 8003382:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800338a:	6a3b      	ldr	r3, [r7, #32]
 800338c:	431a      	orrs	r2, r3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e02e      	b.n	80033f4 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f000 fe74 	bl	8004084 <SD_InitCard>
 800339c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800339e:	6a3b      	ldr	r3, [r7, #32]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d00b      	beq.n	80033bc <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80033b0:	6a3b      	ldr	r3, [r7, #32]
 80033b2:	431a      	orrs	r2, r3
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e01b      	b.n	80033f4 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80033c4:	4618      	mov	r0, r3
 80033c6:	f002 f964 	bl	8005692 <SDMMC_CmdBlockLength>
 80033ca:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80033cc:	6a3b      	ldr	r3, [r7, #32]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d00f      	beq.n	80033f2 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a0a      	ldr	r2, [pc, #40]	@ (8003400 <HAL_SD_InitCard+0xfc>)
 80033d8:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80033de:	6a3b      	ldr	r3, [r7, #32]
 80033e0:	431a      	orrs	r2, r3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2201      	movs	r2, #1
 80033ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e000      	b.n	80033f4 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 80033f2:	2300      	movs	r3, #0
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3728      	adds	r7, #40	@ 0x28
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bdb0      	pop	{r4, r5, r7, pc}
 80033fc:	422580a0 	.word	0x422580a0
 8003400:	004005ff 	.word	0x004005ff

08003404 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b08c      	sub	sp, #48	@ 0x30
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	607a      	str	r2, [r7, #4]
 8003410:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d107      	bne.n	800342c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003420:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e0be      	b.n	80035aa <HAL_SD_ReadBlocks_DMA+0x1a6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003432:	b2db      	uxtb	r3, r3
 8003434:	2b01      	cmp	r3, #1
 8003436:	f040 80b7 	bne.w	80035a8 <HAL_SD_ReadBlocks_DMA+0x1a4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2200      	movs	r2, #0
 800343e:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003440:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	441a      	add	r2, r3
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800344a:	429a      	cmp	r2, r3
 800344c:	d907      	bls.n	800345e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003452:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e0a5      	b.n	80035aa <HAL_SD_ReadBlocks_DMA+0x1a6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2203      	movs	r2, #3
 8003462:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	2200      	movs	r2, #0
 800346c:	62da      	str	r2, [r3, #44]	@ 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 800347c:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003482:	4a4c      	ldr	r2, [pc, #304]	@ (80035b4 <HAL_SD_ReadBlocks_DMA+0x1b0>)
 8003484:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800348a:	4a4b      	ldr	r2, [pc, #300]	@ (80035b8 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 800348c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003492:	2200      	movs	r2, #0
 8003494:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800349a:	2200      	movs	r2, #0
 800349c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ae:	689a      	ldr	r2, [r3, #8]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	430a      	orrs	r2, r1
 80034b8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	3380      	adds	r3, #128	@ 0x80
 80034c4:	4619      	mov	r1, r3
 80034c6:	68ba      	ldr	r2, [r7, #8]
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	025b      	lsls	r3, r3, #9
 80034cc:	089b      	lsrs	r3, r3, #2
 80034ce:	f7fe f8cb 	bl	8001668 <HAL_DMA_Start_IT>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d017      	beq.n	8003508 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 80034e6:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a33      	ldr	r2, [pc, #204]	@ (80035bc <HAL_SD_ReadBlocks_DMA+0x1b8>)
 80034ee:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034f4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e050      	b.n	80035aa <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8003508:	4b2d      	ldr	r3, [pc, #180]	@ (80035c0 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800350a:	2201      	movs	r2, #1
 800350c:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003512:	2b01      	cmp	r3, #1
 8003514:	d002      	beq.n	800351c <HAL_SD_ReadBlocks_DMA+0x118>
      {
        add *= 512U;
 8003516:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003518:	025b      	lsls	r3, r3, #9
 800351a:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800351c:	f04f 33ff 	mov.w	r3, #4294967295
 8003520:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	025b      	lsls	r3, r3, #9
 8003526:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003528:	2390      	movs	r3, #144	@ 0x90
 800352a:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800352c:	2302      	movs	r3, #2
 800352e:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003530:	2300      	movs	r3, #0
 8003532:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8003534:	2301      	movs	r3, #1
 8003536:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f107 0210 	add.w	r2, r7, #16
 8003540:	4611      	mov	r1, r2
 8003542:	4618      	mov	r0, r3
 8003544:	f002 f879 	bl	800563a <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	2b01      	cmp	r3, #1
 800354c:	d90a      	bls.n	8003564 <HAL_SD_ReadBlocks_DMA+0x160>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2282      	movs	r2, #130	@ 0x82
 8003552:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800355a:	4618      	mov	r0, r3
 800355c:	f002 f8dd 	bl	800571a <SDMMC_CmdReadMultiBlock>
 8003560:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8003562:	e009      	b.n	8003578 <HAL_SD_ReadBlocks_DMA+0x174>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2281      	movs	r2, #129	@ 0x81
 8003568:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003570:	4618      	mov	r0, r3
 8003572:	f002 f8b0 	bl	80056d6 <SDMMC_CmdReadSingleBlock>
 8003576:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8003578:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800357a:	2b00      	cmp	r3, #0
 800357c:	d012      	beq.n	80035a4 <HAL_SD_ReadBlocks_DMA+0x1a0>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a0e      	ldr	r2, [pc, #56]	@ (80035bc <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8003584:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800358a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800358c:	431a      	orrs	r2, r3
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2201      	movs	r2, #1
 8003596:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2200      	movs	r2, #0
 800359e:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e002      	b.n	80035aa <HAL_SD_ReadBlocks_DMA+0x1a6>
      }

      return HAL_OK;
 80035a4:	2300      	movs	r3, #0
 80035a6:	e000      	b.n	80035aa <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_BUSY;
 80035a8:	2302      	movs	r3, #2
  }
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3730      	adds	r7, #48	@ 0x30
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	08003e93 	.word	0x08003e93
 80035b8:	08003f05 	.word	0x08003f05
 80035bc:	004005ff 	.word	0x004005ff
 80035c0:	4225858c 	.word	0x4225858c

080035c4 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b08c      	sub	sp, #48	@ 0x30
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	60f8      	str	r0, [r7, #12]
 80035cc:	60b9      	str	r1, [r7, #8]
 80035ce:	607a      	str	r2, [r7, #4]
 80035d0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d107      	bne.n	80035ec <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035e0:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e0c1      	b.n	8003770 <HAL_SD_WriteBlocks_DMA+0x1ac>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	f040 80ba 	bne.w	800376e <HAL_SD_WriteBlocks_DMA+0x1aa>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2200      	movs	r2, #0
 80035fe:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003600:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	441a      	add	r2, r3
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800360a:	429a      	cmp	r2, r3
 800360c:	d907      	bls.n	800361e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003612:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e0a8      	b.n	8003770 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2203      	movs	r2, #3
 8003622:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	2200      	movs	r2, #0
 800362c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f042 021a 	orr.w	r2, r2, #26
 800363c:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003642:	4a4d      	ldr	r2, [pc, #308]	@ (8003778 <HAL_SD_WriteBlocks_DMA+0x1b4>)
 8003644:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800364a:	4a4c      	ldr	r2, [pc, #304]	@ (800377c <HAL_SD_WriteBlocks_DMA+0x1b8>)
 800364c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003652:	2200      	movs	r2, #0
 8003654:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800365a:	2b01      	cmp	r3, #1
 800365c:	d002      	beq.n	8003664 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800365e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003660:	025b      	lsls	r3, r3, #9
 8003662:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	2b01      	cmp	r3, #1
 8003668:	d90a      	bls.n	8003680 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	22a0      	movs	r2, #160	@ 0xa0
 800366e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003676:	4618      	mov	r0, r3
 8003678:	f002 f893 	bl	80057a2 <SDMMC_CmdWriteMultiBlock>
 800367c:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800367e:	e009      	b.n	8003694 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2290      	movs	r2, #144	@ 0x90
 8003684:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800368c:	4618      	mov	r0, r3
 800368e:	f002 f866 	bl	800575e <SDMMC_CmdWriteSingleBlock>
 8003692:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003696:	2b00      	cmp	r3, #0
 8003698:	d012      	beq.n	80036c0 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a38      	ldr	r2, [pc, #224]	@ (8003780 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 80036a0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80036a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036a8:	431a      	orrs	r2, r3
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2201      	movs	r2, #1
 80036b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2200      	movs	r2, #0
 80036ba:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e057      	b.n	8003770 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80036c0:	4b30      	ldr	r3, [pc, #192]	@ (8003784 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 80036c2:	2201      	movs	r2, #1
 80036c4:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036ca:	2240      	movs	r2, #64	@ 0x40
 80036cc:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036de:	689a      	ldr	r2, [r3, #8]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	430a      	orrs	r2, r1
 80036e8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80036ee:	68b9      	ldr	r1, [r7, #8]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	3380      	adds	r3, #128	@ 0x80
 80036f6:	461a      	mov	r2, r3
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	025b      	lsls	r3, r3, #9
 80036fc:	089b      	lsrs	r3, r3, #2
 80036fe:	f7fd ffb3 	bl	8001668 <HAL_DMA_Start_IT>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d01a      	beq.n	800373e <HAL_SD_WriteBlocks_DMA+0x17a>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f022 021a 	bic.w	r2, r2, #26
 8003716:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a18      	ldr	r2, [pc, #96]	@ (8003780 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 800371e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003724:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2200      	movs	r2, #0
 8003738:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e018      	b.n	8003770 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800373e:	f04f 33ff 	mov.w	r3, #4294967295
 8003742:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	025b      	lsls	r3, r3, #9
 8003748:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800374a:	2390      	movs	r3, #144	@ 0x90
 800374c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800374e:	2300      	movs	r3, #0
 8003750:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003752:	2300      	movs	r3, #0
 8003754:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8003756:	2301      	movs	r3, #1
 8003758:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f107 0210 	add.w	r2, r7, #16
 8003762:	4611      	mov	r1, r2
 8003764:	4618      	mov	r0, r3
 8003766:	f001 ff68 	bl	800563a <SDIO_ConfigData>

      return HAL_OK;
 800376a:	2300      	movs	r3, #0
 800376c:	e000      	b.n	8003770 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
  }
  else
  {
    return HAL_BUSY;
 800376e:	2302      	movs	r3, #2
  }
}
 8003770:	4618      	mov	r0, r3
 8003772:	3730      	adds	r7, #48	@ 0x30
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}
 8003778:	08003e69 	.word	0x08003e69
 800377c:	08003f05 	.word	0x08003f05
 8003780:	004005ff 	.word	0x004005ff
 8003784:	4225858c 	.word	0x4225858c

08003788 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003794:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800379c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d008      	beq.n	80037b6 <HAL_SD_IRQHandler+0x2e>
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f003 0308 	and.w	r3, r3, #8
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d003      	beq.n	80037b6 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f000 fdec 	bl	800438c <SD_Read_IT>
 80037b4:	e155      	b.n	8003a62 <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	f000 808f 	beq.w	80038e4 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80037ce:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	6812      	ldr	r2, [r2, #0]
 80037da:	f423 4341 	bic.w	r3, r3, #49408	@ 0xc100
 80037de:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 80037e2:	63d3      	str	r3, [r2, #60]	@ 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f022 0201 	bic.w	r2, r2, #1
 80037f2:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f003 0308 	and.w	r3, r3, #8
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d039      	beq.n	8003872 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	f003 0302 	and.w	r3, r3, #2
 8003804:	2b00      	cmp	r3, #0
 8003806:	d104      	bne.n	8003812 <HAL_SD_IRQHandler+0x8a>
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f003 0320 	and.w	r3, r3, #32
 800380e:	2b00      	cmp	r3, #0
 8003810:	d011      	beq.n	8003836 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4618      	mov	r0, r3
 8003818:	f001 ffe6 	bl	80057e8 <SDMMC_CmdStopTransfer>
 800381c:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d008      	beq.n	8003836 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	431a      	orrs	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f000 f91f 	bl	8003a74 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f240 523a 	movw	r2, #1338	@ 0x53a
 800383e:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	f003 0301 	and.w	r3, r3, #1
 8003854:	2b00      	cmp	r3, #0
 8003856:	d104      	bne.n	8003862 <HAL_SD_IRQHandler+0xda>
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f003 0302 	and.w	r3, r3, #2
 800385e:	2b00      	cmp	r3, #0
 8003860:	d003      	beq.n	800386a <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f002 fc04 	bl	8006070 <HAL_SD_RxCpltCallback>
 8003868:	e0fb      	b.n	8003a62 <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f002 fbf6 	bl	800605c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003870:	e0f7      	b.n	8003a62 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003878:	2b00      	cmp	r3, #0
 800387a:	f000 80f2 	beq.w	8003a62 <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f003 0320 	and.w	r3, r3, #32
 8003884:	2b00      	cmp	r3, #0
 8003886:	d011      	beq.n	80038ac <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4618      	mov	r0, r3
 800388e:	f001 ffab 	bl	80057e8 <SDMMC_CmdStopTransfer>
 8003892:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d008      	beq.n	80038ac <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	431a      	orrs	r2, r3
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f000 f8e4 	bl	8003a74 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f003 0301 	and.w	r3, r3, #1
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	f040 80d5 	bne.w	8003a62 <HAL_SD_IRQHandler+0x2da>
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f003 0302 	and.w	r3, r3, #2
 80038be:	2b00      	cmp	r3, #0
 80038c0:	f040 80cf 	bne.w	8003a62 <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f022 0208 	bic.w	r2, r2, #8
 80038d2:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f002 fbbd 	bl	800605c <HAL_SD_TxCpltCallback>
}
 80038e2:	e0be      	b.n	8003a62 <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d008      	beq.n	8003904 <HAL_SD_IRQHandler+0x17c>
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f003 0308 	and.w	r3, r3, #8
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d003      	beq.n	8003904 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f000 fd96 	bl	800442e <SD_Write_IT>
 8003902:	e0ae      	b.n	8003a62 <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800390a:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 800390e:	2b00      	cmp	r3, #0
 8003910:	f000 80a7 	beq.w	8003a62 <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800391a:	f003 0302 	and.w	r3, r3, #2
 800391e:	2b00      	cmp	r3, #0
 8003920:	d005      	beq.n	800392e <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003926:	f043 0202 	orr.w	r2, r3, #2
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003934:	f003 0308 	and.w	r3, r3, #8
 8003938:	2b00      	cmp	r3, #0
 800393a:	d005      	beq.n	8003948 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003940:	f043 0208 	orr.w	r2, r3, #8
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800394e:	f003 0320 	and.w	r3, r3, #32
 8003952:	2b00      	cmp	r3, #0
 8003954:	d005      	beq.n	8003962 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800395a:	f043 0220 	orr.w	r2, r3, #32
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003968:	f003 0310 	and.w	r3, r3, #16
 800396c:	2b00      	cmp	r3, #0
 800396e:	d005      	beq.n	800397c <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003974:	f043 0210 	orr.w	r2, r3, #16
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f240 523a 	movw	r2, #1338	@ 0x53a
 8003984:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8003994:	63da      	str	r2, [r3, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4618      	mov	r0, r3
 800399c:	f001 ff24 	bl	80057e8 <SDMMC_CmdStopTransfer>
 80039a0:	4602      	mov	r2, r0
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039a6:	431a      	orrs	r2, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f003 0308 	and.w	r3, r3, #8
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d00a      	beq.n	80039cc <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2201      	movs	r2, #1
 80039ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f000 f855 	bl	8003a74 <HAL_SD_ErrorCallback>
}
 80039ca:	e04a      	b.n	8003a62 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d045      	beq.n	8003a62 <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	f003 0310 	and.w	r3, r3, #16
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d104      	bne.n	80039ea <HAL_SD_IRQHandler+0x262>
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f003 0320 	and.w	r3, r3, #32
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d011      	beq.n	8003a0e <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039ee:	4a1f      	ldr	r2, [pc, #124]	@ (8003a6c <HAL_SD_IRQHandler+0x2e4>)
 80039f0:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039f6:	4618      	mov	r0, r3
 80039f8:	f7fd fefe 	bl	80017f8 <HAL_DMA_Abort_IT>
 80039fc:	4603      	mov	r3, r0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d02f      	beq.n	8003a62 <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a06:	4618      	mov	r0, r3
 8003a08:	f000 face 	bl	8003fa8 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003a0c:	e029      	b.n	8003a62 <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	f003 0301 	and.w	r3, r3, #1
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d104      	bne.n	8003a22 <HAL_SD_IRQHandler+0x29a>
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f003 0302 	and.w	r3, r3, #2
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d011      	beq.n	8003a46 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a26:	4a12      	ldr	r2, [pc, #72]	@ (8003a70 <HAL_SD_IRQHandler+0x2e8>)
 8003a28:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f7fd fee2 	bl	80017f8 <HAL_DMA_Abort_IT>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d013      	beq.n	8003a62 <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f000 fae9 	bl	8004016 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003a44:	e00d      	b.n	8003a62 <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f002 faf4 	bl	8006048 <HAL_SD_AbortCallback>
}
 8003a60:	e7ff      	b.n	8003a62 <HAL_SD_IRQHandler+0x2da>
 8003a62:	bf00      	nop
 8003a64:	3710      	adds	r7, #16
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	08003fa9 	.word	0x08003fa9
 8003a70:	08004017 	.word	0x08004017

08003a74 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8003a7c:	bf00      	nop
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a96:	0f9b      	lsrs	r3, r3, #30
 8003a98:	b2da      	uxtb	r2, r3
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003aa2:	0e9b      	lsrs	r3, r3, #26
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	f003 030f 	and.w	r3, r3, #15
 8003aaa:	b2da      	uxtb	r2, r3
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ab4:	0e1b      	lsrs	r3, r3, #24
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	f003 0303 	and.w	r3, r3, #3
 8003abc:	b2da      	uxtb	r2, r3
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ac6:	0c1b      	lsrs	r3, r3, #16
 8003ac8:	b2da      	uxtb	r2, r3
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ad2:	0a1b      	lsrs	r3, r3, #8
 8003ad4:	b2da      	uxtb	r2, r3
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ade:	b2da      	uxtb	r2, r3
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ae8:	0d1b      	lsrs	r3, r3, #20
 8003aea:	b29a      	uxth	r2, r3
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003af4:	0c1b      	lsrs	r3, r3, #16
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	f003 030f 	and.w	r3, r3, #15
 8003afc:	b2da      	uxtb	r2, r3
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003b06:	0bdb      	lsrs	r3, r3, #15
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	f003 0301 	and.w	r3, r3, #1
 8003b0e:	b2da      	uxtb	r2, r3
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003b18:	0b9b      	lsrs	r3, r3, #14
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	f003 0301 	and.w	r3, r3, #1
 8003b20:	b2da      	uxtb	r2, r3
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003b2a:	0b5b      	lsrs	r3, r3, #13
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	f003 0301 	and.w	r3, r3, #1
 8003b32:	b2da      	uxtb	r2, r3
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003b3c:	0b1b      	lsrs	r3, r3, #12
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	f003 0301 	and.w	r3, r3, #1
 8003b44:	b2da      	uxtb	r2, r3
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d163      	bne.n	8003c20 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003b5c:	009a      	lsls	r2, r3, #2
 8003b5e:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003b62:	4013      	ands	r3, r2
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8003b68:	0f92      	lsrs	r2, r2, #30
 8003b6a:	431a      	orrs	r2, r3
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b74:	0edb      	lsrs	r3, r3, #27
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	f003 0307 	and.w	r3, r3, #7
 8003b7c:	b2da      	uxtb	r2, r3
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b86:	0e1b      	lsrs	r3, r3, #24
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	f003 0307 	and.w	r3, r3, #7
 8003b8e:	b2da      	uxtb	r2, r3
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b98:	0d5b      	lsrs	r3, r3, #21
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	f003 0307 	and.w	r3, r3, #7
 8003ba0:	b2da      	uxtb	r2, r3
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003baa:	0c9b      	lsrs	r3, r3, #18
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	f003 0307 	and.w	r3, r3, #7
 8003bb2:	b2da      	uxtb	r2, r3
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003bbc:	0bdb      	lsrs	r3, r3, #15
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	f003 0307 	and.w	r3, r3, #7
 8003bc4:	b2da      	uxtb	r2, r3
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	691b      	ldr	r3, [r3, #16]
 8003bce:	1c5a      	adds	r2, r3, #1
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	7e1b      	ldrb	r3, [r3, #24]
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	f003 0307 	and.w	r3, r3, #7
 8003bde:	3302      	adds	r3, #2
 8003be0:	2201      	movs	r2, #1
 8003be2:	fa02 f303 	lsl.w	r3, r2, r3
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003bea:	fb03 f202 	mul.w	r2, r3, r2
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	7a1b      	ldrb	r3, [r3, #8]
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	f003 030f 	and.w	r3, r3, #15
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	409a      	lsls	r2, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003c0c:	0a52      	lsrs	r2, r2, #9
 8003c0e:	fb03 f202 	mul.w	r2, r3, r2
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c1c:	661a      	str	r2, [r3, #96]	@ 0x60
 8003c1e:	e031      	b.n	8003c84 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d11d      	bne.n	8003c64 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c2c:	041b      	lsls	r3, r3, #16
 8003c2e:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c36:	0c1b      	lsrs	r3, r3, #16
 8003c38:	431a      	orrs	r2, r3
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	691b      	ldr	r3, [r3, #16]
 8003c42:	3301      	adds	r3, #1
 8003c44:	029a      	lsls	r2, r3, #10
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c58:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	661a      	str	r2, [r3, #96]	@ 0x60
 8003c62:	e00f      	b.n	8003c84 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a58      	ldr	r2, [pc, #352]	@ (8003dcc <HAL_SD_GetCardCSD+0x344>)
 8003c6a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c70:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e09d      	b.n	8003dc0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c88:	0b9b      	lsrs	r3, r3, #14
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	f003 0301 	and.w	r3, r3, #1
 8003c90:	b2da      	uxtb	r2, r3
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c9a:	09db      	lsrs	r3, r3, #7
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003ca2:	b2da      	uxtb	r2, r3
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003cb2:	b2da      	uxtb	r2, r3
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cbc:	0fdb      	lsrs	r3, r3, #31
 8003cbe:	b2da      	uxtb	r2, r3
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cc8:	0f5b      	lsrs	r3, r3, #29
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	f003 0303 	and.w	r3, r3, #3
 8003cd0:	b2da      	uxtb	r2, r3
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cda:	0e9b      	lsrs	r3, r3, #26
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	f003 0307 	and.w	r3, r3, #7
 8003ce2:	b2da      	uxtb	r2, r3
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cec:	0d9b      	lsrs	r3, r3, #22
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	f003 030f 	and.w	r3, r3, #15
 8003cf4:	b2da      	uxtb	r2, r3
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cfe:	0d5b      	lsrs	r3, r3, #21
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	f003 0301 	and.w	r3, r3, #1
 8003d06:	b2da      	uxtb	r2, r3
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d1a:	0c1b      	lsrs	r3, r3, #16
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	f003 0301 	and.w	r3, r3, #1
 8003d22:	b2da      	uxtb	r2, r3
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d2e:	0bdb      	lsrs	r3, r3, #15
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	f003 0301 	and.w	r3, r3, #1
 8003d36:	b2da      	uxtb	r2, r3
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d42:	0b9b      	lsrs	r3, r3, #14
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	f003 0301 	and.w	r3, r3, #1
 8003d4a:	b2da      	uxtb	r2, r3
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d56:	0b5b      	lsrs	r3, r3, #13
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	f003 0301 	and.w	r3, r3, #1
 8003d5e:	b2da      	uxtb	r2, r3
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d6a:	0b1b      	lsrs	r3, r3, #12
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	f003 0301 	and.w	r3, r3, #1
 8003d72:	b2da      	uxtb	r2, r3
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d7e:	0a9b      	lsrs	r3, r3, #10
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	f003 0303 	and.w	r3, r3, #3
 8003d86:	b2da      	uxtb	r2, r3
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d92:	0a1b      	lsrs	r3, r3, #8
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	f003 0303 	and.w	r3, r3, #3
 8003d9a:	b2da      	uxtb	r2, r3
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003da6:	085b      	lsrs	r3, r3, #1
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003dae:	b2da      	uxtb	r2, r3
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	2201      	movs	r2, #1
 8003dba:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8003dbe:	2300      	movs	r3, #0
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	370c      	adds	r7, #12
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr
 8003dcc:	004005ff 	.word	0x004005ff

08003dd0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8003e1a:	2300      	movs	r3, #0
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	370c      	adds	r7, #12
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr

08003e28 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b086      	sub	sp, #24
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8003e30:	2300      	movs	r3, #0
 8003e32:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8003e34:	f107 030c 	add.w	r3, r7, #12
 8003e38:	4619      	mov	r1, r3
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 fa7e 	bl	800433c <SD_SendStatus>
 8003e40:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d005      	beq.n	8003e54 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	431a      	orrs	r2, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	0a5b      	lsrs	r3, r3, #9
 8003e58:	f003 030f 	and.w	r3, r3, #15
 8003e5c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8003e5e:	693b      	ldr	r3, [r7, #16]
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3718      	adds	r7, #24
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b085      	sub	sp, #20
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e74:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e84:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8003e86:	bf00      	nop
 8003e88:	3714      	adds	r7, #20
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr

08003e92 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003e92:	b580      	push	{r7, lr}
 8003e94:	b084      	sub	sp, #16
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e9e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ea4:	2b82      	cmp	r3, #130	@ 0x82
 8003ea6:	d111      	bne.n	8003ecc <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4618      	mov	r0, r3
 8003eae:	f001 fc9b 	bl	80057e8 <SDMMC_CmdStopTransfer>
 8003eb2:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d008      	beq.n	8003ecc <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	431a      	orrs	r2, r3
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8003ec6:	68f8      	ldr	r0, [r7, #12]
 8003ec8:	f7ff fdd4 	bl	8003a74 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f022 0208 	bic.w	r2, r2, #8
 8003eda:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f240 523a 	movw	r2, #1338	@ 0x53a
 8003ee4:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2201      	movs	r2, #1
 8003eea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8003ef4:	68f8      	ldr	r0, [r7, #12]
 8003ef6:	f002 f8bb 	bl	8006070 <HAL_SD_RxCpltCallback>
#endif
}
 8003efa:	bf00      	nop
 8003efc:	3710      	adds	r7, #16
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
	...

08003f04 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b086      	sub	sp, #24
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f10:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f7fd fe1c 	bl	8001b50 <HAL_DMA_GetError>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d03e      	beq.n	8003f9c <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f24:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f2c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d002      	beq.n	8003f3a <SD_DMAError+0x36>
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d12d      	bne.n	8003f96 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a19      	ldr	r2, [pc, #100]	@ (8003fa4 <SD_DMAError+0xa0>)
 8003f40:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8003f50:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f56:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8003f5e:	6978      	ldr	r0, [r7, #20]
 8003f60:	f7ff ff62 	bl	8003e28 <HAL_SD_GetCardState>
 8003f64:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	2b06      	cmp	r3, #6
 8003f6a:	d002      	beq.n	8003f72 <SD_DMAError+0x6e>
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	2b05      	cmp	r3, #5
 8003f70:	d10a      	bne.n	8003f88 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4618      	mov	r0, r3
 8003f78:	f001 fc36 	bl	80057e8 <SDMMC_CmdStopTransfer>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f82:	431a      	orrs	r2, r3
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	2200      	movs	r2, #0
 8003f94:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8003f96:	6978      	ldr	r0, [r7, #20]
 8003f98:	f7ff fd6c 	bl	8003a74 <HAL_SD_ErrorCallback>
#endif
  }
}
 8003f9c:	bf00      	nop
 8003f9e:	3718      	adds	r7, #24
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	004005ff 	.word	0x004005ff

08003fa8 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b084      	sub	sp, #16
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fb4:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f240 523a 	movw	r2, #1338	@ 0x53a
 8003fbe:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8003fc0:	68f8      	ldr	r0, [r7, #12]
 8003fc2:	f7ff ff31 	bl	8003e28 <HAL_SD_GetCardState>
 8003fc6:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	2b06      	cmp	r3, #6
 8003fda:	d002      	beq.n	8003fe2 <SD_DMATxAbort+0x3a>
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	2b05      	cmp	r3, #5
 8003fe0:	d10a      	bne.n	8003ff8 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f001 fbfe 	bl	80057e8 <SDMMC_CmdStopTransfer>
 8003fec:	4602      	mov	r2, r0
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ff2:	431a      	orrs	r2, r3
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d103      	bne.n	8004008 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8004000:	68f8      	ldr	r0, [r7, #12]
 8004002:	f002 f821 	bl	8006048 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8004006:	e002      	b.n	800400e <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004008:	68f8      	ldr	r0, [r7, #12]
 800400a:	f7ff fd33 	bl	8003a74 <HAL_SD_ErrorCallback>
}
 800400e:	bf00      	nop
 8004010:	3710      	adds	r7, #16
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}

08004016 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8004016:	b580      	push	{r7, lr}
 8004018:	b084      	sub	sp, #16
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004022:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f240 523a 	movw	r2, #1338	@ 0x53a
 800402c:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800402e:	68f8      	ldr	r0, [r7, #12]
 8004030:	f7ff fefa 	bl	8003e28 <HAL_SD_GetCardState>
 8004034:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2201      	movs	r2, #1
 800403a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2200      	movs	r2, #0
 8004042:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	2b06      	cmp	r3, #6
 8004048:	d002      	beq.n	8004050 <SD_DMARxAbort+0x3a>
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	2b05      	cmp	r3, #5
 800404e:	d10a      	bne.n	8004066 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4618      	mov	r0, r3
 8004056:	f001 fbc7 	bl	80057e8 <SDMMC_CmdStopTransfer>
 800405a:	4602      	mov	r2, r0
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004060:	431a      	orrs	r2, r3
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800406a:	2b00      	cmp	r3, #0
 800406c:	d103      	bne.n	8004076 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800406e:	68f8      	ldr	r0, [r7, #12]
 8004070:	f001 ffea 	bl	8006048 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8004074:	e002      	b.n	800407c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004076:	68f8      	ldr	r0, [r7, #12]
 8004078:	f7ff fcfc 	bl	8003a74 <HAL_SD_ErrorCallback>
}
 800407c:	bf00      	nop
 800407e:	3710      	adds	r7, #16
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}

08004084 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004084:	b5b0      	push	{r4, r5, r7, lr}
 8004086:	b094      	sub	sp, #80	@ 0x50
 8004088:	af04      	add	r7, sp, #16
 800408a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800408c:	2301      	movs	r3, #1
 800408e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4618      	mov	r0, r3
 8004096:	f001 fa78 	bl	800558a <SDIO_GetPowerState>
 800409a:	4603      	mov	r3, r0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d102      	bne.n	80040a6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80040a0:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80040a4:	e0b8      	b.n	8004218 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040aa:	2b03      	cmp	r3, #3
 80040ac:	d02f      	beq.n	800410e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4618      	mov	r0, r3
 80040b4:	f001 fc5f 	bl	8005976 <SDMMC_CmdSendCID>
 80040b8:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80040ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d001      	beq.n	80040c4 <SD_InitCard+0x40>
    {
      return errorstate;
 80040c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040c2:	e0a9      	b.n	8004218 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2100      	movs	r1, #0
 80040ca:	4618      	mov	r0, r3
 80040cc:	f001 faa2 	bl	8005614 <SDIO_GetResponse>
 80040d0:	4602      	mov	r2, r0
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	2104      	movs	r1, #4
 80040dc:	4618      	mov	r0, r3
 80040de:	f001 fa99 	bl	8005614 <SDIO_GetResponse>
 80040e2:	4602      	mov	r2, r0
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2108      	movs	r1, #8
 80040ee:	4618      	mov	r0, r3
 80040f0:	f001 fa90 	bl	8005614 <SDIO_GetResponse>
 80040f4:	4602      	mov	r2, r0
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	210c      	movs	r1, #12
 8004100:	4618      	mov	r0, r3
 8004102:	f001 fa87 	bl	8005614 <SDIO_GetResponse>
 8004106:	4602      	mov	r2, r0
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004112:	2b03      	cmp	r3, #3
 8004114:	d00d      	beq.n	8004132 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f107 020e 	add.w	r2, r7, #14
 800411e:	4611      	mov	r1, r2
 8004120:	4618      	mov	r0, r3
 8004122:	f001 fc65 	bl	80059f0 <SDMMC_CmdSetRelAdd>
 8004126:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004128:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800412a:	2b00      	cmp	r3, #0
 800412c:	d001      	beq.n	8004132 <SD_InitCard+0xae>
    {
      return errorstate;
 800412e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004130:	e072      	b.n	8004218 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004136:	2b03      	cmp	r3, #3
 8004138:	d036      	beq.n	80041a8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800413a:	89fb      	ldrh	r3, [r7, #14]
 800413c:	461a      	mov	r2, r3
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800414a:	041b      	lsls	r3, r3, #16
 800414c:	4619      	mov	r1, r3
 800414e:	4610      	mov	r0, r2
 8004150:	f001 fc2f 	bl	80059b2 <SDMMC_CmdSendCSD>
 8004154:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004156:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004158:	2b00      	cmp	r3, #0
 800415a:	d001      	beq.n	8004160 <SD_InitCard+0xdc>
    {
      return errorstate;
 800415c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800415e:	e05b      	b.n	8004218 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2100      	movs	r1, #0
 8004166:	4618      	mov	r0, r3
 8004168:	f001 fa54 	bl	8005614 <SDIO_GetResponse>
 800416c:	4602      	mov	r2, r0
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2104      	movs	r1, #4
 8004178:	4618      	mov	r0, r3
 800417a:	f001 fa4b 	bl	8005614 <SDIO_GetResponse>
 800417e:	4602      	mov	r2, r0
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	2108      	movs	r1, #8
 800418a:	4618      	mov	r0, r3
 800418c:	f001 fa42 	bl	8005614 <SDIO_GetResponse>
 8004190:	4602      	mov	r2, r0
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	210c      	movs	r1, #12
 800419c:	4618      	mov	r0, r3
 800419e:	f001 fa39 	bl	8005614 <SDIO_GetResponse>
 80041a2:	4602      	mov	r2, r0
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	2104      	movs	r1, #4
 80041ae:	4618      	mov	r0, r3
 80041b0:	f001 fa30 	bl	8005614 <SDIO_GetResponse>
 80041b4:	4603      	mov	r3, r0
 80041b6:	0d1a      	lsrs	r2, r3, #20
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80041bc:	f107 0310 	add.w	r3, r7, #16
 80041c0:	4619      	mov	r1, r3
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f7ff fc60 	bl	8003a88 <HAL_SD_GetCardCSD>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d002      	beq.n	80041d4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80041ce:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80041d2:	e021      	b.n	8004218 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6819      	ldr	r1, [r3, #0]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041dc:	041b      	lsls	r3, r3, #16
 80041de:	2200      	movs	r2, #0
 80041e0:	461c      	mov	r4, r3
 80041e2:	4615      	mov	r5, r2
 80041e4:	4622      	mov	r2, r4
 80041e6:	462b      	mov	r3, r5
 80041e8:	4608      	mov	r0, r1
 80041ea:	f001 fb1f 	bl	800582c <SDMMC_CmdSelDesel>
 80041ee:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80041f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d001      	beq.n	80041fa <SD_InitCard+0x176>
  {
    return errorstate;
 80041f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041f8:	e00e      	b.n	8004218 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681d      	ldr	r5, [r3, #0]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	466c      	mov	r4, sp
 8004202:	f103 0210 	add.w	r2, r3, #16
 8004206:	ca07      	ldmia	r2, {r0, r1, r2}
 8004208:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800420c:	3304      	adds	r3, #4
 800420e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004210:	4628      	mov	r0, r5
 8004212:	f001 f963 	bl	80054dc <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8004216:	2300      	movs	r3, #0
}
 8004218:	4618      	mov	r0, r3
 800421a:	3740      	adds	r7, #64	@ 0x40
 800421c:	46bd      	mov	sp, r7
 800421e:	bdb0      	pop	{r4, r5, r7, pc}

08004220 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b086      	sub	sp, #24
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004228:	2300      	movs	r3, #0
 800422a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800422c:	2300      	movs	r3, #0
 800422e:	617b      	str	r3, [r7, #20]
 8004230:	2300      	movs	r3, #0
 8004232:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4618      	mov	r0, r3
 800423a:	f001 fb1a 	bl	8005872 <SDMMC_CmdGoIdleState>
 800423e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d001      	beq.n	800424a <SD_PowerON+0x2a>
  {
    return errorstate;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	e072      	b.n	8004330 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4618      	mov	r0, r3
 8004250:	f001 fb2d 	bl	80058ae <SDMMC_CmdOperCond>
 8004254:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d00d      	beq.n	8004278 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4618      	mov	r0, r3
 8004268:	f001 fb03 	bl	8005872 <SDMMC_CmdGoIdleState>
 800426c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d004      	beq.n	800427e <SD_PowerON+0x5e>
    {
      return errorstate;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	e05b      	b.n	8004330 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2201      	movs	r2, #1
 800427c:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004282:	2b01      	cmp	r3, #1
 8004284:	d137      	bne.n	80042f6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	2100      	movs	r1, #0
 800428c:	4618      	mov	r0, r3
 800428e:	f001 fb2d 	bl	80058ec <SDMMC_CmdAppCommand>
 8004292:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d02d      	beq.n	80042f6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800429a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800429e:	e047      	b.n	8004330 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	2100      	movs	r1, #0
 80042a6:	4618      	mov	r0, r3
 80042a8:	f001 fb20 	bl	80058ec <SDMMC_CmdAppCommand>
 80042ac:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d001      	beq.n	80042b8 <SD_PowerON+0x98>
    {
      return errorstate;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	e03b      	b.n	8004330 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	491e      	ldr	r1, [pc, #120]	@ (8004338 <SD_PowerON+0x118>)
 80042be:	4618      	mov	r0, r3
 80042c0:	f001 fb36 	bl	8005930 <SDMMC_CmdAppOperCommand>
 80042c4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d002      	beq.n	80042d2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80042cc:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80042d0:	e02e      	b.n	8004330 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	2100      	movs	r1, #0
 80042d8:	4618      	mov	r0, r3
 80042da:	f001 f99b 	bl	8005614 <SDIO_GetResponse>
 80042de:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	0fdb      	lsrs	r3, r3, #31
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d101      	bne.n	80042ec <SD_PowerON+0xcc>
 80042e8:	2301      	movs	r3, #1
 80042ea:	e000      	b.n	80042ee <SD_PowerON+0xce>
 80042ec:	2300      	movs	r3, #0
 80042ee:	613b      	str	r3, [r7, #16]

    count++;
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	3301      	adds	r3, #1
 80042f4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d802      	bhi.n	8004306 <SD_PowerON+0xe6>
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d0cc      	beq.n	80042a0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800430c:	4293      	cmp	r3, r2
 800430e:	d902      	bls.n	8004316 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004310:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004314:	e00c      	b.n	8004330 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800431c:	2b00      	cmp	r3, #0
 800431e:	d003      	beq.n	8004328 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	645a      	str	r2, [r3, #68]	@ 0x44
 8004326:	e002      	b.n	800432e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800432e:	2300      	movs	r3, #0
}
 8004330:	4618      	mov	r0, r3
 8004332:	3718      	adds	r7, #24
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}
 8004338:	c1100000 	.word	0xc1100000

0800433c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b084      	sub	sp, #16
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d102      	bne.n	8004352 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800434c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004350:	e018      	b.n	8004384 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800435a:	041b      	lsls	r3, r3, #16
 800435c:	4619      	mov	r1, r3
 800435e:	4610      	mov	r0, r2
 8004360:	f001 fb67 	bl	8005a32 <SDMMC_CmdSendStatus>
 8004364:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d001      	beq.n	8004370 <SD_SendStatus+0x34>
  {
    return errorstate;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	e009      	b.n	8004384 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	2100      	movs	r1, #0
 8004376:	4618      	mov	r0, r3
 8004378:	f001 f94c 	bl	8005614 <SDIO_GetResponse>
 800437c:	4602      	mov	r2, r0
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8004382:	2300      	movs	r3, #0
}
 8004384:	4618      	mov	r0, r3
 8004386:	3710      	adds	r7, #16
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}

0800438c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b086      	sub	sp, #24
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004398:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800439e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d03f      	beq.n	8004426 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80043a6:	2300      	movs	r3, #0
 80043a8:	617b      	str	r3, [r7, #20]
 80043aa:	e033      	b.n	8004414 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4618      	mov	r0, r3
 80043b2:	f001 f8be 	bl	8005532 <SDIO_ReadFIFO>
 80043b6:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	b2da      	uxtb	r2, r3
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	701a      	strb	r2, [r3, #0]
      tmp++;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	3301      	adds	r3, #1
 80043c4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	3b01      	subs	r3, #1
 80043ca:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	0a1b      	lsrs	r3, r3, #8
 80043d0:	b2da      	uxtb	r2, r3
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	701a      	strb	r2, [r3, #0]
      tmp++;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	3301      	adds	r3, #1
 80043da:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	3b01      	subs	r3, #1
 80043e0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	0c1b      	lsrs	r3, r3, #16
 80043e6:	b2da      	uxtb	r2, r3
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	701a      	strb	r2, [r3, #0]
      tmp++;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	3301      	adds	r3, #1
 80043f0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	3b01      	subs	r3, #1
 80043f6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	0e1b      	lsrs	r3, r3, #24
 80043fc:	b2da      	uxtb	r2, r3
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	3301      	adds	r3, #1
 8004406:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	3b01      	subs	r3, #1
 800440c:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	3301      	adds	r3, #1
 8004412:	617b      	str	r3, [r7, #20]
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	2b07      	cmp	r3, #7
 8004418:	d9c8      	bls.n	80043ac <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	68fa      	ldr	r2, [r7, #12]
 800441e:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	693a      	ldr	r2, [r7, #16]
 8004424:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 8004426:	bf00      	nop
 8004428:	3718      	adds	r7, #24
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}

0800442e <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800442e:	b580      	push	{r7, lr}
 8004430:	b086      	sub	sp, #24
 8004432:	af00      	add	r7, sp, #0
 8004434:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6a1b      	ldr	r3, [r3, #32]
 800443a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004440:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d043      	beq.n	80044d0 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8004448:	2300      	movs	r3, #0
 800444a:	617b      	str	r3, [r7, #20]
 800444c:	e037      	b.n	80044be <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	781b      	ldrb	r3, [r3, #0]
 8004452:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	3301      	adds	r3, #1
 8004458:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	3b01      	subs	r3, #1
 800445e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	021a      	lsls	r2, r3, #8
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	4313      	orrs	r3, r2
 800446a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	3301      	adds	r3, #1
 8004470:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	3b01      	subs	r3, #1
 8004476:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	781b      	ldrb	r3, [r3, #0]
 800447c:	041a      	lsls	r2, r3, #16
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	4313      	orrs	r3, r2
 8004482:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	3301      	adds	r3, #1
 8004488:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	3b01      	subs	r3, #1
 800448e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	781b      	ldrb	r3, [r3, #0]
 8004494:	061a      	lsls	r2, r3, #24
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	4313      	orrs	r3, r2
 800449a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	3301      	adds	r3, #1
 80044a0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	3b01      	subs	r3, #1
 80044a6:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f107 0208 	add.w	r2, r7, #8
 80044b0:	4611      	mov	r1, r2
 80044b2:	4618      	mov	r0, r3
 80044b4:	f001 f84a 	bl	800554c <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	3301      	adds	r3, #1
 80044bc:	617b      	str	r3, [r7, #20]
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	2b07      	cmp	r3, #7
 80044c2:	d9c4      	bls.n	800444e <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	68fa      	ldr	r2, [r7, #12]
 80044c8:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	693a      	ldr	r2, [r7, #16]
 80044ce:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 80044d0:	bf00      	nop
 80044d2:	3718      	adds	r7, #24
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}

080044d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b082      	sub	sp, #8
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d101      	bne.n	80044ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e042      	b.n	8004570 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d106      	bne.n	8004504 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f7fc fd42 	bl	8000f88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2224      	movs	r2, #36	@ 0x24
 8004508:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	68da      	ldr	r2, [r3, #12]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800451a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f000 fd69 	bl	8004ff4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	691a      	ldr	r2, [r3, #16]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004530:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	695a      	ldr	r2, [r3, #20]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004540:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	68da      	ldr	r2, [r3, #12]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004550:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2220      	movs	r2, #32
 800455c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2220      	movs	r2, #32
 8004564:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800456e:	2300      	movs	r3, #0
}
 8004570:	4618      	mov	r0, r3
 8004572:	3708      	adds	r7, #8
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}

08004578 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b08a      	sub	sp, #40	@ 0x28
 800457c:	af02      	add	r7, sp, #8
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	60b9      	str	r1, [r7, #8]
 8004582:	603b      	str	r3, [r7, #0]
 8004584:	4613      	mov	r3, r2
 8004586:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004588:	2300      	movs	r3, #0
 800458a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004592:	b2db      	uxtb	r3, r3
 8004594:	2b20      	cmp	r3, #32
 8004596:	d175      	bne.n	8004684 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d002      	beq.n	80045a4 <HAL_UART_Transmit+0x2c>
 800459e:	88fb      	ldrh	r3, [r7, #6]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d101      	bne.n	80045a8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	e06e      	b.n	8004686 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2200      	movs	r2, #0
 80045ac:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2221      	movs	r2, #33	@ 0x21
 80045b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80045b6:	f7fc fe67 	bl	8001288 <HAL_GetTick>
 80045ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	88fa      	ldrh	r2, [r7, #6]
 80045c0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	88fa      	ldrh	r2, [r7, #6]
 80045c6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045d0:	d108      	bne.n	80045e4 <HAL_UART_Transmit+0x6c>
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d104      	bne.n	80045e4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80045da:	2300      	movs	r3, #0
 80045dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	61bb      	str	r3, [r7, #24]
 80045e2:	e003      	b.n	80045ec <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80045e8:	2300      	movs	r3, #0
 80045ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80045ec:	e02e      	b.n	800464c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	9300      	str	r3, [sp, #0]
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	2200      	movs	r2, #0
 80045f6:	2180      	movs	r1, #128	@ 0x80
 80045f8:	68f8      	ldr	r0, [r7, #12]
 80045fa:	f000 fb05 	bl	8004c08 <UART_WaitOnFlagUntilTimeout>
 80045fe:	4603      	mov	r3, r0
 8004600:	2b00      	cmp	r3, #0
 8004602:	d005      	beq.n	8004610 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2220      	movs	r2, #32
 8004608:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800460c:	2303      	movs	r3, #3
 800460e:	e03a      	b.n	8004686 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004610:	69fb      	ldr	r3, [r7, #28]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d10b      	bne.n	800462e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004616:	69bb      	ldr	r3, [r7, #24]
 8004618:	881b      	ldrh	r3, [r3, #0]
 800461a:	461a      	mov	r2, r3
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004624:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004626:	69bb      	ldr	r3, [r7, #24]
 8004628:	3302      	adds	r3, #2
 800462a:	61bb      	str	r3, [r7, #24]
 800462c:	e007      	b.n	800463e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	781a      	ldrb	r2, [r3, #0]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	3301      	adds	r3, #1
 800463c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004642:	b29b      	uxth	r3, r3
 8004644:	3b01      	subs	r3, #1
 8004646:	b29a      	uxth	r2, r3
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004650:	b29b      	uxth	r3, r3
 8004652:	2b00      	cmp	r3, #0
 8004654:	d1cb      	bne.n	80045ee <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	9300      	str	r3, [sp, #0]
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	2200      	movs	r2, #0
 800465e:	2140      	movs	r1, #64	@ 0x40
 8004660:	68f8      	ldr	r0, [r7, #12]
 8004662:	f000 fad1 	bl	8004c08 <UART_WaitOnFlagUntilTimeout>
 8004666:	4603      	mov	r3, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d005      	beq.n	8004678 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2220      	movs	r2, #32
 8004670:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004674:	2303      	movs	r3, #3
 8004676:	e006      	b.n	8004686 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2220      	movs	r2, #32
 800467c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004680:	2300      	movs	r3, #0
 8004682:	e000      	b.n	8004686 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004684:	2302      	movs	r3, #2
  }
}
 8004686:	4618      	mov	r0, r3
 8004688:	3720      	adds	r7, #32
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
	...

08004690 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b0ba      	sub	sp, #232	@ 0xe8
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	695b      	ldr	r3, [r3, #20]
 80046b2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80046b6:	2300      	movs	r3, #0
 80046b8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80046bc:	2300      	movs	r3, #0
 80046be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80046c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046c6:	f003 030f 	and.w	r3, r3, #15
 80046ca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80046ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d10f      	bne.n	80046f6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80046d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046da:	f003 0320 	and.w	r3, r3, #32
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d009      	beq.n	80046f6 <HAL_UART_IRQHandler+0x66>
 80046e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046e6:	f003 0320 	and.w	r3, r3, #32
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d003      	beq.n	80046f6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f000 fbc2 	bl	8004e78 <UART_Receive_IT>
      return;
 80046f4:	e25b      	b.n	8004bae <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80046f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	f000 80de 	beq.w	80048bc <HAL_UART_IRQHandler+0x22c>
 8004700:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004704:	f003 0301 	and.w	r3, r3, #1
 8004708:	2b00      	cmp	r3, #0
 800470a:	d106      	bne.n	800471a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800470c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004710:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004714:	2b00      	cmp	r3, #0
 8004716:	f000 80d1 	beq.w	80048bc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800471a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800471e:	f003 0301 	and.w	r3, r3, #1
 8004722:	2b00      	cmp	r3, #0
 8004724:	d00b      	beq.n	800473e <HAL_UART_IRQHandler+0xae>
 8004726:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800472a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800472e:	2b00      	cmp	r3, #0
 8004730:	d005      	beq.n	800473e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004736:	f043 0201 	orr.w	r2, r3, #1
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800473e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004742:	f003 0304 	and.w	r3, r3, #4
 8004746:	2b00      	cmp	r3, #0
 8004748:	d00b      	beq.n	8004762 <HAL_UART_IRQHandler+0xd2>
 800474a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800474e:	f003 0301 	and.w	r3, r3, #1
 8004752:	2b00      	cmp	r3, #0
 8004754:	d005      	beq.n	8004762 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800475a:	f043 0202 	orr.w	r2, r3, #2
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004762:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004766:	f003 0302 	and.w	r3, r3, #2
 800476a:	2b00      	cmp	r3, #0
 800476c:	d00b      	beq.n	8004786 <HAL_UART_IRQHandler+0xf6>
 800476e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004772:	f003 0301 	and.w	r3, r3, #1
 8004776:	2b00      	cmp	r3, #0
 8004778:	d005      	beq.n	8004786 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800477e:	f043 0204 	orr.w	r2, r3, #4
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004786:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800478a:	f003 0308 	and.w	r3, r3, #8
 800478e:	2b00      	cmp	r3, #0
 8004790:	d011      	beq.n	80047b6 <HAL_UART_IRQHandler+0x126>
 8004792:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004796:	f003 0320 	and.w	r3, r3, #32
 800479a:	2b00      	cmp	r3, #0
 800479c:	d105      	bne.n	80047aa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800479e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80047a2:	f003 0301 	and.w	r3, r3, #1
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d005      	beq.n	80047b6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047ae:	f043 0208 	orr.w	r2, r3, #8
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	f000 81f2 	beq.w	8004ba4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80047c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047c4:	f003 0320 	and.w	r3, r3, #32
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d008      	beq.n	80047de <HAL_UART_IRQHandler+0x14e>
 80047cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047d0:	f003 0320 	and.w	r3, r3, #32
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d002      	beq.n	80047de <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f000 fb4d 	bl	8004e78 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	695b      	ldr	r3, [r3, #20]
 80047e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047e8:	2b40      	cmp	r3, #64	@ 0x40
 80047ea:	bf0c      	ite	eq
 80047ec:	2301      	moveq	r3, #1
 80047ee:	2300      	movne	r3, #0
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047fa:	f003 0308 	and.w	r3, r3, #8
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d103      	bne.n	800480a <HAL_UART_IRQHandler+0x17a>
 8004802:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004806:	2b00      	cmp	r3, #0
 8004808:	d04f      	beq.n	80048aa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f000 fa55 	bl	8004cba <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	695b      	ldr	r3, [r3, #20]
 8004816:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800481a:	2b40      	cmp	r3, #64	@ 0x40
 800481c:	d141      	bne.n	80048a2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	3314      	adds	r3, #20
 8004824:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004828:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800482c:	e853 3f00 	ldrex	r3, [r3]
 8004830:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004834:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004838:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800483c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	3314      	adds	r3, #20
 8004846:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800484a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800484e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004852:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004856:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800485a:	e841 2300 	strex	r3, r2, [r1]
 800485e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004862:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004866:	2b00      	cmp	r3, #0
 8004868:	d1d9      	bne.n	800481e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800486e:	2b00      	cmp	r3, #0
 8004870:	d013      	beq.n	800489a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004876:	4a7e      	ldr	r2, [pc, #504]	@ (8004a70 <HAL_UART_IRQHandler+0x3e0>)
 8004878:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800487e:	4618      	mov	r0, r3
 8004880:	f7fc ffba 	bl	80017f8 <HAL_DMA_Abort_IT>
 8004884:	4603      	mov	r3, r0
 8004886:	2b00      	cmp	r3, #0
 8004888:	d016      	beq.n	80048b8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800488e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004894:	4610      	mov	r0, r2
 8004896:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004898:	e00e      	b.n	80048b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f000 f99e 	bl	8004bdc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048a0:	e00a      	b.n	80048b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f000 f99a 	bl	8004bdc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048a8:	e006      	b.n	80048b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f000 f996 	bl	8004bdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2200      	movs	r2, #0
 80048b4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80048b6:	e175      	b.n	8004ba4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048b8:	bf00      	nop
    return;
 80048ba:	e173      	b.n	8004ba4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	f040 814f 	bne.w	8004b64 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80048c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048ca:	f003 0310 	and.w	r3, r3, #16
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	f000 8148 	beq.w	8004b64 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80048d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048d8:	f003 0310 	and.w	r3, r3, #16
 80048dc:	2b00      	cmp	r3, #0
 80048de:	f000 8141 	beq.w	8004b64 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80048e2:	2300      	movs	r3, #0
 80048e4:	60bb      	str	r3, [r7, #8]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	60bb      	str	r3, [r7, #8]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	60bb      	str	r3, [r7, #8]
 80048f6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	695b      	ldr	r3, [r3, #20]
 80048fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004902:	2b40      	cmp	r3, #64	@ 0x40
 8004904:	f040 80b6 	bne.w	8004a74 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004914:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004918:	2b00      	cmp	r3, #0
 800491a:	f000 8145 	beq.w	8004ba8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004922:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004926:	429a      	cmp	r2, r3
 8004928:	f080 813e 	bcs.w	8004ba8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004932:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004938:	69db      	ldr	r3, [r3, #28]
 800493a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800493e:	f000 8088 	beq.w	8004a52 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	330c      	adds	r3, #12
 8004948:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800494c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004950:	e853 3f00 	ldrex	r3, [r3]
 8004954:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004958:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800495c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004960:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	330c      	adds	r3, #12
 800496a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800496e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004972:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004976:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800497a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800497e:	e841 2300 	strex	r3, r2, [r1]
 8004982:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004986:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800498a:	2b00      	cmp	r3, #0
 800498c:	d1d9      	bne.n	8004942 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	3314      	adds	r3, #20
 8004994:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004996:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004998:	e853 3f00 	ldrex	r3, [r3]
 800499c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800499e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80049a0:	f023 0301 	bic.w	r3, r3, #1
 80049a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	3314      	adds	r3, #20
 80049ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80049b2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80049b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80049ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80049be:	e841 2300 	strex	r3, r2, [r1]
 80049c2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80049c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d1e1      	bne.n	800498e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	3314      	adds	r3, #20
 80049d0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80049d4:	e853 3f00 	ldrex	r3, [r3]
 80049d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80049da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80049dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80049e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	3314      	adds	r3, #20
 80049ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80049ee:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80049f0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80049f4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80049f6:	e841 2300 	strex	r3, r2, [r1]
 80049fa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80049fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d1e3      	bne.n	80049ca <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2220      	movs	r2, #32
 8004a06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	330c      	adds	r3, #12
 8004a16:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a1a:	e853 3f00 	ldrex	r3, [r3]
 8004a1e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004a20:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a22:	f023 0310 	bic.w	r3, r3, #16
 8004a26:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	330c      	adds	r3, #12
 8004a30:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004a34:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004a36:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a38:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004a3a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004a3c:	e841 2300 	strex	r3, r2, [r1]
 8004a40:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004a42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d1e3      	bne.n	8004a10 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f7fc fe63 	bl	8001718 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2202      	movs	r2, #2
 8004a56:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	1ad3      	subs	r3, r2, r3
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	4619      	mov	r1, r3
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f000 f8c1 	bl	8004bf0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004a6e:	e09b      	b.n	8004ba8 <HAL_UART_IRQHandler+0x518>
 8004a70:	08004d81 	.word	0x08004d81
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	1ad3      	subs	r3, r2, r3
 8004a80:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	f000 808e 	beq.w	8004bac <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004a90:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	f000 8089 	beq.w	8004bac <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	330c      	adds	r3, #12
 8004aa0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004aa4:	e853 3f00 	ldrex	r3, [r3]
 8004aa8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004aaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004aac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ab0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	330c      	adds	r3, #12
 8004aba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004abe:	647a      	str	r2, [r7, #68]	@ 0x44
 8004ac0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004ac4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ac6:	e841 2300 	strex	r3, r2, [r1]
 8004aca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004acc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d1e3      	bne.n	8004a9a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	3314      	adds	r3, #20
 8004ad8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004adc:	e853 3f00 	ldrex	r3, [r3]
 8004ae0:	623b      	str	r3, [r7, #32]
   return(result);
 8004ae2:	6a3b      	ldr	r3, [r7, #32]
 8004ae4:	f023 0301 	bic.w	r3, r3, #1
 8004ae8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	3314      	adds	r3, #20
 8004af2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004af6:	633a      	str	r2, [r7, #48]	@ 0x30
 8004af8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004afa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004afc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004afe:	e841 2300 	strex	r3, r2, [r1]
 8004b02:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004b04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d1e3      	bne.n	8004ad2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2220      	movs	r2, #32
 8004b0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	330c      	adds	r3, #12
 8004b1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	e853 3f00 	ldrex	r3, [r3]
 8004b26:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f023 0310 	bic.w	r3, r3, #16
 8004b2e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	330c      	adds	r3, #12
 8004b38:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004b3c:	61fa      	str	r2, [r7, #28]
 8004b3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b40:	69b9      	ldr	r1, [r7, #24]
 8004b42:	69fa      	ldr	r2, [r7, #28]
 8004b44:	e841 2300 	strex	r3, r2, [r1]
 8004b48:	617b      	str	r3, [r7, #20]
   return(result);
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d1e3      	bne.n	8004b18 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2202      	movs	r2, #2
 8004b54:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004b56:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004b5a:	4619      	mov	r1, r3
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f000 f847 	bl	8004bf0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004b62:	e023      	b.n	8004bac <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004b64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d009      	beq.n	8004b84 <HAL_UART_IRQHandler+0x4f4>
 8004b70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d003      	beq.n	8004b84 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f000 f913 	bl	8004da8 <UART_Transmit_IT>
    return;
 8004b82:	e014      	b.n	8004bae <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004b84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d00e      	beq.n	8004bae <HAL_UART_IRQHandler+0x51e>
 8004b90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d008      	beq.n	8004bae <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f000 f953 	bl	8004e48 <UART_EndTransmit_IT>
    return;
 8004ba2:	e004      	b.n	8004bae <HAL_UART_IRQHandler+0x51e>
    return;
 8004ba4:	bf00      	nop
 8004ba6:	e002      	b.n	8004bae <HAL_UART_IRQHandler+0x51e>
      return;
 8004ba8:	bf00      	nop
 8004baa:	e000      	b.n	8004bae <HAL_UART_IRQHandler+0x51e>
      return;
 8004bac:	bf00      	nop
  }
}
 8004bae:	37e8      	adds	r7, #232	@ 0xe8
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}

08004bb4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b083      	sub	sp, #12
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004bbc:	bf00      	nop
 8004bbe:	370c      	adds	r7, #12
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr

08004bc8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b083      	sub	sp, #12
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004bd0:	bf00      	nop
 8004bd2:	370c      	adds	r7, #12
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr

08004bdc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b083      	sub	sp, #12
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004be4:	bf00      	nop
 8004be6:	370c      	adds	r7, #12
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr

08004bf0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b083      	sub	sp, #12
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	460b      	mov	r3, r1
 8004bfa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004bfc:	bf00      	nop
 8004bfe:	370c      	adds	r7, #12
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr

08004c08 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b086      	sub	sp, #24
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	60f8      	str	r0, [r7, #12]
 8004c10:	60b9      	str	r1, [r7, #8]
 8004c12:	603b      	str	r3, [r7, #0]
 8004c14:	4613      	mov	r3, r2
 8004c16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c18:	e03b      	b.n	8004c92 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c1a:	6a3b      	ldr	r3, [r7, #32]
 8004c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c20:	d037      	beq.n	8004c92 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c22:	f7fc fb31 	bl	8001288 <HAL_GetTick>
 8004c26:	4602      	mov	r2, r0
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	1ad3      	subs	r3, r2, r3
 8004c2c:	6a3a      	ldr	r2, [r7, #32]
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d302      	bcc.n	8004c38 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c32:	6a3b      	ldr	r3, [r7, #32]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d101      	bne.n	8004c3c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004c38:	2303      	movs	r3, #3
 8004c3a:	e03a      	b.n	8004cb2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	68db      	ldr	r3, [r3, #12]
 8004c42:	f003 0304 	and.w	r3, r3, #4
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d023      	beq.n	8004c92 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	2b80      	cmp	r3, #128	@ 0x80
 8004c4e:	d020      	beq.n	8004c92 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	2b40      	cmp	r3, #64	@ 0x40
 8004c54:	d01d      	beq.n	8004c92 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 0308 	and.w	r3, r3, #8
 8004c60:	2b08      	cmp	r3, #8
 8004c62:	d116      	bne.n	8004c92 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004c64:	2300      	movs	r3, #0
 8004c66:	617b      	str	r3, [r7, #20]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	617b      	str	r3, [r7, #20]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	617b      	str	r3, [r7, #20]
 8004c78:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c7a:	68f8      	ldr	r0, [r7, #12]
 8004c7c:	f000 f81d 	bl	8004cba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2208      	movs	r2, #8
 8004c84:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e00f      	b.n	8004cb2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	4013      	ands	r3, r2
 8004c9c:	68ba      	ldr	r2, [r7, #8]
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	bf0c      	ite	eq
 8004ca2:	2301      	moveq	r3, #1
 8004ca4:	2300      	movne	r3, #0
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	461a      	mov	r2, r3
 8004caa:	79fb      	ldrb	r3, [r7, #7]
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d0b4      	beq.n	8004c1a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004cb0:	2300      	movs	r3, #0
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3718      	adds	r7, #24
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}

08004cba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004cba:	b480      	push	{r7}
 8004cbc:	b095      	sub	sp, #84	@ 0x54
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	330c      	adds	r3, #12
 8004cc8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ccc:	e853 3f00 	ldrex	r3, [r3]
 8004cd0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cd4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004cd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	330c      	adds	r3, #12
 8004ce0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004ce2:	643a      	str	r2, [r7, #64]	@ 0x40
 8004ce4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004ce8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004cea:	e841 2300 	strex	r3, r2, [r1]
 8004cee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004cf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d1e5      	bne.n	8004cc2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	3314      	adds	r3, #20
 8004cfc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cfe:	6a3b      	ldr	r3, [r7, #32]
 8004d00:	e853 3f00 	ldrex	r3, [r3]
 8004d04:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d06:	69fb      	ldr	r3, [r7, #28]
 8004d08:	f023 0301 	bic.w	r3, r3, #1
 8004d0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	3314      	adds	r3, #20
 8004d14:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004d16:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d18:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d1a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d1c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d1e:	e841 2300 	strex	r3, r2, [r1]
 8004d22:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d1e5      	bne.n	8004cf6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d119      	bne.n	8004d66 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	330c      	adds	r3, #12
 8004d38:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	e853 3f00 	ldrex	r3, [r3]
 8004d40:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	f023 0310 	bic.w	r3, r3, #16
 8004d48:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	330c      	adds	r3, #12
 8004d50:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004d52:	61ba      	str	r2, [r7, #24]
 8004d54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d56:	6979      	ldr	r1, [r7, #20]
 8004d58:	69ba      	ldr	r2, [r7, #24]
 8004d5a:	e841 2300 	strex	r3, r2, [r1]
 8004d5e:	613b      	str	r3, [r7, #16]
   return(result);
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d1e5      	bne.n	8004d32 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2220      	movs	r2, #32
 8004d6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004d74:	bf00      	nop
 8004d76:	3754      	adds	r7, #84	@ 0x54
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr

08004d80 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b084      	sub	sp, #16
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d8c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2200      	movs	r2, #0
 8004d92:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2200      	movs	r2, #0
 8004d98:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d9a:	68f8      	ldr	r0, [r7, #12]
 8004d9c:	f7ff ff1e 	bl	8004bdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004da0:	bf00      	nop
 8004da2:	3710      	adds	r7, #16
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b085      	sub	sp, #20
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	2b21      	cmp	r3, #33	@ 0x21
 8004dba:	d13e      	bne.n	8004e3a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dc4:	d114      	bne.n	8004df0 <UART_Transmit_IT+0x48>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	691b      	ldr	r3, [r3, #16]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d110      	bne.n	8004df0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a1b      	ldr	r3, [r3, #32]
 8004dd2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	881b      	ldrh	r3, [r3, #0]
 8004dd8:	461a      	mov	r2, r3
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004de2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6a1b      	ldr	r3, [r3, #32]
 8004de8:	1c9a      	adds	r2, r3, #2
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	621a      	str	r2, [r3, #32]
 8004dee:	e008      	b.n	8004e02 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6a1b      	ldr	r3, [r3, #32]
 8004df4:	1c59      	adds	r1, r3, #1
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	6211      	str	r1, [r2, #32]
 8004dfa:	781a      	ldrb	r2, [r3, #0]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	3b01      	subs	r3, #1
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	4619      	mov	r1, r3
 8004e10:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d10f      	bne.n	8004e36 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	68da      	ldr	r2, [r3, #12]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004e24:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	68da      	ldr	r2, [r3, #12]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004e34:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004e36:	2300      	movs	r3, #0
 8004e38:	e000      	b.n	8004e3c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004e3a:	2302      	movs	r3, #2
  }
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3714      	adds	r7, #20
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr

08004e48 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b082      	sub	sp, #8
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	68da      	ldr	r2, [r3, #12]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e5e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2220      	movs	r2, #32
 8004e64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f7ff fea3 	bl	8004bb4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004e6e:	2300      	movs	r3, #0
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3708      	adds	r7, #8
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}

08004e78 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b08c      	sub	sp, #48	@ 0x30
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	2b22      	cmp	r3, #34	@ 0x22
 8004e8a:	f040 80ae 	bne.w	8004fea <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e96:	d117      	bne.n	8004ec8 <UART_Receive_IT+0x50>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	691b      	ldr	r3, [r3, #16]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d113      	bne.n	8004ec8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ea8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eb6:	b29a      	uxth	r2, r3
 8004eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eba:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ec0:	1c9a      	adds	r2, r3, #2
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	629a      	str	r2, [r3, #40]	@ 0x28
 8004ec6:	e026      	b.n	8004f16 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ecc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004eda:	d007      	beq.n	8004eec <UART_Receive_IT+0x74>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d10a      	bne.n	8004efa <UART_Receive_IT+0x82>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	691b      	ldr	r3, [r3, #16]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d106      	bne.n	8004efa <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	b2da      	uxtb	r2, r3
 8004ef4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ef6:	701a      	strb	r2, [r3, #0]
 8004ef8:	e008      	b.n	8004f0c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f06:	b2da      	uxtb	r2, r3
 8004f08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f0a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f10:	1c5a      	adds	r2, r3, #1
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	3b01      	subs	r3, #1
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	687a      	ldr	r2, [r7, #4]
 8004f22:	4619      	mov	r1, r3
 8004f24:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d15d      	bne.n	8004fe6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	68da      	ldr	r2, [r3, #12]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f022 0220 	bic.w	r2, r2, #32
 8004f38:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	68da      	ldr	r2, [r3, #12]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004f48:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	695a      	ldr	r2, [r3, #20]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f022 0201 	bic.w	r2, r2, #1
 8004f58:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2220      	movs	r2, #32
 8004f5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d135      	bne.n	8004fdc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	330c      	adds	r3, #12
 8004f7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	e853 3f00 	ldrex	r3, [r3]
 8004f84:	613b      	str	r3, [r7, #16]
   return(result);
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	f023 0310 	bic.w	r3, r3, #16
 8004f8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	330c      	adds	r3, #12
 8004f94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f96:	623a      	str	r2, [r7, #32]
 8004f98:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f9a:	69f9      	ldr	r1, [r7, #28]
 8004f9c:	6a3a      	ldr	r2, [r7, #32]
 8004f9e:	e841 2300 	strex	r3, r2, [r1]
 8004fa2:	61bb      	str	r3, [r7, #24]
   return(result);
 8004fa4:	69bb      	ldr	r3, [r7, #24]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d1e5      	bne.n	8004f76 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 0310 	and.w	r3, r3, #16
 8004fb4:	2b10      	cmp	r3, #16
 8004fb6:	d10a      	bne.n	8004fce <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004fb8:	2300      	movs	r3, #0
 8004fba:	60fb      	str	r3, [r7, #12]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	60fb      	str	r3, [r7, #12]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	60fb      	str	r3, [r7, #12]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004fd2:	4619      	mov	r1, r3
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f7ff fe0b 	bl	8004bf0 <HAL_UARTEx_RxEventCallback>
 8004fda:	e002      	b.n	8004fe2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	f7ff fdf3 	bl	8004bc8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	e002      	b.n	8004fec <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	e000      	b.n	8004fec <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004fea:	2302      	movs	r3, #2
  }
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	3730      	adds	r7, #48	@ 0x30
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}

08004ff4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ff4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ff8:	b0c0      	sub	sp, #256	@ 0x100
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	691b      	ldr	r3, [r3, #16]
 8005008:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800500c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005010:	68d9      	ldr	r1, [r3, #12]
 8005012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	ea40 0301 	orr.w	r3, r0, r1
 800501c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800501e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005022:	689a      	ldr	r2, [r3, #8]
 8005024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005028:	691b      	ldr	r3, [r3, #16]
 800502a:	431a      	orrs	r2, r3
 800502c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005030:	695b      	ldr	r3, [r3, #20]
 8005032:	431a      	orrs	r2, r3
 8005034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005038:	69db      	ldr	r3, [r3, #28]
 800503a:	4313      	orrs	r3, r2
 800503c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800504c:	f021 010c 	bic.w	r1, r1, #12
 8005050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800505a:	430b      	orrs	r3, r1
 800505c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800505e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	695b      	ldr	r3, [r3, #20]
 8005066:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800506a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800506e:	6999      	ldr	r1, [r3, #24]
 8005070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	ea40 0301 	orr.w	r3, r0, r1
 800507a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800507c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	4b8f      	ldr	r3, [pc, #572]	@ (80052c0 <UART_SetConfig+0x2cc>)
 8005084:	429a      	cmp	r2, r3
 8005086:	d005      	beq.n	8005094 <UART_SetConfig+0xa0>
 8005088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	4b8d      	ldr	r3, [pc, #564]	@ (80052c4 <UART_SetConfig+0x2d0>)
 8005090:	429a      	cmp	r2, r3
 8005092:	d104      	bne.n	800509e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005094:	f7fd f8fa 	bl	800228c <HAL_RCC_GetPCLK2Freq>
 8005098:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800509c:	e003      	b.n	80050a6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800509e:	f7fd f8e1 	bl	8002264 <HAL_RCC_GetPCLK1Freq>
 80050a2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050aa:	69db      	ldr	r3, [r3, #28]
 80050ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050b0:	f040 810c 	bne.w	80052cc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80050b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050b8:	2200      	movs	r2, #0
 80050ba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80050be:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80050c2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80050c6:	4622      	mov	r2, r4
 80050c8:	462b      	mov	r3, r5
 80050ca:	1891      	adds	r1, r2, r2
 80050cc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80050ce:	415b      	adcs	r3, r3
 80050d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80050d2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80050d6:	4621      	mov	r1, r4
 80050d8:	eb12 0801 	adds.w	r8, r2, r1
 80050dc:	4629      	mov	r1, r5
 80050de:	eb43 0901 	adc.w	r9, r3, r1
 80050e2:	f04f 0200 	mov.w	r2, #0
 80050e6:	f04f 0300 	mov.w	r3, #0
 80050ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80050ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80050f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80050f6:	4690      	mov	r8, r2
 80050f8:	4699      	mov	r9, r3
 80050fa:	4623      	mov	r3, r4
 80050fc:	eb18 0303 	adds.w	r3, r8, r3
 8005100:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005104:	462b      	mov	r3, r5
 8005106:	eb49 0303 	adc.w	r3, r9, r3
 800510a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800510e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800511a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800511e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005122:	460b      	mov	r3, r1
 8005124:	18db      	adds	r3, r3, r3
 8005126:	653b      	str	r3, [r7, #80]	@ 0x50
 8005128:	4613      	mov	r3, r2
 800512a:	eb42 0303 	adc.w	r3, r2, r3
 800512e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005130:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005134:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005138:	f7fb f8d2 	bl	80002e0 <__aeabi_uldivmod>
 800513c:	4602      	mov	r2, r0
 800513e:	460b      	mov	r3, r1
 8005140:	4b61      	ldr	r3, [pc, #388]	@ (80052c8 <UART_SetConfig+0x2d4>)
 8005142:	fba3 2302 	umull	r2, r3, r3, r2
 8005146:	095b      	lsrs	r3, r3, #5
 8005148:	011c      	lsls	r4, r3, #4
 800514a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800514e:	2200      	movs	r2, #0
 8005150:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005154:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005158:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800515c:	4642      	mov	r2, r8
 800515e:	464b      	mov	r3, r9
 8005160:	1891      	adds	r1, r2, r2
 8005162:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005164:	415b      	adcs	r3, r3
 8005166:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005168:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800516c:	4641      	mov	r1, r8
 800516e:	eb12 0a01 	adds.w	sl, r2, r1
 8005172:	4649      	mov	r1, r9
 8005174:	eb43 0b01 	adc.w	fp, r3, r1
 8005178:	f04f 0200 	mov.w	r2, #0
 800517c:	f04f 0300 	mov.w	r3, #0
 8005180:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005184:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005188:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800518c:	4692      	mov	sl, r2
 800518e:	469b      	mov	fp, r3
 8005190:	4643      	mov	r3, r8
 8005192:	eb1a 0303 	adds.w	r3, sl, r3
 8005196:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800519a:	464b      	mov	r3, r9
 800519c:	eb4b 0303 	adc.w	r3, fp, r3
 80051a0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80051a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80051b0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80051b4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80051b8:	460b      	mov	r3, r1
 80051ba:	18db      	adds	r3, r3, r3
 80051bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80051be:	4613      	mov	r3, r2
 80051c0:	eb42 0303 	adc.w	r3, r2, r3
 80051c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80051c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80051ca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80051ce:	f7fb f887 	bl	80002e0 <__aeabi_uldivmod>
 80051d2:	4602      	mov	r2, r0
 80051d4:	460b      	mov	r3, r1
 80051d6:	4611      	mov	r1, r2
 80051d8:	4b3b      	ldr	r3, [pc, #236]	@ (80052c8 <UART_SetConfig+0x2d4>)
 80051da:	fba3 2301 	umull	r2, r3, r3, r1
 80051de:	095b      	lsrs	r3, r3, #5
 80051e0:	2264      	movs	r2, #100	@ 0x64
 80051e2:	fb02 f303 	mul.w	r3, r2, r3
 80051e6:	1acb      	subs	r3, r1, r3
 80051e8:	00db      	lsls	r3, r3, #3
 80051ea:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80051ee:	4b36      	ldr	r3, [pc, #216]	@ (80052c8 <UART_SetConfig+0x2d4>)
 80051f0:	fba3 2302 	umull	r2, r3, r3, r2
 80051f4:	095b      	lsrs	r3, r3, #5
 80051f6:	005b      	lsls	r3, r3, #1
 80051f8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80051fc:	441c      	add	r4, r3
 80051fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005202:	2200      	movs	r2, #0
 8005204:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005208:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800520c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005210:	4642      	mov	r2, r8
 8005212:	464b      	mov	r3, r9
 8005214:	1891      	adds	r1, r2, r2
 8005216:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005218:	415b      	adcs	r3, r3
 800521a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800521c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005220:	4641      	mov	r1, r8
 8005222:	1851      	adds	r1, r2, r1
 8005224:	6339      	str	r1, [r7, #48]	@ 0x30
 8005226:	4649      	mov	r1, r9
 8005228:	414b      	adcs	r3, r1
 800522a:	637b      	str	r3, [r7, #52]	@ 0x34
 800522c:	f04f 0200 	mov.w	r2, #0
 8005230:	f04f 0300 	mov.w	r3, #0
 8005234:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005238:	4659      	mov	r1, fp
 800523a:	00cb      	lsls	r3, r1, #3
 800523c:	4651      	mov	r1, sl
 800523e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005242:	4651      	mov	r1, sl
 8005244:	00ca      	lsls	r2, r1, #3
 8005246:	4610      	mov	r0, r2
 8005248:	4619      	mov	r1, r3
 800524a:	4603      	mov	r3, r0
 800524c:	4642      	mov	r2, r8
 800524e:	189b      	adds	r3, r3, r2
 8005250:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005254:	464b      	mov	r3, r9
 8005256:	460a      	mov	r2, r1
 8005258:	eb42 0303 	adc.w	r3, r2, r3
 800525c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	2200      	movs	r2, #0
 8005268:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800526c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005270:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005274:	460b      	mov	r3, r1
 8005276:	18db      	adds	r3, r3, r3
 8005278:	62bb      	str	r3, [r7, #40]	@ 0x28
 800527a:	4613      	mov	r3, r2
 800527c:	eb42 0303 	adc.w	r3, r2, r3
 8005280:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005282:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005286:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800528a:	f7fb f829 	bl	80002e0 <__aeabi_uldivmod>
 800528e:	4602      	mov	r2, r0
 8005290:	460b      	mov	r3, r1
 8005292:	4b0d      	ldr	r3, [pc, #52]	@ (80052c8 <UART_SetConfig+0x2d4>)
 8005294:	fba3 1302 	umull	r1, r3, r3, r2
 8005298:	095b      	lsrs	r3, r3, #5
 800529a:	2164      	movs	r1, #100	@ 0x64
 800529c:	fb01 f303 	mul.w	r3, r1, r3
 80052a0:	1ad3      	subs	r3, r2, r3
 80052a2:	00db      	lsls	r3, r3, #3
 80052a4:	3332      	adds	r3, #50	@ 0x32
 80052a6:	4a08      	ldr	r2, [pc, #32]	@ (80052c8 <UART_SetConfig+0x2d4>)
 80052a8:	fba2 2303 	umull	r2, r3, r2, r3
 80052ac:	095b      	lsrs	r3, r3, #5
 80052ae:	f003 0207 	and.w	r2, r3, #7
 80052b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4422      	add	r2, r4
 80052ba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80052bc:	e106      	b.n	80054cc <UART_SetConfig+0x4d8>
 80052be:	bf00      	nop
 80052c0:	40011000 	.word	0x40011000
 80052c4:	40011400 	.word	0x40011400
 80052c8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80052cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052d0:	2200      	movs	r2, #0
 80052d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80052d6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80052da:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80052de:	4642      	mov	r2, r8
 80052e0:	464b      	mov	r3, r9
 80052e2:	1891      	adds	r1, r2, r2
 80052e4:	6239      	str	r1, [r7, #32]
 80052e6:	415b      	adcs	r3, r3
 80052e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80052ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80052ee:	4641      	mov	r1, r8
 80052f0:	1854      	adds	r4, r2, r1
 80052f2:	4649      	mov	r1, r9
 80052f4:	eb43 0501 	adc.w	r5, r3, r1
 80052f8:	f04f 0200 	mov.w	r2, #0
 80052fc:	f04f 0300 	mov.w	r3, #0
 8005300:	00eb      	lsls	r3, r5, #3
 8005302:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005306:	00e2      	lsls	r2, r4, #3
 8005308:	4614      	mov	r4, r2
 800530a:	461d      	mov	r5, r3
 800530c:	4643      	mov	r3, r8
 800530e:	18e3      	adds	r3, r4, r3
 8005310:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005314:	464b      	mov	r3, r9
 8005316:	eb45 0303 	adc.w	r3, r5, r3
 800531a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800531e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800532a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800532e:	f04f 0200 	mov.w	r2, #0
 8005332:	f04f 0300 	mov.w	r3, #0
 8005336:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800533a:	4629      	mov	r1, r5
 800533c:	008b      	lsls	r3, r1, #2
 800533e:	4621      	mov	r1, r4
 8005340:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005344:	4621      	mov	r1, r4
 8005346:	008a      	lsls	r2, r1, #2
 8005348:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800534c:	f7fa ffc8 	bl	80002e0 <__aeabi_uldivmod>
 8005350:	4602      	mov	r2, r0
 8005352:	460b      	mov	r3, r1
 8005354:	4b60      	ldr	r3, [pc, #384]	@ (80054d8 <UART_SetConfig+0x4e4>)
 8005356:	fba3 2302 	umull	r2, r3, r3, r2
 800535a:	095b      	lsrs	r3, r3, #5
 800535c:	011c      	lsls	r4, r3, #4
 800535e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005362:	2200      	movs	r2, #0
 8005364:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005368:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800536c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005370:	4642      	mov	r2, r8
 8005372:	464b      	mov	r3, r9
 8005374:	1891      	adds	r1, r2, r2
 8005376:	61b9      	str	r1, [r7, #24]
 8005378:	415b      	adcs	r3, r3
 800537a:	61fb      	str	r3, [r7, #28]
 800537c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005380:	4641      	mov	r1, r8
 8005382:	1851      	adds	r1, r2, r1
 8005384:	6139      	str	r1, [r7, #16]
 8005386:	4649      	mov	r1, r9
 8005388:	414b      	adcs	r3, r1
 800538a:	617b      	str	r3, [r7, #20]
 800538c:	f04f 0200 	mov.w	r2, #0
 8005390:	f04f 0300 	mov.w	r3, #0
 8005394:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005398:	4659      	mov	r1, fp
 800539a:	00cb      	lsls	r3, r1, #3
 800539c:	4651      	mov	r1, sl
 800539e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053a2:	4651      	mov	r1, sl
 80053a4:	00ca      	lsls	r2, r1, #3
 80053a6:	4610      	mov	r0, r2
 80053a8:	4619      	mov	r1, r3
 80053aa:	4603      	mov	r3, r0
 80053ac:	4642      	mov	r2, r8
 80053ae:	189b      	adds	r3, r3, r2
 80053b0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80053b4:	464b      	mov	r3, r9
 80053b6:	460a      	mov	r2, r1
 80053b8:	eb42 0303 	adc.w	r3, r2, r3
 80053bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80053c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80053ca:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80053cc:	f04f 0200 	mov.w	r2, #0
 80053d0:	f04f 0300 	mov.w	r3, #0
 80053d4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80053d8:	4649      	mov	r1, r9
 80053da:	008b      	lsls	r3, r1, #2
 80053dc:	4641      	mov	r1, r8
 80053de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053e2:	4641      	mov	r1, r8
 80053e4:	008a      	lsls	r2, r1, #2
 80053e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80053ea:	f7fa ff79 	bl	80002e0 <__aeabi_uldivmod>
 80053ee:	4602      	mov	r2, r0
 80053f0:	460b      	mov	r3, r1
 80053f2:	4611      	mov	r1, r2
 80053f4:	4b38      	ldr	r3, [pc, #224]	@ (80054d8 <UART_SetConfig+0x4e4>)
 80053f6:	fba3 2301 	umull	r2, r3, r3, r1
 80053fa:	095b      	lsrs	r3, r3, #5
 80053fc:	2264      	movs	r2, #100	@ 0x64
 80053fe:	fb02 f303 	mul.w	r3, r2, r3
 8005402:	1acb      	subs	r3, r1, r3
 8005404:	011b      	lsls	r3, r3, #4
 8005406:	3332      	adds	r3, #50	@ 0x32
 8005408:	4a33      	ldr	r2, [pc, #204]	@ (80054d8 <UART_SetConfig+0x4e4>)
 800540a:	fba2 2303 	umull	r2, r3, r2, r3
 800540e:	095b      	lsrs	r3, r3, #5
 8005410:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005414:	441c      	add	r4, r3
 8005416:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800541a:	2200      	movs	r2, #0
 800541c:	673b      	str	r3, [r7, #112]	@ 0x70
 800541e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005420:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005424:	4642      	mov	r2, r8
 8005426:	464b      	mov	r3, r9
 8005428:	1891      	adds	r1, r2, r2
 800542a:	60b9      	str	r1, [r7, #8]
 800542c:	415b      	adcs	r3, r3
 800542e:	60fb      	str	r3, [r7, #12]
 8005430:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005434:	4641      	mov	r1, r8
 8005436:	1851      	adds	r1, r2, r1
 8005438:	6039      	str	r1, [r7, #0]
 800543a:	4649      	mov	r1, r9
 800543c:	414b      	adcs	r3, r1
 800543e:	607b      	str	r3, [r7, #4]
 8005440:	f04f 0200 	mov.w	r2, #0
 8005444:	f04f 0300 	mov.w	r3, #0
 8005448:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800544c:	4659      	mov	r1, fp
 800544e:	00cb      	lsls	r3, r1, #3
 8005450:	4651      	mov	r1, sl
 8005452:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005456:	4651      	mov	r1, sl
 8005458:	00ca      	lsls	r2, r1, #3
 800545a:	4610      	mov	r0, r2
 800545c:	4619      	mov	r1, r3
 800545e:	4603      	mov	r3, r0
 8005460:	4642      	mov	r2, r8
 8005462:	189b      	adds	r3, r3, r2
 8005464:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005466:	464b      	mov	r3, r9
 8005468:	460a      	mov	r2, r1
 800546a:	eb42 0303 	adc.w	r3, r2, r3
 800546e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	663b      	str	r3, [r7, #96]	@ 0x60
 800547a:	667a      	str	r2, [r7, #100]	@ 0x64
 800547c:	f04f 0200 	mov.w	r2, #0
 8005480:	f04f 0300 	mov.w	r3, #0
 8005484:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005488:	4649      	mov	r1, r9
 800548a:	008b      	lsls	r3, r1, #2
 800548c:	4641      	mov	r1, r8
 800548e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005492:	4641      	mov	r1, r8
 8005494:	008a      	lsls	r2, r1, #2
 8005496:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800549a:	f7fa ff21 	bl	80002e0 <__aeabi_uldivmod>
 800549e:	4602      	mov	r2, r0
 80054a0:	460b      	mov	r3, r1
 80054a2:	4b0d      	ldr	r3, [pc, #52]	@ (80054d8 <UART_SetConfig+0x4e4>)
 80054a4:	fba3 1302 	umull	r1, r3, r3, r2
 80054a8:	095b      	lsrs	r3, r3, #5
 80054aa:	2164      	movs	r1, #100	@ 0x64
 80054ac:	fb01 f303 	mul.w	r3, r1, r3
 80054b0:	1ad3      	subs	r3, r2, r3
 80054b2:	011b      	lsls	r3, r3, #4
 80054b4:	3332      	adds	r3, #50	@ 0x32
 80054b6:	4a08      	ldr	r2, [pc, #32]	@ (80054d8 <UART_SetConfig+0x4e4>)
 80054b8:	fba2 2303 	umull	r2, r3, r2, r3
 80054bc:	095b      	lsrs	r3, r3, #5
 80054be:	f003 020f 	and.w	r2, r3, #15
 80054c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4422      	add	r2, r4
 80054ca:	609a      	str	r2, [r3, #8]
}
 80054cc:	bf00      	nop
 80054ce:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80054d2:	46bd      	mov	sp, r7
 80054d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054d8:	51eb851f 	.word	0x51eb851f

080054dc <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80054dc:	b084      	sub	sp, #16
 80054de:	b480      	push	{r7}
 80054e0:	b085      	sub	sp, #20
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	6078      	str	r0, [r7, #4]
 80054e6:	f107 001c 	add.w	r0, r7, #28
 80054ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80054ee:	2300      	movs	r3, #0
 80054f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80054f2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80054f4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80054f6:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80054f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 80054fa:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80054fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 80054fe:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8005500:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8005502:	431a      	orrs	r2, r3
             Init.ClockDiv
 8005504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8005506:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8005508:	68fa      	ldr	r2, [r7, #12]
 800550a:	4313      	orrs	r3, r2
 800550c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 8005516:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800551a:	68fa      	ldr	r2, [r7, #12]
 800551c:	431a      	orrs	r2, r3
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005522:	2300      	movs	r3, #0
}
 8005524:	4618      	mov	r0, r3
 8005526:	3714      	adds	r7, #20
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	b004      	add	sp, #16
 8005530:	4770      	bx	lr

08005532 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8005532:	b480      	push	{r7}
 8005534:	b083      	sub	sp, #12
 8005536:	af00      	add	r7, sp, #0
 8005538:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8005540:	4618      	mov	r0, r3
 8005542:	370c      	adds	r7, #12
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr

0800554c <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800554c:	b480      	push	{r7}
 800554e:	b083      	sub	sp, #12
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
 8005554:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8005560:	2300      	movs	r3, #0
}
 8005562:	4618      	mov	r0, r3
 8005564:	370c      	adds	r7, #12
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr

0800556e <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800556e:	b480      	push	{r7}
 8005570:	b083      	sub	sp, #12
 8005572:	af00      	add	r7, sp, #0
 8005574:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2203      	movs	r2, #3
 800557a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800557c:	2300      	movs	r3, #0
}
 800557e:	4618      	mov	r0, r3
 8005580:	370c      	adds	r7, #12
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr

0800558a <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800558a:	b480      	push	{r7}
 800558c:	b083      	sub	sp, #12
 800558e:	af00      	add	r7, sp, #0
 8005590:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 0303 	and.w	r3, r3, #3
}
 800559a:	4618      	mov	r0, r3
 800559c:	370c      	adds	r7, #12
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr

080055a6 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80055a6:	b480      	push	{r7}
 80055a8:	b085      	sub	sp, #20
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	6078      	str	r0, [r7, #4]
 80055ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80055b0:	2300      	movs	r3, #0
 80055b2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80055c4:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80055ca:	431a      	orrs	r2, r3
                       Command->CPSM);
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80055d0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80055d2:	68fa      	ldr	r2, [r7, #12]
 80055d4:	4313      	orrs	r3, r2
 80055d6:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	68db      	ldr	r3, [r3, #12]
 80055dc:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80055e0:	f023 030f 	bic.w	r3, r3, #15
 80055e4:	68fa      	ldr	r2, [r7, #12]
 80055e6:	431a      	orrs	r2, r3
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80055ec:	2300      	movs	r3, #0
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3714      	adds	r7, #20
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr

080055fa <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80055fa:	b480      	push	{r7}
 80055fc:	b083      	sub	sp, #12
 80055fe:	af00      	add	r7, sp, #0
 8005600:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	691b      	ldr	r3, [r3, #16]
 8005606:	b2db      	uxtb	r3, r3
}
 8005608:	4618      	mov	r0, r3
 800560a:	370c      	adds	r7, #12
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr

08005614 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8005614:	b480      	push	{r7}
 8005616:	b085      	sub	sp, #20
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	3314      	adds	r3, #20
 8005622:	461a      	mov	r2, r3
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	4413      	add	r3, r2
 8005628:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
}  
 800562e:	4618      	mov	r0, r3
 8005630:	3714      	adds	r7, #20
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr

0800563a <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800563a:	b480      	push	{r7}
 800563c:	b085      	sub	sp, #20
 800563e:	af00      	add	r7, sp, #0
 8005640:	6078      	str	r0, [r7, #4]
 8005642:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005644:	2300      	movs	r3, #0
 8005646:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	685a      	ldr	r2, [r3, #4]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005660:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8005666:	431a      	orrs	r2, r3
                       Data->DPSM);
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800566c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800566e:	68fa      	ldr	r2, [r7, #12]
 8005670:	4313      	orrs	r3, r2
 8005672:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005678:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	431a      	orrs	r2, r3
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8005684:	2300      	movs	r3, #0

}
 8005686:	4618      	mov	r0, r3
 8005688:	3714      	adds	r7, #20
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr

08005692 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8005692:	b580      	push	{r7, lr}
 8005694:	b088      	sub	sp, #32
 8005696:	af00      	add	r7, sp, #0
 8005698:	6078      	str	r0, [r7, #4]
 800569a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80056a0:	2310      	movs	r3, #16
 80056a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80056a4:	2340      	movs	r3, #64	@ 0x40
 80056a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80056a8:	2300      	movs	r3, #0
 80056aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80056ac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80056b0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80056b2:	f107 0308 	add.w	r3, r7, #8
 80056b6:	4619      	mov	r1, r3
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f7ff ff74 	bl	80055a6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80056be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056c2:	2110      	movs	r1, #16
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f000 f9d7 	bl	8005a78 <SDMMC_GetCmdResp1>
 80056ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80056cc:	69fb      	ldr	r3, [r7, #28]
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3720      	adds	r7, #32
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}

080056d6 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80056d6:	b580      	push	{r7, lr}
 80056d8:	b088      	sub	sp, #32
 80056da:	af00      	add	r7, sp, #0
 80056dc:	6078      	str	r0, [r7, #4]
 80056de:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80056e4:	2311      	movs	r3, #17
 80056e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80056e8:	2340      	movs	r3, #64	@ 0x40
 80056ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80056ec:	2300      	movs	r3, #0
 80056ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80056f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80056f4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80056f6:	f107 0308 	add.w	r3, r7, #8
 80056fa:	4619      	mov	r1, r3
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f7ff ff52 	bl	80055a6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005702:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005706:	2111      	movs	r1, #17
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f000 f9b5 	bl	8005a78 <SDMMC_GetCmdResp1>
 800570e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005710:	69fb      	ldr	r3, [r7, #28]
}
 8005712:	4618      	mov	r0, r3
 8005714:	3720      	adds	r7, #32
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}

0800571a <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800571a:	b580      	push	{r7, lr}
 800571c:	b088      	sub	sp, #32
 800571e:	af00      	add	r7, sp, #0
 8005720:	6078      	str	r0, [r7, #4]
 8005722:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8005728:	2312      	movs	r3, #18
 800572a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800572c:	2340      	movs	r3, #64	@ 0x40
 800572e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005730:	2300      	movs	r3, #0
 8005732:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005734:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005738:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800573a:	f107 0308 	add.w	r3, r7, #8
 800573e:	4619      	mov	r1, r3
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f7ff ff30 	bl	80055a6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005746:	f241 3288 	movw	r2, #5000	@ 0x1388
 800574a:	2112      	movs	r1, #18
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f000 f993 	bl	8005a78 <SDMMC_GetCmdResp1>
 8005752:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005754:	69fb      	ldr	r3, [r7, #28]
}
 8005756:	4618      	mov	r0, r3
 8005758:	3720      	adds	r7, #32
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}

0800575e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800575e:	b580      	push	{r7, lr}
 8005760:	b088      	sub	sp, #32
 8005762:	af00      	add	r7, sp, #0
 8005764:	6078      	str	r0, [r7, #4]
 8005766:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800576c:	2318      	movs	r3, #24
 800576e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005770:	2340      	movs	r3, #64	@ 0x40
 8005772:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005774:	2300      	movs	r3, #0
 8005776:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005778:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800577c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800577e:	f107 0308 	add.w	r3, r7, #8
 8005782:	4619      	mov	r1, r3
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f7ff ff0e 	bl	80055a6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800578a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800578e:	2118      	movs	r1, #24
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f000 f971 	bl	8005a78 <SDMMC_GetCmdResp1>
 8005796:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005798:	69fb      	ldr	r3, [r7, #28]
}
 800579a:	4618      	mov	r0, r3
 800579c:	3720      	adds	r7, #32
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}

080057a2 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80057a2:	b580      	push	{r7, lr}
 80057a4:	b088      	sub	sp, #32
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	6078      	str	r0, [r7, #4]
 80057aa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80057b0:	2319      	movs	r3, #25
 80057b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80057b4:	2340      	movs	r3, #64	@ 0x40
 80057b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80057b8:	2300      	movs	r3, #0
 80057ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80057bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80057c0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80057c2:	f107 0308 	add.w	r3, r7, #8
 80057c6:	4619      	mov	r1, r3
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f7ff feec 	bl	80055a6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80057ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057d2:	2119      	movs	r1, #25
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f000 f94f 	bl	8005a78 <SDMMC_GetCmdResp1>
 80057da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80057dc:	69fb      	ldr	r3, [r7, #28]
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3720      	adds	r7, #32
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
	...

080057e8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b088      	sub	sp, #32
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80057f0:	2300      	movs	r3, #0
 80057f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80057f4:	230c      	movs	r3, #12
 80057f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80057f8:	2340      	movs	r3, #64	@ 0x40
 80057fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80057fc:	2300      	movs	r3, #0
 80057fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005800:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005804:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005806:	f107 0308 	add.w	r3, r7, #8
 800580a:	4619      	mov	r1, r3
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f7ff feca 	bl	80055a6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8005812:	4a05      	ldr	r2, [pc, #20]	@ (8005828 <SDMMC_CmdStopTransfer+0x40>)
 8005814:	210c      	movs	r1, #12
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f000 f92e 	bl	8005a78 <SDMMC_GetCmdResp1>
 800581c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800581e:	69fb      	ldr	r3, [r7, #28]
}
 8005820:	4618      	mov	r0, r3
 8005822:	3720      	adds	r7, #32
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}
 8005828:	05f5e100 	.word	0x05f5e100

0800582c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b08a      	sub	sp, #40	@ 0x28
 8005830:	af00      	add	r7, sp, #0
 8005832:	60f8      	str	r0, [r7, #12]
 8005834:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800583c:	2307      	movs	r3, #7
 800583e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005840:	2340      	movs	r3, #64	@ 0x40
 8005842:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005844:	2300      	movs	r3, #0
 8005846:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005848:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800584c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800584e:	f107 0310 	add.w	r3, r7, #16
 8005852:	4619      	mov	r1, r3
 8005854:	68f8      	ldr	r0, [r7, #12]
 8005856:	f7ff fea6 	bl	80055a6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800585a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800585e:	2107      	movs	r1, #7
 8005860:	68f8      	ldr	r0, [r7, #12]
 8005862:	f000 f909 	bl	8005a78 <SDMMC_GetCmdResp1>
 8005866:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8005868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800586a:	4618      	mov	r0, r3
 800586c:	3728      	adds	r7, #40	@ 0x28
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}

08005872 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8005872:	b580      	push	{r7, lr}
 8005874:	b088      	sub	sp, #32
 8005876:	af00      	add	r7, sp, #0
 8005878:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800587a:	2300      	movs	r3, #0
 800587c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800587e:	2300      	movs	r3, #0
 8005880:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8005882:	2300      	movs	r3, #0
 8005884:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005886:	2300      	movs	r3, #0
 8005888:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800588a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800588e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005890:	f107 0308 	add.w	r3, r7, #8
 8005894:	4619      	mov	r1, r3
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f7ff fe85 	bl	80055a6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f000 fb23 	bl	8005ee8 <SDMMC_GetCmdError>
 80058a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80058a4:	69fb      	ldr	r3, [r7, #28]
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3720      	adds	r7, #32
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}

080058ae <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80058ae:	b580      	push	{r7, lr}
 80058b0:	b088      	sub	sp, #32
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80058b6:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 80058ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80058bc:	2308      	movs	r3, #8
 80058be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80058c0:	2340      	movs	r3, #64	@ 0x40
 80058c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80058c4:	2300      	movs	r3, #0
 80058c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80058c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80058cc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80058ce:	f107 0308 	add.w	r3, r7, #8
 80058d2:	4619      	mov	r1, r3
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f7ff fe66 	bl	80055a6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f000 fab6 	bl	8005e4c <SDMMC_GetCmdResp7>
 80058e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80058e2:	69fb      	ldr	r3, [r7, #28]
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3720      	adds	r7, #32
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}

080058ec <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b088      	sub	sp, #32
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
 80058f4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80058fa:	2337      	movs	r3, #55	@ 0x37
 80058fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80058fe:	2340      	movs	r3, #64	@ 0x40
 8005900:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005902:	2300      	movs	r3, #0
 8005904:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005906:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800590a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800590c:	f107 0308 	add.w	r3, r7, #8
 8005910:	4619      	mov	r1, r3
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f7ff fe47 	bl	80055a6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8005918:	f241 3288 	movw	r2, #5000	@ 0x1388
 800591c:	2137      	movs	r1, #55	@ 0x37
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f000 f8aa 	bl	8005a78 <SDMMC_GetCmdResp1>
 8005924:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005926:	69fb      	ldr	r3, [r7, #28]
}
 8005928:	4618      	mov	r0, r3
 800592a:	3720      	adds	r7, #32
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}

08005930 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b088      	sub	sp, #32
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005940:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005944:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8005946:	2329      	movs	r3, #41	@ 0x29
 8005948:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800594a:	2340      	movs	r3, #64	@ 0x40
 800594c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800594e:	2300      	movs	r3, #0
 8005950:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005952:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005956:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005958:	f107 0308 	add.w	r3, r7, #8
 800595c:	4619      	mov	r1, r3
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f7ff fe21 	bl	80055a6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f000 f9bd 	bl	8005ce4 <SDMMC_GetCmdResp3>
 800596a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800596c:	69fb      	ldr	r3, [r7, #28]
}
 800596e:	4618      	mov	r0, r3
 8005970:	3720      	adds	r7, #32
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}

08005976 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8005976:	b580      	push	{r7, lr}
 8005978:	b088      	sub	sp, #32
 800597a:	af00      	add	r7, sp, #0
 800597c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800597e:	2300      	movs	r3, #0
 8005980:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8005982:	2302      	movs	r3, #2
 8005984:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005986:	23c0      	movs	r3, #192	@ 0xc0
 8005988:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800598a:	2300      	movs	r3, #0
 800598c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800598e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005992:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005994:	f107 0308 	add.w	r3, r7, #8
 8005998:	4619      	mov	r1, r3
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f7ff fe03 	bl	80055a6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f000 f957 	bl	8005c54 <SDMMC_GetCmdResp2>
 80059a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80059a8:	69fb      	ldr	r3, [r7, #28]
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3720      	adds	r7, #32
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}

080059b2 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80059b2:	b580      	push	{r7, lr}
 80059b4:	b088      	sub	sp, #32
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	6078      	str	r0, [r7, #4]
 80059ba:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80059c0:	2309      	movs	r3, #9
 80059c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80059c4:	23c0      	movs	r3, #192	@ 0xc0
 80059c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80059c8:	2300      	movs	r3, #0
 80059ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80059cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80059d0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80059d2:	f107 0308 	add.w	r3, r7, #8
 80059d6:	4619      	mov	r1, r3
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f7ff fde4 	bl	80055a6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f000 f938 	bl	8005c54 <SDMMC_GetCmdResp2>
 80059e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80059e6:	69fb      	ldr	r3, [r7, #28]
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	3720      	adds	r7, #32
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}

080059f0 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b088      	sub	sp, #32
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80059fa:	2300      	movs	r3, #0
 80059fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80059fe:	2303      	movs	r3, #3
 8005a00:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005a02:	2340      	movs	r3, #64	@ 0x40
 8005a04:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005a06:	2300      	movs	r3, #0
 8005a08:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005a0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005a0e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005a10:	f107 0308 	add.w	r3, r7, #8
 8005a14:	4619      	mov	r1, r3
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f7ff fdc5 	bl	80055a6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8005a1c:	683a      	ldr	r2, [r7, #0]
 8005a1e:	2103      	movs	r1, #3
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f000 f99d 	bl	8005d60 <SDMMC_GetCmdResp6>
 8005a26:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005a28:	69fb      	ldr	r3, [r7, #28]
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3720      	adds	r7, #32
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}

08005a32 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005a32:	b580      	push	{r7, lr}
 8005a34:	b088      	sub	sp, #32
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	6078      	str	r0, [r7, #4]
 8005a3a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8005a40:	230d      	movs	r3, #13
 8005a42:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005a44:	2340      	movs	r3, #64	@ 0x40
 8005a46:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005a4c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005a50:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005a52:	f107 0308 	add.w	r3, r7, #8
 8005a56:	4619      	mov	r1, r3
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f7ff fda4 	bl	80055a6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8005a5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a62:	210d      	movs	r1, #13
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f000 f807 	bl	8005a78 <SDMMC_GetCmdResp1>
 8005a6a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005a6c:	69fb      	ldr	r3, [r7, #28]
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3720      	adds	r7, #32
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}
	...

08005a78 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b088      	sub	sp, #32
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	60f8      	str	r0, [r7, #12]
 8005a80:	460b      	mov	r3, r1
 8005a82:	607a      	str	r2, [r7, #4]
 8005a84:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005a86:	4b70      	ldr	r3, [pc, #448]	@ (8005c48 <SDMMC_GetCmdResp1+0x1d0>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a70      	ldr	r2, [pc, #448]	@ (8005c4c <SDMMC_GetCmdResp1+0x1d4>)
 8005a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8005a90:	0a5a      	lsrs	r2, r3, #9
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	fb02 f303 	mul.w	r3, r2, r3
 8005a98:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005a9a:	69fb      	ldr	r3, [r7, #28]
 8005a9c:	1e5a      	subs	r2, r3, #1
 8005a9e:	61fa      	str	r2, [r7, #28]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d102      	bne.n	8005aaa <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005aa4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005aa8:	e0c9      	b.n	8005c3e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005aae:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005ab0:	69bb      	ldr	r3, [r7, #24]
 8005ab2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d0ef      	beq.n	8005a9a <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005aba:	69bb      	ldr	r3, [r7, #24]
 8005abc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d1ea      	bne.n	8005a9a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ac8:	f003 0304 	and.w	r3, r3, #4
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d004      	beq.n	8005ada <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2204      	movs	r2, #4
 8005ad4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005ad6:	2304      	movs	r3, #4
 8005ad8:	e0b1      	b.n	8005c3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ade:	f003 0301 	and.w	r3, r3, #1
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d004      	beq.n	8005af0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2201      	movs	r2, #1
 8005aea:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005aec:	2301      	movs	r3, #1
 8005aee:	e0a6      	b.n	8005c3e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	22c5      	movs	r2, #197	@ 0xc5
 8005af4:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005af6:	68f8      	ldr	r0, [r7, #12]
 8005af8:	f7ff fd7f 	bl	80055fa <SDIO_GetCommandResponse>
 8005afc:	4603      	mov	r3, r0
 8005afe:	461a      	mov	r2, r3
 8005b00:	7afb      	ldrb	r3, [r7, #11]
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d001      	beq.n	8005b0a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005b06:	2301      	movs	r3, #1
 8005b08:	e099      	b.n	8005c3e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005b0a:	2100      	movs	r1, #0
 8005b0c:	68f8      	ldr	r0, [r7, #12]
 8005b0e:	f7ff fd81 	bl	8005614 <SDIO_GetResponse>
 8005b12:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005b14:	697a      	ldr	r2, [r7, #20]
 8005b16:	4b4e      	ldr	r3, [pc, #312]	@ (8005c50 <SDMMC_GetCmdResp1+0x1d8>)
 8005b18:	4013      	ands	r3, r2
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d101      	bne.n	8005b22 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	e08d      	b.n	8005c3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	da02      	bge.n	8005b2e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8005b28:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005b2c:	e087      	b.n	8005c3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d001      	beq.n	8005b3c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8005b38:	2340      	movs	r3, #64	@ 0x40
 8005b3a:	e080      	b.n	8005c3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d001      	beq.n	8005b4a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8005b46:	2380      	movs	r3, #128	@ 0x80
 8005b48:	e079      	b.n	8005c3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d002      	beq.n	8005b5a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8005b54:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005b58:	e071      	b.n	8005c3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d002      	beq.n	8005b6a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8005b64:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005b68:	e069      	b.n	8005c3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d002      	beq.n	8005b7a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8005b74:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005b78:	e061      	b.n	8005c3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d002      	beq.n	8005b8a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005b84:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005b88:	e059      	b.n	8005c3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d002      	beq.n	8005b9a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005b94:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005b98:	e051      	b.n	8005c3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d002      	beq.n	8005baa <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005ba4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005ba8:	e049      	b.n	8005c3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d002      	beq.n	8005bba <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8005bb4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005bb8:	e041      	b.n	8005c3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d002      	beq.n	8005bca <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8005bc4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005bc8:	e039      	b.n	8005c3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d002      	beq.n	8005bda <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005bd4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005bd8:	e031      	b.n	8005c3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d002      	beq.n	8005bea <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005be4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8005be8:	e029      	b.n	8005c3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d002      	beq.n	8005bfa <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005bf4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8005bf8:	e021      	b.n	8005c3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d002      	beq.n	8005c0a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005c04:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8005c08:	e019      	b.n	8005c3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d002      	beq.n	8005c1a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005c14:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8005c18:	e011      	b.n	8005c3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d002      	beq.n	8005c2a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8005c24:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005c28:	e009      	b.n	8005c3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	f003 0308 	and.w	r3, r3, #8
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d002      	beq.n	8005c3a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8005c34:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8005c38:	e001      	b.n	8005c3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005c3a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3720      	adds	r7, #32
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
 8005c46:	bf00      	nop
 8005c48:	20000000 	.word	0x20000000
 8005c4c:	10624dd3 	.word	0x10624dd3
 8005c50:	fdffe008 	.word	0xfdffe008

08005c54 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b085      	sub	sp, #20
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005c5c:	4b1f      	ldr	r3, [pc, #124]	@ (8005cdc <SDMMC_GetCmdResp2+0x88>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a1f      	ldr	r2, [pc, #124]	@ (8005ce0 <SDMMC_GetCmdResp2+0x8c>)
 8005c62:	fba2 2303 	umull	r2, r3, r2, r3
 8005c66:	0a5b      	lsrs	r3, r3, #9
 8005c68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c6c:	fb02 f303 	mul.w	r3, r2, r3
 8005c70:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	1e5a      	subs	r2, r3, #1
 8005c76:	60fa      	str	r2, [r7, #12]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d102      	bne.n	8005c82 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005c7c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005c80:	e026      	b.n	8005cd0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c86:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d0ef      	beq.n	8005c72 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d1ea      	bne.n	8005c72 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ca0:	f003 0304 	and.w	r3, r3, #4
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d004      	beq.n	8005cb2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2204      	movs	r2, #4
 8005cac:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005cae:	2304      	movs	r3, #4
 8005cb0:	e00e      	b.n	8005cd0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cb6:	f003 0301 	and.w	r3, r3, #1
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d004      	beq.n	8005cc8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	e003      	b.n	8005cd0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	22c5      	movs	r2, #197	@ 0xc5
 8005ccc:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8005cce:	2300      	movs	r3, #0
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3714      	adds	r7, #20
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr
 8005cdc:	20000000 	.word	0x20000000
 8005ce0:	10624dd3 	.word	0x10624dd3

08005ce4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b085      	sub	sp, #20
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005cec:	4b1a      	ldr	r3, [pc, #104]	@ (8005d58 <SDMMC_GetCmdResp3+0x74>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a1a      	ldr	r2, [pc, #104]	@ (8005d5c <SDMMC_GetCmdResp3+0x78>)
 8005cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8005cf6:	0a5b      	lsrs	r3, r3, #9
 8005cf8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005cfc:	fb02 f303 	mul.w	r3, r2, r3
 8005d00:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	1e5a      	subs	r2, r3, #1
 8005d06:	60fa      	str	r2, [r7, #12]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d102      	bne.n	8005d12 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005d0c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005d10:	e01b      	b.n	8005d4a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d16:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d0ef      	beq.n	8005d02 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d1ea      	bne.n	8005d02 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d30:	f003 0304 	and.w	r3, r3, #4
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d004      	beq.n	8005d42 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2204      	movs	r2, #4
 8005d3c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005d3e:	2304      	movs	r3, #4
 8005d40:	e003      	b.n	8005d4a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	22c5      	movs	r2, #197	@ 0xc5
 8005d46:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005d48:	2300      	movs	r3, #0
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3714      	adds	r7, #20
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr
 8005d56:	bf00      	nop
 8005d58:	20000000 	.word	0x20000000
 8005d5c:	10624dd3 	.word	0x10624dd3

08005d60 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b088      	sub	sp, #32
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	60f8      	str	r0, [r7, #12]
 8005d68:	460b      	mov	r3, r1
 8005d6a:	607a      	str	r2, [r7, #4]
 8005d6c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005d6e:	4b35      	ldr	r3, [pc, #212]	@ (8005e44 <SDMMC_GetCmdResp6+0xe4>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a35      	ldr	r2, [pc, #212]	@ (8005e48 <SDMMC_GetCmdResp6+0xe8>)
 8005d74:	fba2 2303 	umull	r2, r3, r2, r3
 8005d78:	0a5b      	lsrs	r3, r3, #9
 8005d7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d7e:	fb02 f303 	mul.w	r3, r2, r3
 8005d82:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005d84:	69fb      	ldr	r3, [r7, #28]
 8005d86:	1e5a      	subs	r2, r3, #1
 8005d88:	61fa      	str	r2, [r7, #28]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d102      	bne.n	8005d94 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005d8e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005d92:	e052      	b.n	8005e3a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d98:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005d9a:	69bb      	ldr	r3, [r7, #24]
 8005d9c:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d0ef      	beq.n	8005d84 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005da4:	69bb      	ldr	r3, [r7, #24]
 8005da6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d1ea      	bne.n	8005d84 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005db2:	f003 0304 	and.w	r3, r3, #4
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d004      	beq.n	8005dc4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2204      	movs	r2, #4
 8005dbe:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005dc0:	2304      	movs	r3, #4
 8005dc2:	e03a      	b.n	8005e3a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005dc8:	f003 0301 	and.w	r3, r3, #1
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d004      	beq.n	8005dda <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e02f      	b.n	8005e3a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005dda:	68f8      	ldr	r0, [r7, #12]
 8005ddc:	f7ff fc0d 	bl	80055fa <SDIO_GetCommandResponse>
 8005de0:	4603      	mov	r3, r0
 8005de2:	461a      	mov	r2, r3
 8005de4:	7afb      	ldrb	r3, [r7, #11]
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d001      	beq.n	8005dee <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005dea:	2301      	movs	r3, #1
 8005dec:	e025      	b.n	8005e3a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	22c5      	movs	r2, #197	@ 0xc5
 8005df2:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005df4:	2100      	movs	r1, #0
 8005df6:	68f8      	ldr	r0, [r7, #12]
 8005df8:	f7ff fc0c 	bl	8005614 <SDIO_GetResponse>
 8005dfc:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d106      	bne.n	8005e16 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	0c1b      	lsrs	r3, r3, #16
 8005e0c:	b29a      	uxth	r2, r3
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8005e12:	2300      	movs	r3, #0
 8005e14:	e011      	b.n	8005e3a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d002      	beq.n	8005e26 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005e20:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005e24:	e009      	b.n	8005e3a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d002      	beq.n	8005e36 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005e30:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005e34:	e001      	b.n	8005e3a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005e36:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3720      	adds	r7, #32
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}
 8005e42:	bf00      	nop
 8005e44:	20000000 	.word	0x20000000
 8005e48:	10624dd3 	.word	0x10624dd3

08005e4c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b085      	sub	sp, #20
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005e54:	4b22      	ldr	r3, [pc, #136]	@ (8005ee0 <SDMMC_GetCmdResp7+0x94>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a22      	ldr	r2, [pc, #136]	@ (8005ee4 <SDMMC_GetCmdResp7+0x98>)
 8005e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e5e:	0a5b      	lsrs	r3, r3, #9
 8005e60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e64:	fb02 f303 	mul.w	r3, r2, r3
 8005e68:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	1e5a      	subs	r2, r3, #1
 8005e6e:	60fa      	str	r2, [r7, #12]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d102      	bne.n	8005e7a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005e74:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005e78:	e02c      	b.n	8005ed4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e7e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d0ef      	beq.n	8005e6a <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d1ea      	bne.n	8005e6a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e98:	f003 0304 	and.w	r3, r3, #4
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d004      	beq.n	8005eaa <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2204      	movs	r2, #4
 8005ea4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005ea6:	2304      	movs	r3, #4
 8005ea8:	e014      	b.n	8005ed4 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005eae:	f003 0301 	and.w	r3, r3, #1
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d004      	beq.n	8005ec0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2201      	movs	r2, #1
 8005eba:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	e009      	b.n	8005ed4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ec4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d002      	beq.n	8005ed2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2240      	movs	r2, #64	@ 0x40
 8005ed0:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005ed2:	2300      	movs	r3, #0
  
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3714      	adds	r7, #20
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr
 8005ee0:	20000000 	.word	0x20000000
 8005ee4:	10624dd3 	.word	0x10624dd3

08005ee8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b085      	sub	sp, #20
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005ef0:	4b11      	ldr	r3, [pc, #68]	@ (8005f38 <SDMMC_GetCmdError+0x50>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a11      	ldr	r2, [pc, #68]	@ (8005f3c <SDMMC_GetCmdError+0x54>)
 8005ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8005efa:	0a5b      	lsrs	r3, r3, #9
 8005efc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f00:	fb02 f303 	mul.w	r3, r2, r3
 8005f04:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	1e5a      	subs	r2, r3, #1
 8005f0a:	60fa      	str	r2, [r7, #12]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d102      	bne.n	8005f16 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005f10:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005f14:	e009      	b.n	8005f2a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d0f1      	beq.n	8005f06 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	22c5      	movs	r2, #197	@ 0xc5
 8005f26:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8005f28:	2300      	movs	r3, #0
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3714      	adds	r7, #20
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr
 8005f36:	bf00      	nop
 8005f38:	20000000 	.word	0x20000000
 8005f3c:	10624dd3 	.word	0x10624dd3

08005f40 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8005f44:	4904      	ldr	r1, [pc, #16]	@ (8005f58 <MX_FATFS_Init+0x18>)
 8005f46:	4805      	ldr	r0, [pc, #20]	@ (8005f5c <MX_FATFS_Init+0x1c>)
 8005f48:	f002 ff6e 	bl	8008e28 <FATFS_LinkDriver>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	461a      	mov	r2, r3
 8005f50:	4b03      	ldr	r3, [pc, #12]	@ (8005f60 <MX_FATFS_Init+0x20>)
 8005f52:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005f54:	bf00      	nop
 8005f56:	bd80      	pop	{r7, pc}
 8005f58:	200022fc 	.word	0x200022fc
 8005f5c:	08009c64 	.word	0x08009c64
 8005f60:	200022f8 	.word	0x200022f8

08005f64 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005f64:	b480      	push	{r7}
 8005f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005f68:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr

08005f74 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b082      	sub	sp, #8
 8005f78:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8005f7e:	f000 f888 	bl	8006092 <BSP_SD_IsDetected>
 8005f82:	4603      	mov	r3, r0
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d001      	beq.n	8005f8c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	e005      	b.n	8005f98 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8005f8c:	4804      	ldr	r0, [pc, #16]	@ (8005fa0 <BSP_SD_Init+0x2c>)
 8005f8e:	f7fd f989 	bl	80032a4 <HAL_SD_Init>
 8005f92:	4603      	mov	r3, r0
 8005f94:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8005f96:	79fb      	ldrb	r3, [r7, #7]
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	3708      	adds	r7, #8
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}
 8005fa0:	200020fc 	.word	0x200020fc

08005fa4 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b086      	sub	sp, #24
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	60f8      	str	r0, [r7, #12]
 8005fac:	60b9      	str	r1, [r7, #8]
 8005fae:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	68ba      	ldr	r2, [r7, #8]
 8005fb8:	68f9      	ldr	r1, [r7, #12]
 8005fba:	4806      	ldr	r0, [pc, #24]	@ (8005fd4 <BSP_SD_ReadBlocks_DMA+0x30>)
 8005fbc:	f7fd fa22 	bl	8003404 <HAL_SD_ReadBlocks_DMA>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d001      	beq.n	8005fca <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005fca:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3718      	adds	r7, #24
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}
 8005fd4:	200020fc 	.word	0x200020fc

08005fd8 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b086      	sub	sp, #24
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	60f8      	str	r0, [r7, #12]
 8005fe0:	60b9      	str	r1, [r7, #8]
 8005fe2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	68ba      	ldr	r2, [r7, #8]
 8005fec:	68f9      	ldr	r1, [r7, #12]
 8005fee:	4806      	ldr	r0, [pc, #24]	@ (8006008 <BSP_SD_WriteBlocks_DMA+0x30>)
 8005ff0:	f7fd fae8 	bl	80035c4 <HAL_SD_WriteBlocks_DMA>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d001      	beq.n	8005ffe <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005ffe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006000:	4618      	mov	r0, r3
 8006002:	3718      	adds	r7, #24
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}
 8006008:	200020fc 	.word	0x200020fc

0800600c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8006010:	4805      	ldr	r0, [pc, #20]	@ (8006028 <BSP_SD_GetCardState+0x1c>)
 8006012:	f7fd ff09 	bl	8003e28 <HAL_SD_GetCardState>
 8006016:	4603      	mov	r3, r0
 8006018:	2b04      	cmp	r3, #4
 800601a:	bf14      	ite	ne
 800601c:	2301      	movne	r3, #1
 800601e:	2300      	moveq	r3, #0
 8006020:	b2db      	uxtb	r3, r3
}
 8006022:	4618      	mov	r0, r3
 8006024:	bd80      	pop	{r7, pc}
 8006026:	bf00      	nop
 8006028:	200020fc 	.word	0x200020fc

0800602c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b082      	sub	sp, #8
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8006034:	6879      	ldr	r1, [r7, #4]
 8006036:	4803      	ldr	r0, [pc, #12]	@ (8006044 <BSP_SD_GetCardInfo+0x18>)
 8006038:	f7fd feca 	bl	8003dd0 <HAL_SD_GetCardInfo>
}
 800603c:	bf00      	nop
 800603e:	3708      	adds	r7, #8
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}
 8006044:	200020fc 	.word	0x200020fc

08006048 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b082      	sub	sp, #8
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8006050:	f000 f818 	bl	8006084 <BSP_SD_AbortCallback>
}
 8006054:	bf00      	nop
 8006056:	3708      	adds	r7, #8
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}

0800605c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b082      	sub	sp, #8
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8006064:	f000 f9a8 	bl	80063b8 <BSP_SD_WriteCpltCallback>
}
 8006068:	bf00      	nop
 800606a:	3708      	adds	r7, #8
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}

08006070 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b082      	sub	sp, #8
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8006078:	f000 f9aa 	bl	80063d0 <BSP_SD_ReadCpltCallback>
}
 800607c:	bf00      	nop
 800607e:	3708      	adds	r7, #8
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}

08006084 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8006084:	b480      	push	{r7}
 8006086:	af00      	add	r7, sp, #0

}
 8006088:	bf00      	nop
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr

08006092 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8006092:	b580      	push	{r7, lr}
 8006094:	b082      	sub	sp, #8
 8006096:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8006098:	2301      	movs	r3, #1
 800609a:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800609c:	f000 f80c 	bl	80060b8 <BSP_PlatformIsDetected>
 80060a0:	4603      	mov	r3, r0
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d101      	bne.n	80060aa <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80060a6:	2300      	movs	r3, #0
 80060a8:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80060aa:	79fb      	ldrb	r3, [r7, #7]
 80060ac:	b2db      	uxtb	r3, r3
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3708      	adds	r7, #8
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}
	...

080060b8 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b082      	sub	sp, #8
 80060bc:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80060be:	2301      	movs	r3, #1
 80060c0:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80060c2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80060c6:	4806      	ldr	r0, [pc, #24]	@ (80060e0 <BSP_PlatformIsDetected+0x28>)
 80060c8:	f7fb ffc2 	bl	8002050 <HAL_GPIO_ReadPin>
 80060cc:	4603      	mov	r3, r0
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d001      	beq.n	80060d6 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 80060d2:	2300      	movs	r3, #0
 80060d4:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80060d6:	79fb      	ldrb	r3, [r7, #7]
}
 80060d8:	4618      	mov	r0, r3
 80060da:	3708      	adds	r7, #8
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}
 80060e0:	40020800 	.word	0x40020800

080060e4 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b084      	sub	sp, #16
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 80060ec:	f7fb f8cc 	bl	8001288 <HAL_GetTick>
 80060f0:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 80060f2:	e006      	b.n	8006102 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80060f4:	f7ff ff8a 	bl	800600c <BSP_SD_GetCardState>
 80060f8:	4603      	mov	r3, r0
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d101      	bne.n	8006102 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80060fe:	2300      	movs	r3, #0
 8006100:	e009      	b.n	8006116 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8006102:	f7fb f8c1 	bl	8001288 <HAL_GetTick>
 8006106:	4602      	mov	r2, r0
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	1ad3      	subs	r3, r2, r3
 800610c:	687a      	ldr	r2, [r7, #4]
 800610e:	429a      	cmp	r2, r3
 8006110:	d8f0      	bhi.n	80060f4 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8006112:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006116:	4618      	mov	r0, r3
 8006118:	3710      	adds	r7, #16
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}
	...

08006120 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b082      	sub	sp, #8
 8006124:	af00      	add	r7, sp, #0
 8006126:	4603      	mov	r3, r0
 8006128:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800612a:	4b0b      	ldr	r3, [pc, #44]	@ (8006158 <SD_CheckStatus+0x38>)
 800612c:	2201      	movs	r2, #1
 800612e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8006130:	f7ff ff6c 	bl	800600c <BSP_SD_GetCardState>
 8006134:	4603      	mov	r3, r0
 8006136:	2b00      	cmp	r3, #0
 8006138:	d107      	bne.n	800614a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800613a:	4b07      	ldr	r3, [pc, #28]	@ (8006158 <SD_CheckStatus+0x38>)
 800613c:	781b      	ldrb	r3, [r3, #0]
 800613e:	b2db      	uxtb	r3, r3
 8006140:	f023 0301 	bic.w	r3, r3, #1
 8006144:	b2da      	uxtb	r2, r3
 8006146:	4b04      	ldr	r3, [pc, #16]	@ (8006158 <SD_CheckStatus+0x38>)
 8006148:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800614a:	4b03      	ldr	r3, [pc, #12]	@ (8006158 <SD_CheckStatus+0x38>)
 800614c:	781b      	ldrb	r3, [r3, #0]
 800614e:	b2db      	uxtb	r3, r3
}
 8006150:	4618      	mov	r0, r3
 8006152:	3708      	adds	r7, #8
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}
 8006158:	20000009 	.word	0x20000009

0800615c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b082      	sub	sp, #8
 8006160:	af00      	add	r7, sp, #0
 8006162:	4603      	mov	r3, r0
 8006164:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8006166:	f7ff ff05 	bl	8005f74 <BSP_SD_Init>
 800616a:	4603      	mov	r3, r0
 800616c:	2b00      	cmp	r3, #0
 800616e:	d107      	bne.n	8006180 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8006170:	79fb      	ldrb	r3, [r7, #7]
 8006172:	4618      	mov	r0, r3
 8006174:	f7ff ffd4 	bl	8006120 <SD_CheckStatus>
 8006178:	4603      	mov	r3, r0
 800617a:	461a      	mov	r2, r3
 800617c:	4b04      	ldr	r3, [pc, #16]	@ (8006190 <SD_initialize+0x34>)
 800617e:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8006180:	4b03      	ldr	r3, [pc, #12]	@ (8006190 <SD_initialize+0x34>)
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	b2db      	uxtb	r3, r3
}
 8006186:	4618      	mov	r0, r3
 8006188:	3708      	adds	r7, #8
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}
 800618e:	bf00      	nop
 8006190:	20000009 	.word	0x20000009

08006194 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b082      	sub	sp, #8
 8006198:	af00      	add	r7, sp, #0
 800619a:	4603      	mov	r3, r0
 800619c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800619e:	79fb      	ldrb	r3, [r7, #7]
 80061a0:	4618      	mov	r0, r3
 80061a2:	f7ff ffbd 	bl	8006120 <SD_CheckStatus>
 80061a6:	4603      	mov	r3, r0
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3708      	adds	r7, #8
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}

080061b0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b086      	sub	sp, #24
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	60b9      	str	r1, [r7, #8]
 80061b8:	607a      	str	r2, [r7, #4]
 80061ba:	603b      	str	r3, [r7, #0]
 80061bc:	4603      	mov	r3, r0
 80061be:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80061c0:	2301      	movs	r3, #1
 80061c2:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80061c4:	f247 5030 	movw	r0, #30000	@ 0x7530
 80061c8:	f7ff ff8c 	bl	80060e4 <SD_CheckStatusWithTimeout>
 80061cc:	4603      	mov	r3, r0
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	da01      	bge.n	80061d6 <SD_read+0x26>
  {
    return res;
 80061d2:	7dfb      	ldrb	r3, [r7, #23]
 80061d4:	e03b      	b.n	800624e <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80061d6:	683a      	ldr	r2, [r7, #0]
 80061d8:	6879      	ldr	r1, [r7, #4]
 80061da:	68b8      	ldr	r0, [r7, #8]
 80061dc:	f7ff fee2 	bl	8005fa4 <BSP_SD_ReadBlocks_DMA>
 80061e0:	4603      	mov	r3, r0
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d132      	bne.n	800624c <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 80061e6:	4b1c      	ldr	r3, [pc, #112]	@ (8006258 <SD_read+0xa8>)
 80061e8:	2200      	movs	r2, #0
 80061ea:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 80061ec:	f7fb f84c 	bl	8001288 <HAL_GetTick>
 80061f0:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80061f2:	bf00      	nop
 80061f4:	4b18      	ldr	r3, [pc, #96]	@ (8006258 <SD_read+0xa8>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d108      	bne.n	800620e <SD_read+0x5e>
 80061fc:	f7fb f844 	bl	8001288 <HAL_GetTick>
 8006200:	4602      	mov	r2, r0
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	1ad3      	subs	r3, r2, r3
 8006206:	f247 522f 	movw	r2, #29999	@ 0x752f
 800620a:	4293      	cmp	r3, r2
 800620c:	d9f2      	bls.n	80061f4 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800620e:	4b12      	ldr	r3, [pc, #72]	@ (8006258 <SD_read+0xa8>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d102      	bne.n	800621c <SD_read+0x6c>
      {
        res = RES_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	75fb      	strb	r3, [r7, #23]
 800621a:	e017      	b.n	800624c <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800621c:	4b0e      	ldr	r3, [pc, #56]	@ (8006258 <SD_read+0xa8>)
 800621e:	2200      	movs	r2, #0
 8006220:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8006222:	f7fb f831 	bl	8001288 <HAL_GetTick>
 8006226:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8006228:	e007      	b.n	800623a <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800622a:	f7ff feef 	bl	800600c <BSP_SD_GetCardState>
 800622e:	4603      	mov	r3, r0
 8006230:	2b00      	cmp	r3, #0
 8006232:	d102      	bne.n	800623a <SD_read+0x8a>
          {
            res = RES_OK;
 8006234:	2300      	movs	r3, #0
 8006236:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8006238:	e008      	b.n	800624c <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800623a:	f7fb f825 	bl	8001288 <HAL_GetTick>
 800623e:	4602      	mov	r2, r0
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	1ad3      	subs	r3, r2, r3
 8006244:	f247 522f 	movw	r2, #29999	@ 0x752f
 8006248:	4293      	cmp	r3, r2
 800624a:	d9ee      	bls.n	800622a <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800624c:	7dfb      	ldrb	r3, [r7, #23]
}
 800624e:	4618      	mov	r0, r3
 8006250:	3718      	adds	r7, #24
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}
 8006256:	bf00      	nop
 8006258:	20002304 	.word	0x20002304

0800625c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b086      	sub	sp, #24
 8006260:	af00      	add	r7, sp, #0
 8006262:	60b9      	str	r1, [r7, #8]
 8006264:	607a      	str	r2, [r7, #4]
 8006266:	603b      	str	r3, [r7, #0]
 8006268:	4603      	mov	r3, r0
 800626a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800626c:	2301      	movs	r3, #1
 800626e:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8006270:	4b24      	ldr	r3, [pc, #144]	@ (8006304 <SD_write+0xa8>)
 8006272:	2200      	movs	r2, #0
 8006274:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8006276:	f247 5030 	movw	r0, #30000	@ 0x7530
 800627a:	f7ff ff33 	bl	80060e4 <SD_CheckStatusWithTimeout>
 800627e:	4603      	mov	r3, r0
 8006280:	2b00      	cmp	r3, #0
 8006282:	da01      	bge.n	8006288 <SD_write+0x2c>
  {
    return res;
 8006284:	7dfb      	ldrb	r3, [r7, #23]
 8006286:	e038      	b.n	80062fa <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8006288:	683a      	ldr	r2, [r7, #0]
 800628a:	6879      	ldr	r1, [r7, #4]
 800628c:	68b8      	ldr	r0, [r7, #8]
 800628e:	f7ff fea3 	bl	8005fd8 <BSP_SD_WriteBlocks_DMA>
 8006292:	4603      	mov	r3, r0
 8006294:	2b00      	cmp	r3, #0
 8006296:	d12f      	bne.n	80062f8 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8006298:	f7fa fff6 	bl	8001288 <HAL_GetTick>
 800629c:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800629e:	bf00      	nop
 80062a0:	4b18      	ldr	r3, [pc, #96]	@ (8006304 <SD_write+0xa8>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d108      	bne.n	80062ba <SD_write+0x5e>
 80062a8:	f7fa ffee 	bl	8001288 <HAL_GetTick>
 80062ac:	4602      	mov	r2, r0
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	1ad3      	subs	r3, r2, r3
 80062b2:	f247 522f 	movw	r2, #29999	@ 0x752f
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d9f2      	bls.n	80062a0 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 80062ba:	4b12      	ldr	r3, [pc, #72]	@ (8006304 <SD_write+0xa8>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d102      	bne.n	80062c8 <SD_write+0x6c>
      {
        res = RES_ERROR;
 80062c2:	2301      	movs	r3, #1
 80062c4:	75fb      	strb	r3, [r7, #23]
 80062c6:	e017      	b.n	80062f8 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 80062c8:	4b0e      	ldr	r3, [pc, #56]	@ (8006304 <SD_write+0xa8>)
 80062ca:	2200      	movs	r2, #0
 80062cc:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80062ce:	f7fa ffdb 	bl	8001288 <HAL_GetTick>
 80062d2:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80062d4:	e007      	b.n	80062e6 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80062d6:	f7ff fe99 	bl	800600c <BSP_SD_GetCardState>
 80062da:	4603      	mov	r3, r0
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d102      	bne.n	80062e6 <SD_write+0x8a>
          {
            res = RES_OK;
 80062e0:	2300      	movs	r3, #0
 80062e2:	75fb      	strb	r3, [r7, #23]
            break;
 80062e4:	e008      	b.n	80062f8 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80062e6:	f7fa ffcf 	bl	8001288 <HAL_GetTick>
 80062ea:	4602      	mov	r2, r0
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	1ad3      	subs	r3, r2, r3
 80062f0:	f247 522f 	movw	r2, #29999	@ 0x752f
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d9ee      	bls.n	80062d6 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 80062f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3718      	adds	r7, #24
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}
 8006302:	bf00      	nop
 8006304:	20002300 	.word	0x20002300

08006308 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b08c      	sub	sp, #48	@ 0x30
 800630c:	af00      	add	r7, sp, #0
 800630e:	4603      	mov	r3, r0
 8006310:	603a      	str	r2, [r7, #0]
 8006312:	71fb      	strb	r3, [r7, #7]
 8006314:	460b      	mov	r3, r1
 8006316:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8006318:	2301      	movs	r3, #1
 800631a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800631e:	4b25      	ldr	r3, [pc, #148]	@ (80063b4 <SD_ioctl+0xac>)
 8006320:	781b      	ldrb	r3, [r3, #0]
 8006322:	b2db      	uxtb	r3, r3
 8006324:	f003 0301 	and.w	r3, r3, #1
 8006328:	2b00      	cmp	r3, #0
 800632a:	d001      	beq.n	8006330 <SD_ioctl+0x28>
 800632c:	2303      	movs	r3, #3
 800632e:	e03c      	b.n	80063aa <SD_ioctl+0xa2>

  switch (cmd)
 8006330:	79bb      	ldrb	r3, [r7, #6]
 8006332:	2b03      	cmp	r3, #3
 8006334:	d834      	bhi.n	80063a0 <SD_ioctl+0x98>
 8006336:	a201      	add	r2, pc, #4	@ (adr r2, 800633c <SD_ioctl+0x34>)
 8006338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800633c:	0800634d 	.word	0x0800634d
 8006340:	08006355 	.word	0x08006355
 8006344:	0800636d 	.word	0x0800636d
 8006348:	08006387 	.word	0x08006387
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800634c:	2300      	movs	r3, #0
 800634e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8006352:	e028      	b.n	80063a6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8006354:	f107 030c 	add.w	r3, r7, #12
 8006358:	4618      	mov	r0, r3
 800635a:	f7ff fe67 	bl	800602c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800635e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006364:	2300      	movs	r3, #0
 8006366:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800636a:	e01c      	b.n	80063a6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800636c:	f107 030c 	add.w	r3, r7, #12
 8006370:	4618      	mov	r0, r3
 8006372:	f7ff fe5b 	bl	800602c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8006376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006378:	b29a      	uxth	r2, r3
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800637e:	2300      	movs	r3, #0
 8006380:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8006384:	e00f      	b.n	80063a6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006386:	f107 030c 	add.w	r3, r7, #12
 800638a:	4618      	mov	r0, r3
 800638c:	f7ff fe4e 	bl	800602c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8006390:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006392:	0a5a      	lsrs	r2, r3, #9
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006398:	2300      	movs	r3, #0
 800639a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800639e:	e002      	b.n	80063a6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80063a0:	2304      	movs	r3, #4
 80063a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 80063a6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3730      	adds	r7, #48	@ 0x30
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}
 80063b2:	bf00      	nop
 80063b4:	20000009 	.word	0x20000009

080063b8 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80063b8:	b480      	push	{r7}
 80063ba:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 80063bc:	4b03      	ldr	r3, [pc, #12]	@ (80063cc <BSP_SD_WriteCpltCallback+0x14>)
 80063be:	2201      	movs	r2, #1
 80063c0:	601a      	str	r2, [r3, #0]
}
 80063c2:	bf00      	nop
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr
 80063cc:	20002300 	.word	0x20002300

080063d0 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80063d0:	b480      	push	{r7}
 80063d2:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 80063d4:	4b03      	ldr	r3, [pc, #12]	@ (80063e4 <BSP_SD_ReadCpltCallback+0x14>)
 80063d6:	2201      	movs	r2, #1
 80063d8:	601a      	str	r2, [r3, #0]
}
 80063da:	bf00      	nop
 80063dc:	46bd      	mov	sp, r7
 80063de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e2:	4770      	bx	lr
 80063e4:	20002304 	.word	0x20002304

080063e8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b084      	sub	sp, #16
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	4603      	mov	r3, r0
 80063f0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80063f2:	79fb      	ldrb	r3, [r7, #7]
 80063f4:	4a08      	ldr	r2, [pc, #32]	@ (8006418 <disk_status+0x30>)
 80063f6:	009b      	lsls	r3, r3, #2
 80063f8:	4413      	add	r3, r2
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	79fa      	ldrb	r2, [r7, #7]
 8006400:	4905      	ldr	r1, [pc, #20]	@ (8006418 <disk_status+0x30>)
 8006402:	440a      	add	r2, r1
 8006404:	7a12      	ldrb	r2, [r2, #8]
 8006406:	4610      	mov	r0, r2
 8006408:	4798      	blx	r3
 800640a:	4603      	mov	r3, r0
 800640c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800640e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006410:	4618      	mov	r0, r3
 8006412:	3710      	adds	r7, #16
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}
 8006418:	20002330 	.word	0x20002330

0800641c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b084      	sub	sp, #16
 8006420:	af00      	add	r7, sp, #0
 8006422:	4603      	mov	r3, r0
 8006424:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006426:	2300      	movs	r3, #0
 8006428:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800642a:	79fb      	ldrb	r3, [r7, #7]
 800642c:	4a0e      	ldr	r2, [pc, #56]	@ (8006468 <disk_initialize+0x4c>)
 800642e:	5cd3      	ldrb	r3, [r2, r3]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d114      	bne.n	800645e <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006434:	79fb      	ldrb	r3, [r7, #7]
 8006436:	4a0c      	ldr	r2, [pc, #48]	@ (8006468 <disk_initialize+0x4c>)
 8006438:	009b      	lsls	r3, r3, #2
 800643a:	4413      	add	r3, r2
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	79fa      	ldrb	r2, [r7, #7]
 8006442:	4909      	ldr	r1, [pc, #36]	@ (8006468 <disk_initialize+0x4c>)
 8006444:	440a      	add	r2, r1
 8006446:	7a12      	ldrb	r2, [r2, #8]
 8006448:	4610      	mov	r0, r2
 800644a:	4798      	blx	r3
 800644c:	4603      	mov	r3, r0
 800644e:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8006450:	7bfb      	ldrb	r3, [r7, #15]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d103      	bne.n	800645e <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8006456:	79fb      	ldrb	r3, [r7, #7]
 8006458:	4a03      	ldr	r2, [pc, #12]	@ (8006468 <disk_initialize+0x4c>)
 800645a:	2101      	movs	r1, #1
 800645c:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800645e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006460:	4618      	mov	r0, r3
 8006462:	3710      	adds	r7, #16
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}
 8006468:	20002330 	.word	0x20002330

0800646c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800646c:	b590      	push	{r4, r7, lr}
 800646e:	b087      	sub	sp, #28
 8006470:	af00      	add	r7, sp, #0
 8006472:	60b9      	str	r1, [r7, #8]
 8006474:	607a      	str	r2, [r7, #4]
 8006476:	603b      	str	r3, [r7, #0]
 8006478:	4603      	mov	r3, r0
 800647a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800647c:	7bfb      	ldrb	r3, [r7, #15]
 800647e:	4a0a      	ldr	r2, [pc, #40]	@ (80064a8 <disk_read+0x3c>)
 8006480:	009b      	lsls	r3, r3, #2
 8006482:	4413      	add	r3, r2
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	689c      	ldr	r4, [r3, #8]
 8006488:	7bfb      	ldrb	r3, [r7, #15]
 800648a:	4a07      	ldr	r2, [pc, #28]	@ (80064a8 <disk_read+0x3c>)
 800648c:	4413      	add	r3, r2
 800648e:	7a18      	ldrb	r0, [r3, #8]
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	687a      	ldr	r2, [r7, #4]
 8006494:	68b9      	ldr	r1, [r7, #8]
 8006496:	47a0      	blx	r4
 8006498:	4603      	mov	r3, r0
 800649a:	75fb      	strb	r3, [r7, #23]
  return res;
 800649c:	7dfb      	ldrb	r3, [r7, #23]
}
 800649e:	4618      	mov	r0, r3
 80064a0:	371c      	adds	r7, #28
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd90      	pop	{r4, r7, pc}
 80064a6:	bf00      	nop
 80064a8:	20002330 	.word	0x20002330

080064ac <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80064ac:	b590      	push	{r4, r7, lr}
 80064ae:	b087      	sub	sp, #28
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	60b9      	str	r1, [r7, #8]
 80064b4:	607a      	str	r2, [r7, #4]
 80064b6:	603b      	str	r3, [r7, #0]
 80064b8:	4603      	mov	r3, r0
 80064ba:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80064bc:	7bfb      	ldrb	r3, [r7, #15]
 80064be:	4a0a      	ldr	r2, [pc, #40]	@ (80064e8 <disk_write+0x3c>)
 80064c0:	009b      	lsls	r3, r3, #2
 80064c2:	4413      	add	r3, r2
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	68dc      	ldr	r4, [r3, #12]
 80064c8:	7bfb      	ldrb	r3, [r7, #15]
 80064ca:	4a07      	ldr	r2, [pc, #28]	@ (80064e8 <disk_write+0x3c>)
 80064cc:	4413      	add	r3, r2
 80064ce:	7a18      	ldrb	r0, [r3, #8]
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	687a      	ldr	r2, [r7, #4]
 80064d4:	68b9      	ldr	r1, [r7, #8]
 80064d6:	47a0      	blx	r4
 80064d8:	4603      	mov	r3, r0
 80064da:	75fb      	strb	r3, [r7, #23]
  return res;
 80064dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80064de:	4618      	mov	r0, r3
 80064e0:	371c      	adds	r7, #28
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd90      	pop	{r4, r7, pc}
 80064e6:	bf00      	nop
 80064e8:	20002330 	.word	0x20002330

080064ec <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b084      	sub	sp, #16
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	4603      	mov	r3, r0
 80064f4:	603a      	str	r2, [r7, #0]
 80064f6:	71fb      	strb	r3, [r7, #7]
 80064f8:	460b      	mov	r3, r1
 80064fa:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80064fc:	79fb      	ldrb	r3, [r7, #7]
 80064fe:	4a09      	ldr	r2, [pc, #36]	@ (8006524 <disk_ioctl+0x38>)
 8006500:	009b      	lsls	r3, r3, #2
 8006502:	4413      	add	r3, r2
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	691b      	ldr	r3, [r3, #16]
 8006508:	79fa      	ldrb	r2, [r7, #7]
 800650a:	4906      	ldr	r1, [pc, #24]	@ (8006524 <disk_ioctl+0x38>)
 800650c:	440a      	add	r2, r1
 800650e:	7a10      	ldrb	r0, [r2, #8]
 8006510:	79b9      	ldrb	r1, [r7, #6]
 8006512:	683a      	ldr	r2, [r7, #0]
 8006514:	4798      	blx	r3
 8006516:	4603      	mov	r3, r0
 8006518:	73fb      	strb	r3, [r7, #15]
  return res;
 800651a:	7bfb      	ldrb	r3, [r7, #15]
}
 800651c:	4618      	mov	r0, r3
 800651e:	3710      	adds	r7, #16
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}
 8006524:	20002330 	.word	0x20002330

08006528 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006528:	b480      	push	{r7}
 800652a:	b085      	sub	sp, #20
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	3301      	adds	r3, #1
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006538:	89fb      	ldrh	r3, [r7, #14]
 800653a:	021b      	lsls	r3, r3, #8
 800653c:	b21a      	sxth	r2, r3
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	b21b      	sxth	r3, r3
 8006544:	4313      	orrs	r3, r2
 8006546:	b21b      	sxth	r3, r3
 8006548:	81fb      	strh	r3, [r7, #14]
	return rv;
 800654a:	89fb      	ldrh	r3, [r7, #14]
}
 800654c:	4618      	mov	r0, r3
 800654e:	3714      	adds	r7, #20
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr

08006558 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006558:	b480      	push	{r7}
 800655a:	b085      	sub	sp, #20
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	3303      	adds	r3, #3
 8006564:	781b      	ldrb	r3, [r3, #0]
 8006566:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	021b      	lsls	r3, r3, #8
 800656c:	687a      	ldr	r2, [r7, #4]
 800656e:	3202      	adds	r2, #2
 8006570:	7812      	ldrb	r2, [r2, #0]
 8006572:	4313      	orrs	r3, r2
 8006574:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	021b      	lsls	r3, r3, #8
 800657a:	687a      	ldr	r2, [r7, #4]
 800657c:	3201      	adds	r2, #1
 800657e:	7812      	ldrb	r2, [r2, #0]
 8006580:	4313      	orrs	r3, r2
 8006582:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	021b      	lsls	r3, r3, #8
 8006588:	687a      	ldr	r2, [r7, #4]
 800658a:	7812      	ldrb	r2, [r2, #0]
 800658c:	4313      	orrs	r3, r2
 800658e:	60fb      	str	r3, [r7, #12]
	return rv;
 8006590:	68fb      	ldr	r3, [r7, #12]
}
 8006592:	4618      	mov	r0, r3
 8006594:	3714      	adds	r7, #20
 8006596:	46bd      	mov	sp, r7
 8006598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659c:	4770      	bx	lr

0800659e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800659e:	b480      	push	{r7}
 80065a0:	b083      	sub	sp, #12
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	6078      	str	r0, [r7, #4]
 80065a6:	460b      	mov	r3, r1
 80065a8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	1c5a      	adds	r2, r3, #1
 80065ae:	607a      	str	r2, [r7, #4]
 80065b0:	887a      	ldrh	r2, [r7, #2]
 80065b2:	b2d2      	uxtb	r2, r2
 80065b4:	701a      	strb	r2, [r3, #0]
 80065b6:	887b      	ldrh	r3, [r7, #2]
 80065b8:	0a1b      	lsrs	r3, r3, #8
 80065ba:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	1c5a      	adds	r2, r3, #1
 80065c0:	607a      	str	r2, [r7, #4]
 80065c2:	887a      	ldrh	r2, [r7, #2]
 80065c4:	b2d2      	uxtb	r2, r2
 80065c6:	701a      	strb	r2, [r3, #0]
}
 80065c8:	bf00      	nop
 80065ca:	370c      	adds	r7, #12
 80065cc:	46bd      	mov	sp, r7
 80065ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d2:	4770      	bx	lr

080065d4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80065d4:	b480      	push	{r7}
 80065d6:	b083      	sub	sp, #12
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	1c5a      	adds	r2, r3, #1
 80065e2:	607a      	str	r2, [r7, #4]
 80065e4:	683a      	ldr	r2, [r7, #0]
 80065e6:	b2d2      	uxtb	r2, r2
 80065e8:	701a      	strb	r2, [r3, #0]
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	0a1b      	lsrs	r3, r3, #8
 80065ee:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	1c5a      	adds	r2, r3, #1
 80065f4:	607a      	str	r2, [r7, #4]
 80065f6:	683a      	ldr	r2, [r7, #0]
 80065f8:	b2d2      	uxtb	r2, r2
 80065fa:	701a      	strb	r2, [r3, #0]
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	0a1b      	lsrs	r3, r3, #8
 8006600:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	1c5a      	adds	r2, r3, #1
 8006606:	607a      	str	r2, [r7, #4]
 8006608:	683a      	ldr	r2, [r7, #0]
 800660a:	b2d2      	uxtb	r2, r2
 800660c:	701a      	strb	r2, [r3, #0]
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	0a1b      	lsrs	r3, r3, #8
 8006612:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	1c5a      	adds	r2, r3, #1
 8006618:	607a      	str	r2, [r7, #4]
 800661a:	683a      	ldr	r2, [r7, #0]
 800661c:	b2d2      	uxtb	r2, r2
 800661e:	701a      	strb	r2, [r3, #0]
}
 8006620:	bf00      	nop
 8006622:	370c      	adds	r7, #12
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr

0800662c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800662c:	b480      	push	{r7}
 800662e:	b087      	sub	sp, #28
 8006630:	af00      	add	r7, sp, #0
 8006632:	60f8      	str	r0, [r7, #12]
 8006634:	60b9      	str	r1, [r7, #8]
 8006636:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d00d      	beq.n	8006662 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8006646:	693a      	ldr	r2, [r7, #16]
 8006648:	1c53      	adds	r3, r2, #1
 800664a:	613b      	str	r3, [r7, #16]
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	1c59      	adds	r1, r3, #1
 8006650:	6179      	str	r1, [r7, #20]
 8006652:	7812      	ldrb	r2, [r2, #0]
 8006654:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	3b01      	subs	r3, #1
 800665a:	607b      	str	r3, [r7, #4]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d1f1      	bne.n	8006646 <mem_cpy+0x1a>
	}
}
 8006662:	bf00      	nop
 8006664:	371c      	adds	r7, #28
 8006666:	46bd      	mov	sp, r7
 8006668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666c:	4770      	bx	lr

0800666e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800666e:	b480      	push	{r7}
 8006670:	b087      	sub	sp, #28
 8006672:	af00      	add	r7, sp, #0
 8006674:	60f8      	str	r0, [r7, #12]
 8006676:	60b9      	str	r1, [r7, #8]
 8006678:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	1c5a      	adds	r2, r3, #1
 8006682:	617a      	str	r2, [r7, #20]
 8006684:	68ba      	ldr	r2, [r7, #8]
 8006686:	b2d2      	uxtb	r2, r2
 8006688:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	3b01      	subs	r3, #1
 800668e:	607b      	str	r3, [r7, #4]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d1f3      	bne.n	800667e <mem_set+0x10>
}
 8006696:	bf00      	nop
 8006698:	bf00      	nop
 800669a:	371c      	adds	r7, #28
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr

080066a4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80066a4:	b480      	push	{r7}
 80066a6:	b089      	sub	sp, #36	@ 0x24
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	60f8      	str	r0, [r7, #12]
 80066ac:	60b9      	str	r1, [r7, #8]
 80066ae:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	61fb      	str	r3, [r7, #28]
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80066b8:	2300      	movs	r3, #0
 80066ba:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80066bc:	69fb      	ldr	r3, [r7, #28]
 80066be:	1c5a      	adds	r2, r3, #1
 80066c0:	61fa      	str	r2, [r7, #28]
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	4619      	mov	r1, r3
 80066c6:	69bb      	ldr	r3, [r7, #24]
 80066c8:	1c5a      	adds	r2, r3, #1
 80066ca:	61ba      	str	r2, [r7, #24]
 80066cc:	781b      	ldrb	r3, [r3, #0]
 80066ce:	1acb      	subs	r3, r1, r3
 80066d0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	3b01      	subs	r3, #1
 80066d6:	607b      	str	r3, [r7, #4]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d002      	beq.n	80066e4 <mem_cmp+0x40>
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d0eb      	beq.n	80066bc <mem_cmp+0x18>

	return r;
 80066e4:	697b      	ldr	r3, [r7, #20]
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	3724      	adds	r7, #36	@ 0x24
 80066ea:	46bd      	mov	sp, r7
 80066ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f0:	4770      	bx	lr

080066f2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80066f2:	b480      	push	{r7}
 80066f4:	b083      	sub	sp, #12
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	6078      	str	r0, [r7, #4]
 80066fa:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80066fc:	e002      	b.n	8006704 <chk_chr+0x12>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	3301      	adds	r3, #1
 8006702:	607b      	str	r3, [r7, #4]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	781b      	ldrb	r3, [r3, #0]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d005      	beq.n	8006718 <chk_chr+0x26>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	781b      	ldrb	r3, [r3, #0]
 8006710:	461a      	mov	r2, r3
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	4293      	cmp	r3, r2
 8006716:	d1f2      	bne.n	80066fe <chk_chr+0xc>
	return *str;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	781b      	ldrb	r3, [r3, #0]
}
 800671c:	4618      	mov	r0, r3
 800671e:	370c      	adds	r7, #12
 8006720:	46bd      	mov	sp, r7
 8006722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006726:	4770      	bx	lr

08006728 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006728:	b480      	push	{r7}
 800672a:	b085      	sub	sp, #20
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
 8006730:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006732:	2300      	movs	r3, #0
 8006734:	60bb      	str	r3, [r7, #8]
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	60fb      	str	r3, [r7, #12]
 800673a:	e029      	b.n	8006790 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800673c:	4a27      	ldr	r2, [pc, #156]	@ (80067dc <chk_lock+0xb4>)
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	011b      	lsls	r3, r3, #4
 8006742:	4413      	add	r3, r2
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d01d      	beq.n	8006786 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800674a:	4a24      	ldr	r2, [pc, #144]	@ (80067dc <chk_lock+0xb4>)
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	011b      	lsls	r3, r3, #4
 8006750:	4413      	add	r3, r2
 8006752:	681a      	ldr	r2, [r3, #0]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	429a      	cmp	r2, r3
 800675a:	d116      	bne.n	800678a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800675c:	4a1f      	ldr	r2, [pc, #124]	@ (80067dc <chk_lock+0xb4>)
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	011b      	lsls	r3, r3, #4
 8006762:	4413      	add	r3, r2
 8006764:	3304      	adds	r3, #4
 8006766:	681a      	ldr	r2, [r3, #0]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800676c:	429a      	cmp	r2, r3
 800676e:	d10c      	bne.n	800678a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006770:	4a1a      	ldr	r2, [pc, #104]	@ (80067dc <chk_lock+0xb4>)
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	011b      	lsls	r3, r3, #4
 8006776:	4413      	add	r3, r2
 8006778:	3308      	adds	r3, #8
 800677a:	681a      	ldr	r2, [r3, #0]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006780:	429a      	cmp	r2, r3
 8006782:	d102      	bne.n	800678a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006784:	e007      	b.n	8006796 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8006786:	2301      	movs	r3, #1
 8006788:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	3301      	adds	r3, #1
 800678e:	60fb      	str	r3, [r7, #12]
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2b01      	cmp	r3, #1
 8006794:	d9d2      	bls.n	800673c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2b02      	cmp	r3, #2
 800679a:	d109      	bne.n	80067b0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d102      	bne.n	80067a8 <chk_lock+0x80>
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	2b02      	cmp	r3, #2
 80067a6:	d101      	bne.n	80067ac <chk_lock+0x84>
 80067a8:	2300      	movs	r3, #0
 80067aa:	e010      	b.n	80067ce <chk_lock+0xa6>
 80067ac:	2312      	movs	r3, #18
 80067ae:	e00e      	b.n	80067ce <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d108      	bne.n	80067c8 <chk_lock+0xa0>
 80067b6:	4a09      	ldr	r2, [pc, #36]	@ (80067dc <chk_lock+0xb4>)
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	011b      	lsls	r3, r3, #4
 80067bc:	4413      	add	r3, r2
 80067be:	330c      	adds	r3, #12
 80067c0:	881b      	ldrh	r3, [r3, #0]
 80067c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80067c6:	d101      	bne.n	80067cc <chk_lock+0xa4>
 80067c8:	2310      	movs	r3, #16
 80067ca:	e000      	b.n	80067ce <chk_lock+0xa6>
 80067cc:	2300      	movs	r3, #0
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3714      	adds	r7, #20
 80067d2:	46bd      	mov	sp, r7
 80067d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d8:	4770      	bx	lr
 80067da:	bf00      	nop
 80067dc:	20002310 	.word	0x20002310

080067e0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80067e0:	b480      	push	{r7}
 80067e2:	b083      	sub	sp, #12
 80067e4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80067e6:	2300      	movs	r3, #0
 80067e8:	607b      	str	r3, [r7, #4]
 80067ea:	e002      	b.n	80067f2 <enq_lock+0x12>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	3301      	adds	r3, #1
 80067f0:	607b      	str	r3, [r7, #4]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2b01      	cmp	r3, #1
 80067f6:	d806      	bhi.n	8006806 <enq_lock+0x26>
 80067f8:	4a09      	ldr	r2, [pc, #36]	@ (8006820 <enq_lock+0x40>)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	011b      	lsls	r3, r3, #4
 80067fe:	4413      	add	r3, r2
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d1f2      	bne.n	80067ec <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2b02      	cmp	r3, #2
 800680a:	bf14      	ite	ne
 800680c:	2301      	movne	r3, #1
 800680e:	2300      	moveq	r3, #0
 8006810:	b2db      	uxtb	r3, r3
}
 8006812:	4618      	mov	r0, r3
 8006814:	370c      	adds	r7, #12
 8006816:	46bd      	mov	sp, r7
 8006818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681c:	4770      	bx	lr
 800681e:	bf00      	nop
 8006820:	20002310 	.word	0x20002310

08006824 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006824:	b480      	push	{r7}
 8006826:	b085      	sub	sp, #20
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
 800682c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800682e:	2300      	movs	r3, #0
 8006830:	60fb      	str	r3, [r7, #12]
 8006832:	e01f      	b.n	8006874 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8006834:	4a41      	ldr	r2, [pc, #260]	@ (800693c <inc_lock+0x118>)
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	011b      	lsls	r3, r3, #4
 800683a:	4413      	add	r3, r2
 800683c:	681a      	ldr	r2, [r3, #0]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	429a      	cmp	r2, r3
 8006844:	d113      	bne.n	800686e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8006846:	4a3d      	ldr	r2, [pc, #244]	@ (800693c <inc_lock+0x118>)
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	011b      	lsls	r3, r3, #4
 800684c:	4413      	add	r3, r2
 800684e:	3304      	adds	r3, #4
 8006850:	681a      	ldr	r2, [r3, #0]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8006856:	429a      	cmp	r2, r3
 8006858:	d109      	bne.n	800686e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800685a:	4a38      	ldr	r2, [pc, #224]	@ (800693c <inc_lock+0x118>)
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	011b      	lsls	r3, r3, #4
 8006860:	4413      	add	r3, r2
 8006862:	3308      	adds	r3, #8
 8006864:	681a      	ldr	r2, [r3, #0]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800686a:	429a      	cmp	r2, r3
 800686c:	d006      	beq.n	800687c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	3301      	adds	r3, #1
 8006872:	60fb      	str	r3, [r7, #12]
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2b01      	cmp	r3, #1
 8006878:	d9dc      	bls.n	8006834 <inc_lock+0x10>
 800687a:	e000      	b.n	800687e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800687c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2b02      	cmp	r3, #2
 8006882:	d132      	bne.n	80068ea <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006884:	2300      	movs	r3, #0
 8006886:	60fb      	str	r3, [r7, #12]
 8006888:	e002      	b.n	8006890 <inc_lock+0x6c>
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	3301      	adds	r3, #1
 800688e:	60fb      	str	r3, [r7, #12]
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2b01      	cmp	r3, #1
 8006894:	d806      	bhi.n	80068a4 <inc_lock+0x80>
 8006896:	4a29      	ldr	r2, [pc, #164]	@ (800693c <inc_lock+0x118>)
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	011b      	lsls	r3, r3, #4
 800689c:	4413      	add	r3, r2
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d1f2      	bne.n	800688a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2b02      	cmp	r3, #2
 80068a8:	d101      	bne.n	80068ae <inc_lock+0x8a>
 80068aa:	2300      	movs	r3, #0
 80068ac:	e040      	b.n	8006930 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	4922      	ldr	r1, [pc, #136]	@ (800693c <inc_lock+0x118>)
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	011b      	lsls	r3, r3, #4
 80068b8:	440b      	add	r3, r1
 80068ba:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	689a      	ldr	r2, [r3, #8]
 80068c0:	491e      	ldr	r1, [pc, #120]	@ (800693c <inc_lock+0x118>)
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	011b      	lsls	r3, r3, #4
 80068c6:	440b      	add	r3, r1
 80068c8:	3304      	adds	r3, #4
 80068ca:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	695a      	ldr	r2, [r3, #20]
 80068d0:	491a      	ldr	r1, [pc, #104]	@ (800693c <inc_lock+0x118>)
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	011b      	lsls	r3, r3, #4
 80068d6:	440b      	add	r3, r1
 80068d8:	3308      	adds	r3, #8
 80068da:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80068dc:	4a17      	ldr	r2, [pc, #92]	@ (800693c <inc_lock+0x118>)
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	011b      	lsls	r3, r3, #4
 80068e2:	4413      	add	r3, r2
 80068e4:	330c      	adds	r3, #12
 80068e6:	2200      	movs	r2, #0
 80068e8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d009      	beq.n	8006904 <inc_lock+0xe0>
 80068f0:	4a12      	ldr	r2, [pc, #72]	@ (800693c <inc_lock+0x118>)
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	011b      	lsls	r3, r3, #4
 80068f6:	4413      	add	r3, r2
 80068f8:	330c      	adds	r3, #12
 80068fa:	881b      	ldrh	r3, [r3, #0]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d001      	beq.n	8006904 <inc_lock+0xe0>
 8006900:	2300      	movs	r3, #0
 8006902:	e015      	b.n	8006930 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d108      	bne.n	800691c <inc_lock+0xf8>
 800690a:	4a0c      	ldr	r2, [pc, #48]	@ (800693c <inc_lock+0x118>)
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	011b      	lsls	r3, r3, #4
 8006910:	4413      	add	r3, r2
 8006912:	330c      	adds	r3, #12
 8006914:	881b      	ldrh	r3, [r3, #0]
 8006916:	3301      	adds	r3, #1
 8006918:	b29a      	uxth	r2, r3
 800691a:	e001      	b.n	8006920 <inc_lock+0xfc>
 800691c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006920:	4906      	ldr	r1, [pc, #24]	@ (800693c <inc_lock+0x118>)
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	011b      	lsls	r3, r3, #4
 8006926:	440b      	add	r3, r1
 8006928:	330c      	adds	r3, #12
 800692a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	3301      	adds	r3, #1
}
 8006930:	4618      	mov	r0, r3
 8006932:	3714      	adds	r7, #20
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr
 800693c:	20002310 	.word	0x20002310

08006940 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006940:	b480      	push	{r7}
 8006942:	b085      	sub	sp, #20
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	3b01      	subs	r3, #1
 800694c:	607b      	str	r3, [r7, #4]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2b01      	cmp	r3, #1
 8006952:	d825      	bhi.n	80069a0 <dec_lock+0x60>
		n = Files[i].ctr;
 8006954:	4a17      	ldr	r2, [pc, #92]	@ (80069b4 <dec_lock+0x74>)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	011b      	lsls	r3, r3, #4
 800695a:	4413      	add	r3, r2
 800695c:	330c      	adds	r3, #12
 800695e:	881b      	ldrh	r3, [r3, #0]
 8006960:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006962:	89fb      	ldrh	r3, [r7, #14]
 8006964:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006968:	d101      	bne.n	800696e <dec_lock+0x2e>
 800696a:	2300      	movs	r3, #0
 800696c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800696e:	89fb      	ldrh	r3, [r7, #14]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d002      	beq.n	800697a <dec_lock+0x3a>
 8006974:	89fb      	ldrh	r3, [r7, #14]
 8006976:	3b01      	subs	r3, #1
 8006978:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800697a:	4a0e      	ldr	r2, [pc, #56]	@ (80069b4 <dec_lock+0x74>)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	011b      	lsls	r3, r3, #4
 8006980:	4413      	add	r3, r2
 8006982:	330c      	adds	r3, #12
 8006984:	89fa      	ldrh	r2, [r7, #14]
 8006986:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006988:	89fb      	ldrh	r3, [r7, #14]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d105      	bne.n	800699a <dec_lock+0x5a>
 800698e:	4a09      	ldr	r2, [pc, #36]	@ (80069b4 <dec_lock+0x74>)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	011b      	lsls	r3, r3, #4
 8006994:	4413      	add	r3, r2
 8006996:	2200      	movs	r2, #0
 8006998:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800699a:	2300      	movs	r3, #0
 800699c:	737b      	strb	r3, [r7, #13]
 800699e:	e001      	b.n	80069a4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80069a0:	2302      	movs	r3, #2
 80069a2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80069a4:	7b7b      	ldrb	r3, [r7, #13]
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3714      	adds	r7, #20
 80069aa:	46bd      	mov	sp, r7
 80069ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b0:	4770      	bx	lr
 80069b2:	bf00      	nop
 80069b4:	20002310 	.word	0x20002310

080069b8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b085      	sub	sp, #20
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80069c0:	2300      	movs	r3, #0
 80069c2:	60fb      	str	r3, [r7, #12]
 80069c4:	e010      	b.n	80069e8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80069c6:	4a0d      	ldr	r2, [pc, #52]	@ (80069fc <clear_lock+0x44>)
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	011b      	lsls	r3, r3, #4
 80069cc:	4413      	add	r3, r2
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	687a      	ldr	r2, [r7, #4]
 80069d2:	429a      	cmp	r2, r3
 80069d4:	d105      	bne.n	80069e2 <clear_lock+0x2a>
 80069d6:	4a09      	ldr	r2, [pc, #36]	@ (80069fc <clear_lock+0x44>)
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	011b      	lsls	r3, r3, #4
 80069dc:	4413      	add	r3, r2
 80069de:	2200      	movs	r2, #0
 80069e0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	3301      	adds	r3, #1
 80069e6:	60fb      	str	r3, [r7, #12]
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2b01      	cmp	r3, #1
 80069ec:	d9eb      	bls.n	80069c6 <clear_lock+0xe>
	}
}
 80069ee:	bf00      	nop
 80069f0:	bf00      	nop
 80069f2:	3714      	adds	r7, #20
 80069f4:	46bd      	mov	sp, r7
 80069f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fa:	4770      	bx	lr
 80069fc:	20002310 	.word	0x20002310

08006a00 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b086      	sub	sp, #24
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	78db      	ldrb	r3, [r3, #3]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d034      	beq.n	8006a7e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a18:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	7858      	ldrb	r0, [r3, #1]
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8006a24:	2301      	movs	r3, #1
 8006a26:	697a      	ldr	r2, [r7, #20]
 8006a28:	f7ff fd40 	bl	80064ac <disk_write>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d002      	beq.n	8006a38 <sync_window+0x38>
			res = FR_DISK_ERR;
 8006a32:	2301      	movs	r3, #1
 8006a34:	73fb      	strb	r3, [r7, #15]
 8006a36:	e022      	b.n	8006a7e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a42:	697a      	ldr	r2, [r7, #20]
 8006a44:	1ad2      	subs	r2, r2, r3
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	69db      	ldr	r3, [r3, #28]
 8006a4a:	429a      	cmp	r2, r3
 8006a4c:	d217      	bcs.n	8006a7e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	789b      	ldrb	r3, [r3, #2]
 8006a52:	613b      	str	r3, [r7, #16]
 8006a54:	e010      	b.n	8006a78 <sync_window+0x78>
					wsect += fs->fsize;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	69db      	ldr	r3, [r3, #28]
 8006a5a:	697a      	ldr	r2, [r7, #20]
 8006a5c:	4413      	add	r3, r2
 8006a5e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	7858      	ldrb	r0, [r3, #1]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	697a      	ldr	r2, [r7, #20]
 8006a6e:	f7ff fd1d 	bl	80064ac <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	3b01      	subs	r3, #1
 8006a76:	613b      	str	r3, [r7, #16]
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	2b01      	cmp	r3, #1
 8006a7c:	d8eb      	bhi.n	8006a56 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8006a7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	3718      	adds	r7, #24
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}

08006a88 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b084      	sub	sp, #16
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
 8006a90:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006a92:	2300      	movs	r3, #0
 8006a94:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a9a:	683a      	ldr	r2, [r7, #0]
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	d01b      	beq.n	8006ad8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f7ff ffad 	bl	8006a00 <sync_window>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006aaa:	7bfb      	ldrb	r3, [r7, #15]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d113      	bne.n	8006ad8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	7858      	ldrb	r0, [r3, #1]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8006aba:	2301      	movs	r3, #1
 8006abc:	683a      	ldr	r2, [r7, #0]
 8006abe:	f7ff fcd5 	bl	800646c <disk_read>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d004      	beq.n	8006ad2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006ac8:	f04f 33ff 	mov.w	r3, #4294967295
 8006acc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006ace:	2301      	movs	r3, #1
 8006ad0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	683a      	ldr	r2, [r7, #0]
 8006ad6:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 8006ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3710      	adds	r7, #16
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}
	...

08006ae4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b084      	sub	sp, #16
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f7ff ff87 	bl	8006a00 <sync_window>
 8006af2:	4603      	mov	r3, r0
 8006af4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006af6:	7bfb      	ldrb	r3, [r7, #15]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d159      	bne.n	8006bb0 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	781b      	ldrb	r3, [r3, #0]
 8006b00:	2b03      	cmp	r3, #3
 8006b02:	d149      	bne.n	8006b98 <sync_fs+0xb4>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	791b      	ldrb	r3, [r3, #4]
 8006b08:	2b01      	cmp	r3, #1
 8006b0a:	d145      	bne.n	8006b98 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	899b      	ldrh	r3, [r3, #12]
 8006b16:	461a      	mov	r2, r3
 8006b18:	2100      	movs	r1, #0
 8006b1a:	f7ff fda8 	bl	800666e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	3334      	adds	r3, #52	@ 0x34
 8006b22:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006b26:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f7ff fd37 	bl	800659e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	3334      	adds	r3, #52	@ 0x34
 8006b34:	4921      	ldr	r1, [pc, #132]	@ (8006bbc <sync_fs+0xd8>)
 8006b36:	4618      	mov	r0, r3
 8006b38:	f7ff fd4c 	bl	80065d4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	3334      	adds	r3, #52	@ 0x34
 8006b40:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8006b44:	491e      	ldr	r1, [pc, #120]	@ (8006bc0 <sync_fs+0xdc>)
 8006b46:	4618      	mov	r0, r3
 8006b48:	f7ff fd44 	bl	80065d4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	3334      	adds	r3, #52	@ 0x34
 8006b50:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	695b      	ldr	r3, [r3, #20]
 8006b58:	4619      	mov	r1, r3
 8006b5a:	4610      	mov	r0, r2
 8006b5c:	f7ff fd3a 	bl	80065d4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	3334      	adds	r3, #52	@ 0x34
 8006b64:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	691b      	ldr	r3, [r3, #16]
 8006b6c:	4619      	mov	r1, r3
 8006b6e:	4610      	mov	r0, r2
 8006b70:	f7ff fd30 	bl	80065d4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6a1b      	ldr	r3, [r3, #32]
 8006b78:	1c5a      	adds	r2, r3, #1
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	7858      	ldrb	r0, [r3, #1]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	f7ff fc8d 	bl	80064ac <disk_write>
			fs->fsi_flag = 0;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2200      	movs	r2, #0
 8006b96:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	785b      	ldrb	r3, [r3, #1]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	2100      	movs	r1, #0
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	f7ff fca3 	bl	80064ec <disk_ioctl>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d001      	beq.n	8006bb0 <sync_fs+0xcc>
 8006bac:	2301      	movs	r3, #1
 8006bae:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006bb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3710      	adds	r7, #16
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}
 8006bba:	bf00      	nop
 8006bbc:	41615252 	.word	0x41615252
 8006bc0:	61417272 	.word	0x61417272

08006bc4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b083      	sub	sp, #12
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
 8006bcc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	3b02      	subs	r3, #2
 8006bd2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	699b      	ldr	r3, [r3, #24]
 8006bd8:	3b02      	subs	r3, #2
 8006bda:	683a      	ldr	r2, [r7, #0]
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	d301      	bcc.n	8006be4 <clust2sect+0x20>
 8006be0:	2300      	movs	r3, #0
 8006be2:	e008      	b.n	8006bf6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	895b      	ldrh	r3, [r3, #10]
 8006be8:	461a      	mov	r2, r3
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	fb03 f202 	mul.w	r2, r3, r2
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bf4:	4413      	add	r3, r2
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	370c      	adds	r7, #12
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c00:	4770      	bx	lr

08006c02 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8006c02:	b580      	push	{r7, lr}
 8006c04:	b086      	sub	sp, #24
 8006c06:	af00      	add	r7, sp, #0
 8006c08:	6078      	str	r0, [r7, #4]
 8006c0a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	2b01      	cmp	r3, #1
 8006c16:	d904      	bls.n	8006c22 <get_fat+0x20>
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	699b      	ldr	r3, [r3, #24]
 8006c1c:	683a      	ldr	r2, [r7, #0]
 8006c1e:	429a      	cmp	r2, r3
 8006c20:	d302      	bcc.n	8006c28 <get_fat+0x26>
		val = 1;	/* Internal error */
 8006c22:	2301      	movs	r3, #1
 8006c24:	617b      	str	r3, [r7, #20]
 8006c26:	e0ba      	b.n	8006d9e <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006c28:	f04f 33ff 	mov.w	r3, #4294967295
 8006c2c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	781b      	ldrb	r3, [r3, #0]
 8006c32:	2b03      	cmp	r3, #3
 8006c34:	f000 8082 	beq.w	8006d3c <get_fat+0x13a>
 8006c38:	2b03      	cmp	r3, #3
 8006c3a:	f300 80a6 	bgt.w	8006d8a <get_fat+0x188>
 8006c3e:	2b01      	cmp	r3, #1
 8006c40:	d002      	beq.n	8006c48 <get_fat+0x46>
 8006c42:	2b02      	cmp	r3, #2
 8006c44:	d055      	beq.n	8006cf2 <get_fat+0xf0>
 8006c46:	e0a0      	b.n	8006d8a <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	60fb      	str	r3, [r7, #12]
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	085b      	lsrs	r3, r3, #1
 8006c50:	68fa      	ldr	r2, [r7, #12]
 8006c52:	4413      	add	r3, r2
 8006c54:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	899b      	ldrh	r3, [r3, #12]
 8006c5e:	4619      	mov	r1, r3
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	fbb3 f3f1 	udiv	r3, r3, r1
 8006c66:	4413      	add	r3, r2
 8006c68:	4619      	mov	r1, r3
 8006c6a:	6938      	ldr	r0, [r7, #16]
 8006c6c:	f7ff ff0c 	bl	8006a88 <move_window>
 8006c70:	4603      	mov	r3, r0
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	f040 808c 	bne.w	8006d90 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	1c5a      	adds	r2, r3, #1
 8006c7c:	60fa      	str	r2, [r7, #12]
 8006c7e:	693a      	ldr	r2, [r7, #16]
 8006c80:	8992      	ldrh	r2, [r2, #12]
 8006c82:	fbb3 f1f2 	udiv	r1, r3, r2
 8006c86:	fb01 f202 	mul.w	r2, r1, r2
 8006c8a:	1a9b      	subs	r3, r3, r2
 8006c8c:	693a      	ldr	r2, [r7, #16]
 8006c8e:	4413      	add	r3, r2
 8006c90:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006c94:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	899b      	ldrh	r3, [r3, #12]
 8006c9e:	4619      	mov	r1, r3
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	fbb3 f3f1 	udiv	r3, r3, r1
 8006ca6:	4413      	add	r3, r2
 8006ca8:	4619      	mov	r1, r3
 8006caa:	6938      	ldr	r0, [r7, #16]
 8006cac:	f7ff feec 	bl	8006a88 <move_window>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d16e      	bne.n	8006d94 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	899b      	ldrh	r3, [r3, #12]
 8006cba:	461a      	mov	r2, r3
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	fbb3 f1f2 	udiv	r1, r3, r2
 8006cc2:	fb01 f202 	mul.w	r2, r1, r2
 8006cc6:	1a9b      	subs	r3, r3, r2
 8006cc8:	693a      	ldr	r2, [r7, #16]
 8006cca:	4413      	add	r3, r2
 8006ccc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006cd0:	021b      	lsls	r3, r3, #8
 8006cd2:	68ba      	ldr	r2, [r7, #8]
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	f003 0301 	and.w	r3, r3, #1
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d002      	beq.n	8006ce8 <get_fat+0xe6>
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	091b      	lsrs	r3, r3, #4
 8006ce6:	e002      	b.n	8006cee <get_fat+0xec>
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006cee:	617b      	str	r3, [r7, #20]
			break;
 8006cf0:	e055      	b.n	8006d9e <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	899b      	ldrh	r3, [r3, #12]
 8006cfa:	085b      	lsrs	r3, r3, #1
 8006cfc:	b29b      	uxth	r3, r3
 8006cfe:	4619      	mov	r1, r3
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	fbb3 f3f1 	udiv	r3, r3, r1
 8006d06:	4413      	add	r3, r2
 8006d08:	4619      	mov	r1, r3
 8006d0a:	6938      	ldr	r0, [r7, #16]
 8006d0c:	f7ff febc 	bl	8006a88 <move_window>
 8006d10:	4603      	mov	r3, r0
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d140      	bne.n	8006d98 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	005b      	lsls	r3, r3, #1
 8006d20:	693a      	ldr	r2, [r7, #16]
 8006d22:	8992      	ldrh	r2, [r2, #12]
 8006d24:	fbb3 f0f2 	udiv	r0, r3, r2
 8006d28:	fb00 f202 	mul.w	r2, r0, r2
 8006d2c:	1a9b      	subs	r3, r3, r2
 8006d2e:	440b      	add	r3, r1
 8006d30:	4618      	mov	r0, r3
 8006d32:	f7ff fbf9 	bl	8006528 <ld_word>
 8006d36:	4603      	mov	r3, r0
 8006d38:	617b      	str	r3, [r7, #20]
			break;
 8006d3a:	e030      	b.n	8006d9e <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	899b      	ldrh	r3, [r3, #12]
 8006d44:	089b      	lsrs	r3, r3, #2
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	4619      	mov	r1, r3
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	fbb3 f3f1 	udiv	r3, r3, r1
 8006d50:	4413      	add	r3, r2
 8006d52:	4619      	mov	r1, r3
 8006d54:	6938      	ldr	r0, [r7, #16]
 8006d56:	f7ff fe97 	bl	8006a88 <move_window>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d11d      	bne.n	8006d9c <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	009b      	lsls	r3, r3, #2
 8006d6a:	693a      	ldr	r2, [r7, #16]
 8006d6c:	8992      	ldrh	r2, [r2, #12]
 8006d6e:	fbb3 f0f2 	udiv	r0, r3, r2
 8006d72:	fb00 f202 	mul.w	r2, r0, r2
 8006d76:	1a9b      	subs	r3, r3, r2
 8006d78:	440b      	add	r3, r1
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f7ff fbec 	bl	8006558 <ld_dword>
 8006d80:	4603      	mov	r3, r0
 8006d82:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006d86:	617b      	str	r3, [r7, #20]
			break;
 8006d88:	e009      	b.n	8006d9e <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	617b      	str	r3, [r7, #20]
 8006d8e:	e006      	b.n	8006d9e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006d90:	bf00      	nop
 8006d92:	e004      	b.n	8006d9e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006d94:	bf00      	nop
 8006d96:	e002      	b.n	8006d9e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006d98:	bf00      	nop
 8006d9a:	e000      	b.n	8006d9e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006d9c:	bf00      	nop
		}
	}

	return val;
 8006d9e:	697b      	ldr	r3, [r7, #20]
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3718      	adds	r7, #24
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}

08006da8 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006da8:	b590      	push	{r4, r7, lr}
 8006daa:	b089      	sub	sp, #36	@ 0x24
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	60f8      	str	r0, [r7, #12]
 8006db0:	60b9      	str	r1, [r7, #8]
 8006db2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006db4:	2302      	movs	r3, #2
 8006db6:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	2b01      	cmp	r3, #1
 8006dbc:	f240 8109 	bls.w	8006fd2 <put_fat+0x22a>
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	699b      	ldr	r3, [r3, #24]
 8006dc4:	68ba      	ldr	r2, [r7, #8]
 8006dc6:	429a      	cmp	r2, r3
 8006dc8:	f080 8103 	bcs.w	8006fd2 <put_fat+0x22a>
		switch (fs->fs_type) {
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	781b      	ldrb	r3, [r3, #0]
 8006dd0:	2b03      	cmp	r3, #3
 8006dd2:	f000 80b6 	beq.w	8006f42 <put_fat+0x19a>
 8006dd6:	2b03      	cmp	r3, #3
 8006dd8:	f300 80fb 	bgt.w	8006fd2 <put_fat+0x22a>
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	d003      	beq.n	8006de8 <put_fat+0x40>
 8006de0:	2b02      	cmp	r3, #2
 8006de2:	f000 8083 	beq.w	8006eec <put_fat+0x144>
 8006de6:	e0f4      	b.n	8006fd2 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	61bb      	str	r3, [r7, #24]
 8006dec:	69bb      	ldr	r3, [r7, #24]
 8006dee:	085b      	lsrs	r3, r3, #1
 8006df0:	69ba      	ldr	r2, [r7, #24]
 8006df2:	4413      	add	r3, r2
 8006df4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	899b      	ldrh	r3, [r3, #12]
 8006dfe:	4619      	mov	r1, r3
 8006e00:	69bb      	ldr	r3, [r7, #24]
 8006e02:	fbb3 f3f1 	udiv	r3, r3, r1
 8006e06:	4413      	add	r3, r2
 8006e08:	4619      	mov	r1, r3
 8006e0a:	68f8      	ldr	r0, [r7, #12]
 8006e0c:	f7ff fe3c 	bl	8006a88 <move_window>
 8006e10:	4603      	mov	r3, r0
 8006e12:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006e14:	7ffb      	ldrb	r3, [r7, #31]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	f040 80d4 	bne.w	8006fc4 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8006e22:	69bb      	ldr	r3, [r7, #24]
 8006e24:	1c5a      	adds	r2, r3, #1
 8006e26:	61ba      	str	r2, [r7, #24]
 8006e28:	68fa      	ldr	r2, [r7, #12]
 8006e2a:	8992      	ldrh	r2, [r2, #12]
 8006e2c:	fbb3 f0f2 	udiv	r0, r3, r2
 8006e30:	fb00 f202 	mul.w	r2, r0, r2
 8006e34:	1a9b      	subs	r3, r3, r2
 8006e36:	440b      	add	r3, r1
 8006e38:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	f003 0301 	and.w	r3, r3, #1
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d00d      	beq.n	8006e60 <put_fat+0xb8>
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	781b      	ldrb	r3, [r3, #0]
 8006e48:	b25b      	sxtb	r3, r3
 8006e4a:	f003 030f 	and.w	r3, r3, #15
 8006e4e:	b25a      	sxtb	r2, r3
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	b2db      	uxtb	r3, r3
 8006e54:	011b      	lsls	r3, r3, #4
 8006e56:	b25b      	sxtb	r3, r3
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	b25b      	sxtb	r3, r3
 8006e5c:	b2db      	uxtb	r3, r3
 8006e5e:	e001      	b.n	8006e64 <put_fat+0xbc>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	b2db      	uxtb	r3, r3
 8006e64:	697a      	ldr	r2, [r7, #20]
 8006e66:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	899b      	ldrh	r3, [r3, #12]
 8006e76:	4619      	mov	r1, r3
 8006e78:	69bb      	ldr	r3, [r7, #24]
 8006e7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8006e7e:	4413      	add	r3, r2
 8006e80:	4619      	mov	r1, r3
 8006e82:	68f8      	ldr	r0, [r7, #12]
 8006e84:	f7ff fe00 	bl	8006a88 <move_window>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006e8c:	7ffb      	ldrb	r3, [r7, #31]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	f040 809a 	bne.w	8006fc8 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	899b      	ldrh	r3, [r3, #12]
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	69bb      	ldr	r3, [r7, #24]
 8006ea2:	fbb3 f0f2 	udiv	r0, r3, r2
 8006ea6:	fb00 f202 	mul.w	r2, r0, r2
 8006eaa:	1a9b      	subs	r3, r3, r2
 8006eac:	440b      	add	r3, r1
 8006eae:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	f003 0301 	and.w	r3, r3, #1
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d003      	beq.n	8006ec2 <put_fat+0x11a>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	091b      	lsrs	r3, r3, #4
 8006ebe:	b2db      	uxtb	r3, r3
 8006ec0:	e00e      	b.n	8006ee0 <put_fat+0x138>
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	781b      	ldrb	r3, [r3, #0]
 8006ec6:	b25b      	sxtb	r3, r3
 8006ec8:	f023 030f 	bic.w	r3, r3, #15
 8006ecc:	b25a      	sxtb	r2, r3
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	0a1b      	lsrs	r3, r3, #8
 8006ed2:	b25b      	sxtb	r3, r3
 8006ed4:	f003 030f 	and.w	r3, r3, #15
 8006ed8:	b25b      	sxtb	r3, r3
 8006eda:	4313      	orrs	r3, r2
 8006edc:	b25b      	sxtb	r3, r3
 8006ede:	b2db      	uxtb	r3, r3
 8006ee0:	697a      	ldr	r2, [r7, #20]
 8006ee2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	70da      	strb	r2, [r3, #3]
			break;
 8006eea:	e072      	b.n	8006fd2 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	899b      	ldrh	r3, [r3, #12]
 8006ef4:	085b      	lsrs	r3, r3, #1
 8006ef6:	b29b      	uxth	r3, r3
 8006ef8:	4619      	mov	r1, r3
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	fbb3 f3f1 	udiv	r3, r3, r1
 8006f00:	4413      	add	r3, r2
 8006f02:	4619      	mov	r1, r3
 8006f04:	68f8      	ldr	r0, [r7, #12]
 8006f06:	f7ff fdbf 	bl	8006a88 <move_window>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006f0e:	7ffb      	ldrb	r3, [r7, #31]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d15b      	bne.n	8006fcc <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	005b      	lsls	r3, r3, #1
 8006f1e:	68fa      	ldr	r2, [r7, #12]
 8006f20:	8992      	ldrh	r2, [r2, #12]
 8006f22:	fbb3 f0f2 	udiv	r0, r3, r2
 8006f26:	fb00 f202 	mul.w	r2, r0, r2
 8006f2a:	1a9b      	subs	r3, r3, r2
 8006f2c:	440b      	add	r3, r1
 8006f2e:	687a      	ldr	r2, [r7, #4]
 8006f30:	b292      	uxth	r2, r2
 8006f32:	4611      	mov	r1, r2
 8006f34:	4618      	mov	r0, r3
 8006f36:	f7ff fb32 	bl	800659e <st_word>
			fs->wflag = 1;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2201      	movs	r2, #1
 8006f3e:	70da      	strb	r2, [r3, #3]
			break;
 8006f40:	e047      	b.n	8006fd2 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	899b      	ldrh	r3, [r3, #12]
 8006f4a:	089b      	lsrs	r3, r3, #2
 8006f4c:	b29b      	uxth	r3, r3
 8006f4e:	4619      	mov	r1, r3
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	fbb3 f3f1 	udiv	r3, r3, r1
 8006f56:	4413      	add	r3, r2
 8006f58:	4619      	mov	r1, r3
 8006f5a:	68f8      	ldr	r0, [r7, #12]
 8006f5c:	f7ff fd94 	bl	8006a88 <move_window>
 8006f60:	4603      	mov	r3, r0
 8006f62:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006f64:	7ffb      	ldrb	r3, [r7, #31]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d132      	bne.n	8006fd0 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	009b      	lsls	r3, r3, #2
 8006f7a:	68fa      	ldr	r2, [r7, #12]
 8006f7c:	8992      	ldrh	r2, [r2, #12]
 8006f7e:	fbb3 f0f2 	udiv	r0, r3, r2
 8006f82:	fb00 f202 	mul.w	r2, r0, r2
 8006f86:	1a9b      	subs	r3, r3, r2
 8006f88:	440b      	add	r3, r1
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f7ff fae4 	bl	8006558 <ld_dword>
 8006f90:	4603      	mov	r3, r0
 8006f92:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8006f96:	4323      	orrs	r3, r4
 8006f98:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	009b      	lsls	r3, r3, #2
 8006fa4:	68fa      	ldr	r2, [r7, #12]
 8006fa6:	8992      	ldrh	r2, [r2, #12]
 8006fa8:	fbb3 f0f2 	udiv	r0, r3, r2
 8006fac:	fb00 f202 	mul.w	r2, r0, r2
 8006fb0:	1a9b      	subs	r3, r3, r2
 8006fb2:	440b      	add	r3, r1
 8006fb4:	6879      	ldr	r1, [r7, #4]
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f7ff fb0c 	bl	80065d4 <st_dword>
			fs->wflag = 1;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	70da      	strb	r2, [r3, #3]
			break;
 8006fc2:	e006      	b.n	8006fd2 <put_fat+0x22a>
			if (res != FR_OK) break;
 8006fc4:	bf00      	nop
 8006fc6:	e004      	b.n	8006fd2 <put_fat+0x22a>
			if (res != FR_OK) break;
 8006fc8:	bf00      	nop
 8006fca:	e002      	b.n	8006fd2 <put_fat+0x22a>
			if (res != FR_OK) break;
 8006fcc:	bf00      	nop
 8006fce:	e000      	b.n	8006fd2 <put_fat+0x22a>
			if (res != FR_OK) break;
 8006fd0:	bf00      	nop
		}
	}
	return res;
 8006fd2:	7ffb      	ldrb	r3, [r7, #31]
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3724      	adds	r7, #36	@ 0x24
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd90      	pop	{r4, r7, pc}

08006fdc <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b088      	sub	sp, #32
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	60f8      	str	r0, [r7, #12]
 8006fe4:	60b9      	str	r1, [r7, #8]
 8006fe6:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006fe8:	2300      	movs	r3, #0
 8006fea:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	d904      	bls.n	8007002 <remove_chain+0x26>
 8006ff8:	69bb      	ldr	r3, [r7, #24]
 8006ffa:	699b      	ldr	r3, [r3, #24]
 8006ffc:	68ba      	ldr	r2, [r7, #8]
 8006ffe:	429a      	cmp	r2, r3
 8007000:	d301      	bcc.n	8007006 <remove_chain+0x2a>
 8007002:	2302      	movs	r3, #2
 8007004:	e04b      	b.n	800709e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d00c      	beq.n	8007026 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800700c:	f04f 32ff 	mov.w	r2, #4294967295
 8007010:	6879      	ldr	r1, [r7, #4]
 8007012:	69b8      	ldr	r0, [r7, #24]
 8007014:	f7ff fec8 	bl	8006da8 <put_fat>
 8007018:	4603      	mov	r3, r0
 800701a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800701c:	7ffb      	ldrb	r3, [r7, #31]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d001      	beq.n	8007026 <remove_chain+0x4a>
 8007022:	7ffb      	ldrb	r3, [r7, #31]
 8007024:	e03b      	b.n	800709e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007026:	68b9      	ldr	r1, [r7, #8]
 8007028:	68f8      	ldr	r0, [r7, #12]
 800702a:	f7ff fdea 	bl	8006c02 <get_fat>
 800702e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d031      	beq.n	800709a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	2b01      	cmp	r3, #1
 800703a:	d101      	bne.n	8007040 <remove_chain+0x64>
 800703c:	2302      	movs	r3, #2
 800703e:	e02e      	b.n	800709e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007046:	d101      	bne.n	800704c <remove_chain+0x70>
 8007048:	2301      	movs	r3, #1
 800704a:	e028      	b.n	800709e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800704c:	2200      	movs	r2, #0
 800704e:	68b9      	ldr	r1, [r7, #8]
 8007050:	69b8      	ldr	r0, [r7, #24]
 8007052:	f7ff fea9 	bl	8006da8 <put_fat>
 8007056:	4603      	mov	r3, r0
 8007058:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800705a:	7ffb      	ldrb	r3, [r7, #31]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d001      	beq.n	8007064 <remove_chain+0x88>
 8007060:	7ffb      	ldrb	r3, [r7, #31]
 8007062:	e01c      	b.n	800709e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8007064:	69bb      	ldr	r3, [r7, #24]
 8007066:	695a      	ldr	r2, [r3, #20]
 8007068:	69bb      	ldr	r3, [r7, #24]
 800706a:	699b      	ldr	r3, [r3, #24]
 800706c:	3b02      	subs	r3, #2
 800706e:	429a      	cmp	r2, r3
 8007070:	d20b      	bcs.n	800708a <remove_chain+0xae>
			fs->free_clst++;
 8007072:	69bb      	ldr	r3, [r7, #24]
 8007074:	695b      	ldr	r3, [r3, #20]
 8007076:	1c5a      	adds	r2, r3, #1
 8007078:	69bb      	ldr	r3, [r7, #24]
 800707a:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800707c:	69bb      	ldr	r3, [r7, #24]
 800707e:	791b      	ldrb	r3, [r3, #4]
 8007080:	f043 0301 	orr.w	r3, r3, #1
 8007084:	b2da      	uxtb	r2, r3
 8007086:	69bb      	ldr	r3, [r7, #24]
 8007088:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800708e:	69bb      	ldr	r3, [r7, #24]
 8007090:	699b      	ldr	r3, [r3, #24]
 8007092:	68ba      	ldr	r2, [r7, #8]
 8007094:	429a      	cmp	r2, r3
 8007096:	d3c6      	bcc.n	8007026 <remove_chain+0x4a>
 8007098:	e000      	b.n	800709c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800709a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800709c:	2300      	movs	r3, #0
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3720      	adds	r7, #32
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}

080070a6 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80070a6:	b580      	push	{r7, lr}
 80070a8:	b088      	sub	sp, #32
 80070aa:	af00      	add	r7, sp, #0
 80070ac:	6078      	str	r0, [r7, #4]
 80070ae:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d10d      	bne.n	80070d8 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	691b      	ldr	r3, [r3, #16]
 80070c0:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80070c2:	69bb      	ldr	r3, [r7, #24]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d004      	beq.n	80070d2 <create_chain+0x2c>
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	699b      	ldr	r3, [r3, #24]
 80070cc:	69ba      	ldr	r2, [r7, #24]
 80070ce:	429a      	cmp	r2, r3
 80070d0:	d31b      	bcc.n	800710a <create_chain+0x64>
 80070d2:	2301      	movs	r3, #1
 80070d4:	61bb      	str	r3, [r7, #24]
 80070d6:	e018      	b.n	800710a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80070d8:	6839      	ldr	r1, [r7, #0]
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f7ff fd91 	bl	8006c02 <get_fat>
 80070e0:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2b01      	cmp	r3, #1
 80070e6:	d801      	bhi.n	80070ec <create_chain+0x46>
 80070e8:	2301      	movs	r3, #1
 80070ea:	e070      	b.n	80071ce <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070f2:	d101      	bne.n	80070f8 <create_chain+0x52>
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	e06a      	b.n	80071ce <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	699b      	ldr	r3, [r3, #24]
 80070fc:	68fa      	ldr	r2, [r7, #12]
 80070fe:	429a      	cmp	r2, r3
 8007100:	d201      	bcs.n	8007106 <create_chain+0x60>
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	e063      	b.n	80071ce <create_chain+0x128>
		scl = clst;
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800710a:	69bb      	ldr	r3, [r7, #24]
 800710c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800710e:	69fb      	ldr	r3, [r7, #28]
 8007110:	3301      	adds	r3, #1
 8007112:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	699b      	ldr	r3, [r3, #24]
 8007118:	69fa      	ldr	r2, [r7, #28]
 800711a:	429a      	cmp	r2, r3
 800711c:	d307      	bcc.n	800712e <create_chain+0x88>
				ncl = 2;
 800711e:	2302      	movs	r3, #2
 8007120:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8007122:	69fa      	ldr	r2, [r7, #28]
 8007124:	69bb      	ldr	r3, [r7, #24]
 8007126:	429a      	cmp	r2, r3
 8007128:	d901      	bls.n	800712e <create_chain+0x88>
 800712a:	2300      	movs	r3, #0
 800712c:	e04f      	b.n	80071ce <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800712e:	69f9      	ldr	r1, [r7, #28]
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f7ff fd66 	bl	8006c02 <get_fat>
 8007136:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d00e      	beq.n	800715c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2b01      	cmp	r3, #1
 8007142:	d003      	beq.n	800714c <create_chain+0xa6>
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800714a:	d101      	bne.n	8007150 <create_chain+0xaa>
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	e03e      	b.n	80071ce <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8007150:	69fa      	ldr	r2, [r7, #28]
 8007152:	69bb      	ldr	r3, [r7, #24]
 8007154:	429a      	cmp	r2, r3
 8007156:	d1da      	bne.n	800710e <create_chain+0x68>
 8007158:	2300      	movs	r3, #0
 800715a:	e038      	b.n	80071ce <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800715c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800715e:	f04f 32ff 	mov.w	r2, #4294967295
 8007162:	69f9      	ldr	r1, [r7, #28]
 8007164:	6938      	ldr	r0, [r7, #16]
 8007166:	f7ff fe1f 	bl	8006da8 <put_fat>
 800716a:	4603      	mov	r3, r0
 800716c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800716e:	7dfb      	ldrb	r3, [r7, #23]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d109      	bne.n	8007188 <create_chain+0xe2>
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d006      	beq.n	8007188 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800717a:	69fa      	ldr	r2, [r7, #28]
 800717c:	6839      	ldr	r1, [r7, #0]
 800717e:	6938      	ldr	r0, [r7, #16]
 8007180:	f7ff fe12 	bl	8006da8 <put_fat>
 8007184:	4603      	mov	r3, r0
 8007186:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8007188:	7dfb      	ldrb	r3, [r7, #23]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d116      	bne.n	80071bc <create_chain+0x116>
		fs->last_clst = ncl;
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	69fa      	ldr	r2, [r7, #28]
 8007192:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	695a      	ldr	r2, [r3, #20]
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	699b      	ldr	r3, [r3, #24]
 800719c:	3b02      	subs	r3, #2
 800719e:	429a      	cmp	r2, r3
 80071a0:	d804      	bhi.n	80071ac <create_chain+0x106>
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	695b      	ldr	r3, [r3, #20]
 80071a6:	1e5a      	subs	r2, r3, #1
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	791b      	ldrb	r3, [r3, #4]
 80071b0:	f043 0301 	orr.w	r3, r3, #1
 80071b4:	b2da      	uxtb	r2, r3
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	711a      	strb	r2, [r3, #4]
 80071ba:	e007      	b.n	80071cc <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80071bc:	7dfb      	ldrb	r3, [r7, #23]
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d102      	bne.n	80071c8 <create_chain+0x122>
 80071c2:	f04f 33ff 	mov.w	r3, #4294967295
 80071c6:	e000      	b.n	80071ca <create_chain+0x124>
 80071c8:	2301      	movs	r3, #1
 80071ca:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80071cc:	69fb      	ldr	r3, [r7, #28]
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3720      	adds	r7, #32
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}

080071d6 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80071d6:	b480      	push	{r7}
 80071d8:	b087      	sub	sp, #28
 80071da:	af00      	add	r7, sp, #0
 80071dc:	6078      	str	r0, [r7, #4]
 80071de:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071ea:	3304      	adds	r3, #4
 80071ec:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	899b      	ldrh	r3, [r3, #12]
 80071f2:	461a      	mov	r2, r3
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80071fa:	68fa      	ldr	r2, [r7, #12]
 80071fc:	8952      	ldrh	r2, [r2, #10]
 80071fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8007202:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	1d1a      	adds	r2, r3, #4
 8007208:	613a      	str	r2, [r7, #16]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d101      	bne.n	8007218 <clmt_clust+0x42>
 8007214:	2300      	movs	r3, #0
 8007216:	e010      	b.n	800723a <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8007218:	697a      	ldr	r2, [r7, #20]
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	429a      	cmp	r2, r3
 800721e:	d307      	bcc.n	8007230 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8007220:	697a      	ldr	r2, [r7, #20]
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	1ad3      	subs	r3, r2, r3
 8007226:	617b      	str	r3, [r7, #20]
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	3304      	adds	r3, #4
 800722c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800722e:	e7e9      	b.n	8007204 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8007230:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	681a      	ldr	r2, [r3, #0]
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	4413      	add	r3, r2
}
 800723a:	4618      	mov	r0, r3
 800723c:	371c      	adds	r7, #28
 800723e:	46bd      	mov	sp, r7
 8007240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007244:	4770      	bx	lr

08007246 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007246:	b580      	push	{r7, lr}
 8007248:	b086      	sub	sp, #24
 800724a:	af00      	add	r7, sp, #0
 800724c:	6078      	str	r0, [r7, #4]
 800724e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800725c:	d204      	bcs.n	8007268 <dir_sdi+0x22>
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	f003 031f 	and.w	r3, r3, #31
 8007264:	2b00      	cmp	r3, #0
 8007266:	d001      	beq.n	800726c <dir_sdi+0x26>
		return FR_INT_ERR;
 8007268:	2302      	movs	r3, #2
 800726a:	e071      	b.n	8007350 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	683a      	ldr	r2, [r7, #0]
 8007270:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	689b      	ldr	r3, [r3, #8]
 8007276:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d106      	bne.n	800728c <dir_sdi+0x46>
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	781b      	ldrb	r3, [r3, #0]
 8007282:	2b02      	cmp	r3, #2
 8007284:	d902      	bls.n	800728c <dir_sdi+0x46>
		clst = fs->dirbase;
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800728a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d10c      	bne.n	80072ac <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	095b      	lsrs	r3, r3, #5
 8007296:	693a      	ldr	r2, [r7, #16]
 8007298:	8912      	ldrh	r2, [r2, #8]
 800729a:	4293      	cmp	r3, r2
 800729c:	d301      	bcc.n	80072a2 <dir_sdi+0x5c>
 800729e:	2302      	movs	r3, #2
 80072a0:	e056      	b.n	8007350 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	61da      	str	r2, [r3, #28]
 80072aa:	e02d      	b.n	8007308 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	895b      	ldrh	r3, [r3, #10]
 80072b0:	461a      	mov	r2, r3
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	899b      	ldrh	r3, [r3, #12]
 80072b6:	fb02 f303 	mul.w	r3, r2, r3
 80072ba:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80072bc:	e019      	b.n	80072f2 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6979      	ldr	r1, [r7, #20]
 80072c2:	4618      	mov	r0, r3
 80072c4:	f7ff fc9d 	bl	8006c02 <get_fat>
 80072c8:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072d0:	d101      	bne.n	80072d6 <dir_sdi+0x90>
 80072d2:	2301      	movs	r3, #1
 80072d4:	e03c      	b.n	8007350 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	2b01      	cmp	r3, #1
 80072da:	d904      	bls.n	80072e6 <dir_sdi+0xa0>
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	699b      	ldr	r3, [r3, #24]
 80072e0:	697a      	ldr	r2, [r7, #20]
 80072e2:	429a      	cmp	r2, r3
 80072e4:	d301      	bcc.n	80072ea <dir_sdi+0xa4>
 80072e6:	2302      	movs	r3, #2
 80072e8:	e032      	b.n	8007350 <dir_sdi+0x10a>
			ofs -= csz;
 80072ea:	683a      	ldr	r2, [r7, #0]
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	1ad3      	subs	r3, r2, r3
 80072f0:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80072f2:	683a      	ldr	r2, [r7, #0]
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	429a      	cmp	r2, r3
 80072f8:	d2e1      	bcs.n	80072be <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80072fa:	6979      	ldr	r1, [r7, #20]
 80072fc:	6938      	ldr	r0, [r7, #16]
 80072fe:	f7ff fc61 	bl	8006bc4 <clust2sect>
 8007302:	4602      	mov	r2, r0
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	697a      	ldr	r2, [r7, #20]
 800730c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	69db      	ldr	r3, [r3, #28]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d101      	bne.n	800731a <dir_sdi+0xd4>
 8007316:	2302      	movs	r3, #2
 8007318:	e01a      	b.n	8007350 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	69da      	ldr	r2, [r3, #28]
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	899b      	ldrh	r3, [r3, #12]
 8007322:	4619      	mov	r1, r3
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	fbb3 f3f1 	udiv	r3, r3, r1
 800732a:	441a      	add	r2, r3
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007330:	693b      	ldr	r3, [r7, #16]
 8007332:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	899b      	ldrh	r3, [r3, #12]
 800733a:	461a      	mov	r2, r3
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	fbb3 f0f2 	udiv	r0, r3, r2
 8007342:	fb00 f202 	mul.w	r2, r0, r2
 8007346:	1a9b      	subs	r3, r3, r2
 8007348:	18ca      	adds	r2, r1, r3
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800734e:	2300      	movs	r3, #0
}
 8007350:	4618      	mov	r0, r3
 8007352:	3718      	adds	r7, #24
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}

08007358 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b086      	sub	sp, #24
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
 8007360:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	695b      	ldr	r3, [r3, #20]
 800736c:	3320      	adds	r3, #32
 800736e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	69db      	ldr	r3, [r3, #28]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d003      	beq.n	8007380 <dir_next+0x28>
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800737e:	d301      	bcc.n	8007384 <dir_next+0x2c>
 8007380:	2304      	movs	r3, #4
 8007382:	e0bb      	b.n	80074fc <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	899b      	ldrh	r3, [r3, #12]
 8007388:	461a      	mov	r2, r3
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007390:	fb01 f202 	mul.w	r2, r1, r2
 8007394:	1a9b      	subs	r3, r3, r2
 8007396:	2b00      	cmp	r3, #0
 8007398:	f040 809d 	bne.w	80074d6 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	69db      	ldr	r3, [r3, #28]
 80073a0:	1c5a      	adds	r2, r3, #1
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	699b      	ldr	r3, [r3, #24]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d10b      	bne.n	80073c6 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	095b      	lsrs	r3, r3, #5
 80073b2:	68fa      	ldr	r2, [r7, #12]
 80073b4:	8912      	ldrh	r2, [r2, #8]
 80073b6:	4293      	cmp	r3, r2
 80073b8:	f0c0 808d 	bcc.w	80074d6 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2200      	movs	r2, #0
 80073c0:	61da      	str	r2, [r3, #28]
 80073c2:	2304      	movs	r3, #4
 80073c4:	e09a      	b.n	80074fc <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	899b      	ldrh	r3, [r3, #12]
 80073ca:	461a      	mov	r2, r3
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80073d2:	68fa      	ldr	r2, [r7, #12]
 80073d4:	8952      	ldrh	r2, [r2, #10]
 80073d6:	3a01      	subs	r2, #1
 80073d8:	4013      	ands	r3, r2
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d17b      	bne.n	80074d6 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80073de:	687a      	ldr	r2, [r7, #4]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	699b      	ldr	r3, [r3, #24]
 80073e4:	4619      	mov	r1, r3
 80073e6:	4610      	mov	r0, r2
 80073e8:	f7ff fc0b 	bl	8006c02 <get_fat>
 80073ec:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	2b01      	cmp	r3, #1
 80073f2:	d801      	bhi.n	80073f8 <dir_next+0xa0>
 80073f4:	2302      	movs	r3, #2
 80073f6:	e081      	b.n	80074fc <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073fe:	d101      	bne.n	8007404 <dir_next+0xac>
 8007400:	2301      	movs	r3, #1
 8007402:	e07b      	b.n	80074fc <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	699b      	ldr	r3, [r3, #24]
 8007408:	697a      	ldr	r2, [r7, #20]
 800740a:	429a      	cmp	r2, r3
 800740c:	d359      	bcc.n	80074c2 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d104      	bne.n	800741e <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2200      	movs	r2, #0
 8007418:	61da      	str	r2, [r3, #28]
 800741a:	2304      	movs	r3, #4
 800741c:	e06e      	b.n	80074fc <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800741e:	687a      	ldr	r2, [r7, #4]
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	699b      	ldr	r3, [r3, #24]
 8007424:	4619      	mov	r1, r3
 8007426:	4610      	mov	r0, r2
 8007428:	f7ff fe3d 	bl	80070a6 <create_chain>
 800742c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d101      	bne.n	8007438 <dir_next+0xe0>
 8007434:	2307      	movs	r3, #7
 8007436:	e061      	b.n	80074fc <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	2b01      	cmp	r3, #1
 800743c:	d101      	bne.n	8007442 <dir_next+0xea>
 800743e:	2302      	movs	r3, #2
 8007440:	e05c      	b.n	80074fc <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007448:	d101      	bne.n	800744e <dir_next+0xf6>
 800744a:	2301      	movs	r3, #1
 800744c:	e056      	b.n	80074fc <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800744e:	68f8      	ldr	r0, [r7, #12]
 8007450:	f7ff fad6 	bl	8006a00 <sync_window>
 8007454:	4603      	mov	r3, r0
 8007456:	2b00      	cmp	r3, #0
 8007458:	d001      	beq.n	800745e <dir_next+0x106>
 800745a:	2301      	movs	r3, #1
 800745c:	e04e      	b.n	80074fc <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	899b      	ldrh	r3, [r3, #12]
 8007468:	461a      	mov	r2, r3
 800746a:	2100      	movs	r1, #0
 800746c:	f7ff f8ff 	bl	800666e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007470:	2300      	movs	r3, #0
 8007472:	613b      	str	r3, [r7, #16]
 8007474:	6979      	ldr	r1, [r7, #20]
 8007476:	68f8      	ldr	r0, [r7, #12]
 8007478:	f7ff fba4 	bl	8006bc4 <clust2sect>
 800747c:	4602      	mov	r2, r0
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	631a      	str	r2, [r3, #48]	@ 0x30
 8007482:	e012      	b.n	80074aa <dir_next+0x152>
						fs->wflag = 1;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	2201      	movs	r2, #1
 8007488:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800748a:	68f8      	ldr	r0, [r7, #12]
 800748c:	f7ff fab8 	bl	8006a00 <sync_window>
 8007490:	4603      	mov	r3, r0
 8007492:	2b00      	cmp	r3, #0
 8007494:	d001      	beq.n	800749a <dir_next+0x142>
 8007496:	2301      	movs	r3, #1
 8007498:	e030      	b.n	80074fc <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	3301      	adds	r3, #1
 800749e:	613b      	str	r3, [r7, #16]
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074a4:	1c5a      	adds	r2, r3, #1
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	631a      	str	r2, [r3, #48]	@ 0x30
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	895b      	ldrh	r3, [r3, #10]
 80074ae:	461a      	mov	r2, r3
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d3e6      	bcc.n	8007484 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80074ba:	693b      	ldr	r3, [r7, #16]
 80074bc:	1ad2      	subs	r2, r2, r3
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	697a      	ldr	r2, [r7, #20]
 80074c6:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80074c8:	6979      	ldr	r1, [r7, #20]
 80074ca:	68f8      	ldr	r0, [r7, #12]
 80074cc:	f7ff fb7a 	bl	8006bc4 <clust2sect>
 80074d0:	4602      	mov	r2, r0
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	68ba      	ldr	r2, [r7, #8]
 80074da:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	899b      	ldrh	r3, [r3, #12]
 80074e6:	461a      	mov	r2, r3
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	fbb3 f0f2 	udiv	r0, r3, r2
 80074ee:	fb00 f202 	mul.w	r2, r0, r2
 80074f2:	1a9b      	subs	r3, r3, r2
 80074f4:	18ca      	adds	r2, r1, r3
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80074fa:	2300      	movs	r3, #0
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3718      	adds	r7, #24
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}

08007504 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b086      	sub	sp, #24
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
 800750c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007514:	2100      	movs	r1, #0
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f7ff fe95 	bl	8007246 <dir_sdi>
 800751c:	4603      	mov	r3, r0
 800751e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007520:	7dfb      	ldrb	r3, [r7, #23]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d12b      	bne.n	800757e <dir_alloc+0x7a>
		n = 0;
 8007526:	2300      	movs	r3, #0
 8007528:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	69db      	ldr	r3, [r3, #28]
 800752e:	4619      	mov	r1, r3
 8007530:	68f8      	ldr	r0, [r7, #12]
 8007532:	f7ff faa9 	bl	8006a88 <move_window>
 8007536:	4603      	mov	r3, r0
 8007538:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800753a:	7dfb      	ldrb	r3, [r7, #23]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d11d      	bne.n	800757c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6a1b      	ldr	r3, [r3, #32]
 8007544:	781b      	ldrb	r3, [r3, #0]
 8007546:	2be5      	cmp	r3, #229	@ 0xe5
 8007548:	d004      	beq.n	8007554 <dir_alloc+0x50>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6a1b      	ldr	r3, [r3, #32]
 800754e:	781b      	ldrb	r3, [r3, #0]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d107      	bne.n	8007564 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007554:	693b      	ldr	r3, [r7, #16]
 8007556:	3301      	adds	r3, #1
 8007558:	613b      	str	r3, [r7, #16]
 800755a:	693a      	ldr	r2, [r7, #16]
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	429a      	cmp	r2, r3
 8007560:	d102      	bne.n	8007568 <dir_alloc+0x64>
 8007562:	e00c      	b.n	800757e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007564:	2300      	movs	r3, #0
 8007566:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007568:	2101      	movs	r1, #1
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f7ff fef4 	bl	8007358 <dir_next>
 8007570:	4603      	mov	r3, r0
 8007572:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007574:	7dfb      	ldrb	r3, [r7, #23]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d0d7      	beq.n	800752a <dir_alloc+0x26>
 800757a:	e000      	b.n	800757e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800757c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800757e:	7dfb      	ldrb	r3, [r7, #23]
 8007580:	2b04      	cmp	r3, #4
 8007582:	d101      	bne.n	8007588 <dir_alloc+0x84>
 8007584:	2307      	movs	r3, #7
 8007586:	75fb      	strb	r3, [r7, #23]
	return res;
 8007588:	7dfb      	ldrb	r3, [r7, #23]
}
 800758a:	4618      	mov	r0, r3
 800758c:	3718      	adds	r7, #24
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}

08007592 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8007592:	b580      	push	{r7, lr}
 8007594:	b084      	sub	sp, #16
 8007596:	af00      	add	r7, sp, #0
 8007598:	6078      	str	r0, [r7, #4]
 800759a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	331a      	adds	r3, #26
 80075a0:	4618      	mov	r0, r3
 80075a2:	f7fe ffc1 	bl	8006528 <ld_word>
 80075a6:	4603      	mov	r3, r0
 80075a8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	781b      	ldrb	r3, [r3, #0]
 80075ae:	2b03      	cmp	r3, #3
 80075b0:	d109      	bne.n	80075c6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	3314      	adds	r3, #20
 80075b6:	4618      	mov	r0, r3
 80075b8:	f7fe ffb6 	bl	8006528 <ld_word>
 80075bc:	4603      	mov	r3, r0
 80075be:	041b      	lsls	r3, r3, #16
 80075c0:	68fa      	ldr	r2, [r7, #12]
 80075c2:	4313      	orrs	r3, r2
 80075c4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80075c6:	68fb      	ldr	r3, [r7, #12]
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3710      	adds	r7, #16
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}

080075d0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b084      	sub	sp, #16
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	60f8      	str	r0, [r7, #12]
 80075d8:	60b9      	str	r1, [r7, #8]
 80075da:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	331a      	adds	r3, #26
 80075e0:	687a      	ldr	r2, [r7, #4]
 80075e2:	b292      	uxth	r2, r2
 80075e4:	4611      	mov	r1, r2
 80075e6:	4618      	mov	r0, r3
 80075e8:	f7fe ffd9 	bl	800659e <st_word>
	if (fs->fs_type == FS_FAT32) {
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	781b      	ldrb	r3, [r3, #0]
 80075f0:	2b03      	cmp	r3, #3
 80075f2:	d109      	bne.n	8007608 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	f103 0214 	add.w	r2, r3, #20
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	0c1b      	lsrs	r3, r3, #16
 80075fe:	b29b      	uxth	r3, r3
 8007600:	4619      	mov	r1, r3
 8007602:	4610      	mov	r0, r2
 8007604:	f7fe ffcb 	bl	800659e <st_word>
	}
}
 8007608:	bf00      	nop
 800760a:	3710      	adds	r7, #16
 800760c:	46bd      	mov	sp, r7
 800760e:	bd80      	pop	{r7, pc}

08007610 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b086      	sub	sp, #24
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
 8007618:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800761a:	2304      	movs	r3, #4
 800761c:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8007624:	e03c      	b.n	80076a0 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	69db      	ldr	r3, [r3, #28]
 800762a:	4619      	mov	r1, r3
 800762c:	6938      	ldr	r0, [r7, #16]
 800762e:	f7ff fa2b 	bl	8006a88 <move_window>
 8007632:	4603      	mov	r3, r0
 8007634:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007636:	7dfb      	ldrb	r3, [r7, #23]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d136      	bne.n	80076aa <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6a1b      	ldr	r3, [r3, #32]
 8007640:	781b      	ldrb	r3, [r3, #0]
 8007642:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8007644:	7bfb      	ldrb	r3, [r7, #15]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d102      	bne.n	8007650 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800764a:	2304      	movs	r3, #4
 800764c:	75fb      	strb	r3, [r7, #23]
 800764e:	e031      	b.n	80076b4 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6a1b      	ldr	r3, [r3, #32]
 8007654:	330b      	adds	r3, #11
 8007656:	781b      	ldrb	r3, [r3, #0]
 8007658:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800765c:	73bb      	strb	r3, [r7, #14]
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	7bba      	ldrb	r2, [r7, #14]
 8007662:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8007664:	7bfb      	ldrb	r3, [r7, #15]
 8007666:	2be5      	cmp	r3, #229	@ 0xe5
 8007668:	d011      	beq.n	800768e <dir_read+0x7e>
 800766a:	7bfb      	ldrb	r3, [r7, #15]
 800766c:	2b2e      	cmp	r3, #46	@ 0x2e
 800766e:	d00e      	beq.n	800768e <dir_read+0x7e>
 8007670:	7bbb      	ldrb	r3, [r7, #14]
 8007672:	2b0f      	cmp	r3, #15
 8007674:	d00b      	beq.n	800768e <dir_read+0x7e>
 8007676:	7bbb      	ldrb	r3, [r7, #14]
 8007678:	f023 0320 	bic.w	r3, r3, #32
 800767c:	2b08      	cmp	r3, #8
 800767e:	bf0c      	ite	eq
 8007680:	2301      	moveq	r3, #1
 8007682:	2300      	movne	r3, #0
 8007684:	b2db      	uxtb	r3, r3
 8007686:	461a      	mov	r2, r3
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	4293      	cmp	r3, r2
 800768c:	d00f      	beq.n	80076ae <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800768e:	2100      	movs	r1, #0
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f7ff fe61 	bl	8007358 <dir_next>
 8007696:	4603      	mov	r3, r0
 8007698:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800769a:	7dfb      	ldrb	r3, [r7, #23]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d108      	bne.n	80076b2 <dir_read+0xa2>
	while (dp->sect) {
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	69db      	ldr	r3, [r3, #28]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d1be      	bne.n	8007626 <dir_read+0x16>
 80076a8:	e004      	b.n	80076b4 <dir_read+0xa4>
		if (res != FR_OK) break;
 80076aa:	bf00      	nop
 80076ac:	e002      	b.n	80076b4 <dir_read+0xa4>
				break;
 80076ae:	bf00      	nop
 80076b0:	e000      	b.n	80076b4 <dir_read+0xa4>
		if (res != FR_OK) break;
 80076b2:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80076b4:	7dfb      	ldrb	r3, [r7, #23]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d002      	beq.n	80076c0 <dir_read+0xb0>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2200      	movs	r2, #0
 80076be:	61da      	str	r2, [r3, #28]
	return res;
 80076c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3718      	adds	r7, #24
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}

080076ca <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80076ca:	b580      	push	{r7, lr}
 80076cc:	b086      	sub	sp, #24
 80076ce:	af00      	add	r7, sp, #0
 80076d0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80076d8:	2100      	movs	r1, #0
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f7ff fdb3 	bl	8007246 <dir_sdi>
 80076e0:	4603      	mov	r3, r0
 80076e2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80076e4:	7dfb      	ldrb	r3, [r7, #23]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d001      	beq.n	80076ee <dir_find+0x24>
 80076ea:	7dfb      	ldrb	r3, [r7, #23]
 80076ec:	e03e      	b.n	800776c <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	69db      	ldr	r3, [r3, #28]
 80076f2:	4619      	mov	r1, r3
 80076f4:	6938      	ldr	r0, [r7, #16]
 80076f6:	f7ff f9c7 	bl	8006a88 <move_window>
 80076fa:	4603      	mov	r3, r0
 80076fc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80076fe:	7dfb      	ldrb	r3, [r7, #23]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d12f      	bne.n	8007764 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6a1b      	ldr	r3, [r3, #32]
 8007708:	781b      	ldrb	r3, [r3, #0]
 800770a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800770c:	7bfb      	ldrb	r3, [r7, #15]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d102      	bne.n	8007718 <dir_find+0x4e>
 8007712:	2304      	movs	r3, #4
 8007714:	75fb      	strb	r3, [r7, #23]
 8007716:	e028      	b.n	800776a <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6a1b      	ldr	r3, [r3, #32]
 800771c:	330b      	adds	r3, #11
 800771e:	781b      	ldrb	r3, [r3, #0]
 8007720:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007724:	b2da      	uxtb	r2, r3
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6a1b      	ldr	r3, [r3, #32]
 800772e:	330b      	adds	r3, #11
 8007730:	781b      	ldrb	r3, [r3, #0]
 8007732:	f003 0308 	and.w	r3, r3, #8
 8007736:	2b00      	cmp	r3, #0
 8007738:	d10a      	bne.n	8007750 <dir_find+0x86>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6a18      	ldr	r0, [r3, #32]
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	3324      	adds	r3, #36	@ 0x24
 8007742:	220b      	movs	r2, #11
 8007744:	4619      	mov	r1, r3
 8007746:	f7fe ffad 	bl	80066a4 <mem_cmp>
 800774a:	4603      	mov	r3, r0
 800774c:	2b00      	cmp	r3, #0
 800774e:	d00b      	beq.n	8007768 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8007750:	2100      	movs	r1, #0
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f7ff fe00 	bl	8007358 <dir_next>
 8007758:	4603      	mov	r3, r0
 800775a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800775c:	7dfb      	ldrb	r3, [r7, #23]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d0c5      	beq.n	80076ee <dir_find+0x24>
 8007762:	e002      	b.n	800776a <dir_find+0xa0>
		if (res != FR_OK) break;
 8007764:	bf00      	nop
 8007766:	e000      	b.n	800776a <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007768:	bf00      	nop

	return res;
 800776a:	7dfb      	ldrb	r3, [r7, #23]
}
 800776c:	4618      	mov	r0, r3
 800776e:	3718      	adds	r7, #24
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}

08007774 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b084      	sub	sp, #16
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8007782:	2101      	movs	r1, #1
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f7ff febd 	bl	8007504 <dir_alloc>
 800778a:	4603      	mov	r3, r0
 800778c:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800778e:	7bfb      	ldrb	r3, [r7, #15]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d11c      	bne.n	80077ce <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	69db      	ldr	r3, [r3, #28]
 8007798:	4619      	mov	r1, r3
 800779a:	68b8      	ldr	r0, [r7, #8]
 800779c:	f7ff f974 	bl	8006a88 <move_window>
 80077a0:	4603      	mov	r3, r0
 80077a2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80077a4:	7bfb      	ldrb	r3, [r7, #15]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d111      	bne.n	80077ce <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6a1b      	ldr	r3, [r3, #32]
 80077ae:	2220      	movs	r2, #32
 80077b0:	2100      	movs	r1, #0
 80077b2:	4618      	mov	r0, r3
 80077b4:	f7fe ff5b 	bl	800666e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6a18      	ldr	r0, [r3, #32]
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	3324      	adds	r3, #36	@ 0x24
 80077c0:	220b      	movs	r2, #11
 80077c2:	4619      	mov	r1, r3
 80077c4:	f7fe ff32 	bl	800662c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	2201      	movs	r2, #1
 80077cc:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80077ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	3710      	adds	r7, #16
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}

080077d8 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b084      	sub	sp, #16
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	69db      	ldr	r3, [r3, #28]
 80077ea:	4619      	mov	r1, r3
 80077ec:	68f8      	ldr	r0, [r7, #12]
 80077ee:	f7ff f94b 	bl	8006a88 <move_window>
 80077f2:	4603      	mov	r3, r0
 80077f4:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 80077f6:	7afb      	ldrb	r3, [r7, #11]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d106      	bne.n	800780a <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6a1b      	ldr	r3, [r3, #32]
 8007800:	22e5      	movs	r2, #229	@ 0xe5
 8007802:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2201      	movs	r2, #1
 8007808:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 800780a:	7afb      	ldrb	r3, [r7, #11]
}
 800780c:	4618      	mov	r0, r3
 800780e:	3710      	adds	r7, #16
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}

08007814 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b086      	sub	sp, #24
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
 800781c:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	2200      	movs	r2, #0
 8007822:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	69db      	ldr	r3, [r3, #28]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d04f      	beq.n	80078cc <get_fileinfo+0xb8>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800782c:	2300      	movs	r3, #0
 800782e:	613b      	str	r3, [r7, #16]
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8007834:	e022      	b.n	800787c <get_fileinfo+0x68>
		c = (TCHAR)dp->dir[i++];
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6a1a      	ldr	r2, [r3, #32]
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	1c59      	adds	r1, r3, #1
 800783e:	6179      	str	r1, [r7, #20]
 8007840:	4413      	add	r3, r2
 8007842:	781b      	ldrb	r3, [r3, #0]
 8007844:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8007846:	7bfb      	ldrb	r3, [r7, #15]
 8007848:	2b20      	cmp	r3, #32
 800784a:	d016      	beq.n	800787a <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800784c:	7bfb      	ldrb	r3, [r7, #15]
 800784e:	2b05      	cmp	r3, #5
 8007850:	d101      	bne.n	8007856 <get_fileinfo+0x42>
 8007852:	23e5      	movs	r3, #229	@ 0xe5
 8007854:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	2b09      	cmp	r3, #9
 800785a:	d106      	bne.n	800786a <get_fileinfo+0x56>
 800785c:	693b      	ldr	r3, [r7, #16]
 800785e:	1c5a      	adds	r2, r3, #1
 8007860:	613a      	str	r2, [r7, #16]
 8007862:	683a      	ldr	r2, [r7, #0]
 8007864:	4413      	add	r3, r2
 8007866:	222e      	movs	r2, #46	@ 0x2e
 8007868:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	1c5a      	adds	r2, r3, #1
 800786e:	613a      	str	r2, [r7, #16]
 8007870:	683a      	ldr	r2, [r7, #0]
 8007872:	4413      	add	r3, r2
 8007874:	7bfa      	ldrb	r2, [r7, #15]
 8007876:	725a      	strb	r2, [r3, #9]
 8007878:	e000      	b.n	800787c <get_fileinfo+0x68>
		if (c == ' ') continue;				/* Skip padding spaces */
 800787a:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	2b0a      	cmp	r3, #10
 8007880:	d9d9      	bls.n	8007836 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8007882:	683a      	ldr	r2, [r7, #0]
 8007884:	693b      	ldr	r3, [r7, #16]
 8007886:	4413      	add	r3, r2
 8007888:	3309      	adds	r3, #9
 800788a:	2200      	movs	r2, #0
 800788c:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6a1b      	ldr	r3, [r3, #32]
 8007892:	7ada      	ldrb	r2, [r3, #11]
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6a1b      	ldr	r3, [r3, #32]
 800789c:	331c      	adds	r3, #28
 800789e:	4618      	mov	r0, r3
 80078a0:	f7fe fe5a 	bl	8006558 <ld_dword>
 80078a4:	4602      	mov	r2, r0
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6a1b      	ldr	r3, [r3, #32]
 80078ae:	3316      	adds	r3, #22
 80078b0:	4618      	mov	r0, r3
 80078b2:	f7fe fe51 	bl	8006558 <ld_dword>
 80078b6:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	b29a      	uxth	r2, r3
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	80da      	strh	r2, [r3, #6]
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	0c1b      	lsrs	r3, r3, #16
 80078c4:	b29a      	uxth	r2, r3
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	809a      	strh	r2, [r3, #4]
 80078ca:	e000      	b.n	80078ce <get_fileinfo+0xba>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80078cc:	bf00      	nop
}
 80078ce:	3718      	adds	r7, #24
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}

080078d4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b088      	sub	sp, #32
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
 80078dc:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	60fb      	str	r3, [r7, #12]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	3324      	adds	r3, #36	@ 0x24
 80078e8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80078ea:	220b      	movs	r2, #11
 80078ec:	2120      	movs	r1, #32
 80078ee:	68b8      	ldr	r0, [r7, #8]
 80078f0:	f7fe febd 	bl	800666e <mem_set>
	si = i = 0; ni = 8;
 80078f4:	2300      	movs	r3, #0
 80078f6:	613b      	str	r3, [r7, #16]
 80078f8:	693b      	ldr	r3, [r7, #16]
 80078fa:	61fb      	str	r3, [r7, #28]
 80078fc:	2308      	movs	r3, #8
 80078fe:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8007900:	69fb      	ldr	r3, [r7, #28]
 8007902:	1c5a      	adds	r2, r3, #1
 8007904:	61fa      	str	r2, [r7, #28]
 8007906:	68fa      	ldr	r2, [r7, #12]
 8007908:	4413      	add	r3, r2
 800790a:	781b      	ldrb	r3, [r3, #0]
 800790c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800790e:	7efb      	ldrb	r3, [r7, #27]
 8007910:	2b20      	cmp	r3, #32
 8007912:	d94e      	bls.n	80079b2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8007914:	7efb      	ldrb	r3, [r7, #27]
 8007916:	2b2f      	cmp	r3, #47	@ 0x2f
 8007918:	d006      	beq.n	8007928 <create_name+0x54>
 800791a:	7efb      	ldrb	r3, [r7, #27]
 800791c:	2b5c      	cmp	r3, #92	@ 0x5c
 800791e:	d110      	bne.n	8007942 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007920:	e002      	b.n	8007928 <create_name+0x54>
 8007922:	69fb      	ldr	r3, [r7, #28]
 8007924:	3301      	adds	r3, #1
 8007926:	61fb      	str	r3, [r7, #28]
 8007928:	68fa      	ldr	r2, [r7, #12]
 800792a:	69fb      	ldr	r3, [r7, #28]
 800792c:	4413      	add	r3, r2
 800792e:	781b      	ldrb	r3, [r3, #0]
 8007930:	2b2f      	cmp	r3, #47	@ 0x2f
 8007932:	d0f6      	beq.n	8007922 <create_name+0x4e>
 8007934:	68fa      	ldr	r2, [r7, #12]
 8007936:	69fb      	ldr	r3, [r7, #28]
 8007938:	4413      	add	r3, r2
 800793a:	781b      	ldrb	r3, [r3, #0]
 800793c:	2b5c      	cmp	r3, #92	@ 0x5c
 800793e:	d0f0      	beq.n	8007922 <create_name+0x4e>
			break;
 8007940:	e038      	b.n	80079b4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8007942:	7efb      	ldrb	r3, [r7, #27]
 8007944:	2b2e      	cmp	r3, #46	@ 0x2e
 8007946:	d003      	beq.n	8007950 <create_name+0x7c>
 8007948:	693a      	ldr	r2, [r7, #16]
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	429a      	cmp	r2, r3
 800794e:	d30c      	bcc.n	800796a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8007950:	697b      	ldr	r3, [r7, #20]
 8007952:	2b0b      	cmp	r3, #11
 8007954:	d002      	beq.n	800795c <create_name+0x88>
 8007956:	7efb      	ldrb	r3, [r7, #27]
 8007958:	2b2e      	cmp	r3, #46	@ 0x2e
 800795a:	d001      	beq.n	8007960 <create_name+0x8c>
 800795c:	2306      	movs	r3, #6
 800795e:	e044      	b.n	80079ea <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8007960:	2308      	movs	r3, #8
 8007962:	613b      	str	r3, [r7, #16]
 8007964:	230b      	movs	r3, #11
 8007966:	617b      	str	r3, [r7, #20]
			continue;
 8007968:	e022      	b.n	80079b0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800796a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800796e:	2b00      	cmp	r3, #0
 8007970:	da04      	bge.n	800797c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8007972:	7efb      	ldrb	r3, [r7, #27]
 8007974:	3b80      	subs	r3, #128	@ 0x80
 8007976:	4a1f      	ldr	r2, [pc, #124]	@ (80079f4 <create_name+0x120>)
 8007978:	5cd3      	ldrb	r3, [r2, r3]
 800797a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800797c:	7efb      	ldrb	r3, [r7, #27]
 800797e:	4619      	mov	r1, r3
 8007980:	481d      	ldr	r0, [pc, #116]	@ (80079f8 <create_name+0x124>)
 8007982:	f7fe feb6 	bl	80066f2 <chk_chr>
 8007986:	4603      	mov	r3, r0
 8007988:	2b00      	cmp	r3, #0
 800798a:	d001      	beq.n	8007990 <create_name+0xbc>
 800798c:	2306      	movs	r3, #6
 800798e:	e02c      	b.n	80079ea <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8007990:	7efb      	ldrb	r3, [r7, #27]
 8007992:	2b60      	cmp	r3, #96	@ 0x60
 8007994:	d905      	bls.n	80079a2 <create_name+0xce>
 8007996:	7efb      	ldrb	r3, [r7, #27]
 8007998:	2b7a      	cmp	r3, #122	@ 0x7a
 800799a:	d802      	bhi.n	80079a2 <create_name+0xce>
 800799c:	7efb      	ldrb	r3, [r7, #27]
 800799e:	3b20      	subs	r3, #32
 80079a0:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	1c5a      	adds	r2, r3, #1
 80079a6:	613a      	str	r2, [r7, #16]
 80079a8:	68ba      	ldr	r2, [r7, #8]
 80079aa:	4413      	add	r3, r2
 80079ac:	7efa      	ldrb	r2, [r7, #27]
 80079ae:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80079b0:	e7a6      	b.n	8007900 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80079b2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80079b4:	68fa      	ldr	r2, [r7, #12]
 80079b6:	69fb      	ldr	r3, [r7, #28]
 80079b8:	441a      	add	r2, r3
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80079be:	693b      	ldr	r3, [r7, #16]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d101      	bne.n	80079c8 <create_name+0xf4>
 80079c4:	2306      	movs	r3, #6
 80079c6:	e010      	b.n	80079ea <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	781b      	ldrb	r3, [r3, #0]
 80079cc:	2be5      	cmp	r3, #229	@ 0xe5
 80079ce:	d102      	bne.n	80079d6 <create_name+0x102>
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	2205      	movs	r2, #5
 80079d4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80079d6:	7efb      	ldrb	r3, [r7, #27]
 80079d8:	2b20      	cmp	r3, #32
 80079da:	d801      	bhi.n	80079e0 <create_name+0x10c>
 80079dc:	2204      	movs	r2, #4
 80079de:	e000      	b.n	80079e2 <create_name+0x10e>
 80079e0:	2200      	movs	r2, #0
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	330b      	adds	r3, #11
 80079e6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80079e8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80079ea:	4618      	mov	r0, r3
 80079ec:	3720      	adds	r7, #32
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}
 80079f2:	bf00      	nop
 80079f4:	08009c78 	.word	0x08009c78
 80079f8:	08009c00 	.word	0x08009c00

080079fc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b086      	sub	sp, #24
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
 8007a04:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007a0a:	693b      	ldr	r3, [r7, #16]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007a10:	e002      	b.n	8007a18 <follow_path+0x1c>
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	3301      	adds	r3, #1
 8007a16:	603b      	str	r3, [r7, #0]
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	781b      	ldrb	r3, [r3, #0]
 8007a1c:	2b2f      	cmp	r3, #47	@ 0x2f
 8007a1e:	d0f8      	beq.n	8007a12 <follow_path+0x16>
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	781b      	ldrb	r3, [r3, #0]
 8007a24:	2b5c      	cmp	r3, #92	@ 0x5c
 8007a26:	d0f4      	beq.n	8007a12 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007a28:	693b      	ldr	r3, [r7, #16]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	781b      	ldrb	r3, [r3, #0]
 8007a32:	2b1f      	cmp	r3, #31
 8007a34:	d80a      	bhi.n	8007a4c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2280      	movs	r2, #128	@ 0x80
 8007a3a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8007a3e:	2100      	movs	r1, #0
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f7ff fc00 	bl	8007246 <dir_sdi>
 8007a46:	4603      	mov	r3, r0
 8007a48:	75fb      	strb	r3, [r7, #23]
 8007a4a:	e048      	b.n	8007ade <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007a4c:	463b      	mov	r3, r7
 8007a4e:	4619      	mov	r1, r3
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f7ff ff3f 	bl	80078d4 <create_name>
 8007a56:	4603      	mov	r3, r0
 8007a58:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007a5a:	7dfb      	ldrb	r3, [r7, #23]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d139      	bne.n	8007ad4 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f7ff fe32 	bl	80076ca <dir_find>
 8007a66:	4603      	mov	r3, r0
 8007a68:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8007a70:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007a72:	7dfb      	ldrb	r3, [r7, #23]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d00a      	beq.n	8007a8e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007a78:	7dfb      	ldrb	r3, [r7, #23]
 8007a7a:	2b04      	cmp	r3, #4
 8007a7c:	d12c      	bne.n	8007ad8 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007a7e:	7afb      	ldrb	r3, [r7, #11]
 8007a80:	f003 0304 	and.w	r3, r3, #4
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d127      	bne.n	8007ad8 <follow_path+0xdc>
 8007a88:	2305      	movs	r3, #5
 8007a8a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007a8c:	e024      	b.n	8007ad8 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007a8e:	7afb      	ldrb	r3, [r7, #11]
 8007a90:	f003 0304 	and.w	r3, r3, #4
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d121      	bne.n	8007adc <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	799b      	ldrb	r3, [r3, #6]
 8007a9c:	f003 0310 	and.w	r3, r3, #16
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d102      	bne.n	8007aaa <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007aa4:	2305      	movs	r3, #5
 8007aa6:	75fb      	strb	r3, [r7, #23]
 8007aa8:	e019      	b.n	8007ade <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	695b      	ldr	r3, [r3, #20]
 8007ab4:	68fa      	ldr	r2, [r7, #12]
 8007ab6:	8992      	ldrh	r2, [r2, #12]
 8007ab8:	fbb3 f0f2 	udiv	r0, r3, r2
 8007abc:	fb00 f202 	mul.w	r2, r0, r2
 8007ac0:	1a9b      	subs	r3, r3, r2
 8007ac2:	440b      	add	r3, r1
 8007ac4:	4619      	mov	r1, r3
 8007ac6:	68f8      	ldr	r0, [r7, #12]
 8007ac8:	f7ff fd63 	bl	8007592 <ld_clust>
 8007acc:	4602      	mov	r2, r0
 8007ace:	693b      	ldr	r3, [r7, #16]
 8007ad0:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007ad2:	e7bb      	b.n	8007a4c <follow_path+0x50>
			if (res != FR_OK) break;
 8007ad4:	bf00      	nop
 8007ad6:	e002      	b.n	8007ade <follow_path+0xe2>
				break;
 8007ad8:	bf00      	nop
 8007ada:	e000      	b.n	8007ade <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007adc:	bf00      	nop
			}
		}
	}

	return res;
 8007ade:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	3718      	adds	r7, #24
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}

08007ae8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b087      	sub	sp, #28
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007af0:	f04f 33ff 	mov.w	r3, #4294967295
 8007af4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d031      	beq.n	8007b62 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	617b      	str	r3, [r7, #20]
 8007b04:	e002      	b.n	8007b0c <get_ldnumber+0x24>
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	3301      	adds	r3, #1
 8007b0a:	617b      	str	r3, [r7, #20]
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	781b      	ldrb	r3, [r3, #0]
 8007b10:	2b20      	cmp	r3, #32
 8007b12:	d903      	bls.n	8007b1c <get_ldnumber+0x34>
 8007b14:	697b      	ldr	r3, [r7, #20]
 8007b16:	781b      	ldrb	r3, [r3, #0]
 8007b18:	2b3a      	cmp	r3, #58	@ 0x3a
 8007b1a:	d1f4      	bne.n	8007b06 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007b1c:	697b      	ldr	r3, [r7, #20]
 8007b1e:	781b      	ldrb	r3, [r3, #0]
 8007b20:	2b3a      	cmp	r3, #58	@ 0x3a
 8007b22:	d11c      	bne.n	8007b5e <get_ldnumber+0x76>
			tp = *path;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	1c5a      	adds	r2, r3, #1
 8007b2e:	60fa      	str	r2, [r7, #12]
 8007b30:	781b      	ldrb	r3, [r3, #0]
 8007b32:	3b30      	subs	r3, #48	@ 0x30
 8007b34:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	2b09      	cmp	r3, #9
 8007b3a:	d80e      	bhi.n	8007b5a <get_ldnumber+0x72>
 8007b3c:	68fa      	ldr	r2, [r7, #12]
 8007b3e:	697b      	ldr	r3, [r7, #20]
 8007b40:	429a      	cmp	r2, r3
 8007b42:	d10a      	bne.n	8007b5a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d107      	bne.n	8007b5a <get_ldnumber+0x72>
					vol = (int)i;
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	3301      	adds	r3, #1
 8007b52:	617b      	str	r3, [r7, #20]
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	697a      	ldr	r2, [r7, #20]
 8007b58:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007b5a:	693b      	ldr	r3, [r7, #16]
 8007b5c:	e002      	b.n	8007b64 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007b5e:	2300      	movs	r3, #0
 8007b60:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007b62:	693b      	ldr	r3, [r7, #16]
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	371c      	adds	r7, #28
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr

08007b70 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b082      	sub	sp, #8
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
 8007b78:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	70da      	strb	r2, [r3, #3]
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f04f 32ff 	mov.w	r2, #4294967295
 8007b86:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007b88:	6839      	ldr	r1, [r7, #0]
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f7fe ff7c 	bl	8006a88 <move_window>
 8007b90:	4603      	mov	r3, r0
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d001      	beq.n	8007b9a <check_fs+0x2a>
 8007b96:	2304      	movs	r3, #4
 8007b98:	e038      	b.n	8007c0c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	3334      	adds	r3, #52	@ 0x34
 8007b9e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	f7fe fcc0 	bl	8006528 <ld_word>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	461a      	mov	r2, r3
 8007bac:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8007bb0:	429a      	cmp	r2, r3
 8007bb2:	d001      	beq.n	8007bb8 <check_fs+0x48>
 8007bb4:	2303      	movs	r3, #3
 8007bb6:	e029      	b.n	8007c0c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007bbe:	2be9      	cmp	r3, #233	@ 0xe9
 8007bc0:	d009      	beq.n	8007bd6 <check_fs+0x66>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007bc8:	2beb      	cmp	r3, #235	@ 0xeb
 8007bca:	d11e      	bne.n	8007c0a <check_fs+0x9a>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8007bd2:	2b90      	cmp	r3, #144	@ 0x90
 8007bd4:	d119      	bne.n	8007c0a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	3334      	adds	r3, #52	@ 0x34
 8007bda:	3336      	adds	r3, #54	@ 0x36
 8007bdc:	4618      	mov	r0, r3
 8007bde:	f7fe fcbb 	bl	8006558 <ld_dword>
 8007be2:	4603      	mov	r3, r0
 8007be4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007be8:	4a0a      	ldr	r2, [pc, #40]	@ (8007c14 <check_fs+0xa4>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d101      	bne.n	8007bf2 <check_fs+0x82>
 8007bee:	2300      	movs	r3, #0
 8007bf0:	e00c      	b.n	8007c0c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	3334      	adds	r3, #52	@ 0x34
 8007bf6:	3352      	adds	r3, #82	@ 0x52
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f7fe fcad 	bl	8006558 <ld_dword>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	4a05      	ldr	r2, [pc, #20]	@ (8007c18 <check_fs+0xa8>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d101      	bne.n	8007c0a <check_fs+0x9a>
 8007c06:	2300      	movs	r3, #0
 8007c08:	e000      	b.n	8007c0c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007c0a:	2302      	movs	r3, #2
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3708      	adds	r7, #8
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}
 8007c14:	00544146 	.word	0x00544146
 8007c18:	33544146 	.word	0x33544146

08007c1c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b096      	sub	sp, #88	@ 0x58
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	60f8      	str	r0, [r7, #12]
 8007c24:	60b9      	str	r1, [r7, #8]
 8007c26:	4613      	mov	r3, r2
 8007c28:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007c30:	68f8      	ldr	r0, [r7, #12]
 8007c32:	f7ff ff59 	bl	8007ae8 <get_ldnumber>
 8007c36:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007c38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	da01      	bge.n	8007c42 <find_volume+0x26>
 8007c3e:	230b      	movs	r3, #11
 8007c40:	e262      	b.n	8008108 <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007c42:	4a9f      	ldr	r2, [pc, #636]	@ (8007ec0 <find_volume+0x2a4>)
 8007c44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c4a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007c4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d101      	bne.n	8007c56 <find_volume+0x3a>
 8007c52:	230c      	movs	r3, #12
 8007c54:	e258      	b.n	8008108 <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007c5a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007c5c:	79fb      	ldrb	r3, [r7, #7]
 8007c5e:	f023 0301 	bic.w	r3, r3, #1
 8007c62:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007c64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c66:	781b      	ldrb	r3, [r3, #0]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d01a      	beq.n	8007ca2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007c6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c6e:	785b      	ldrb	r3, [r3, #1]
 8007c70:	4618      	mov	r0, r3
 8007c72:	f7fe fbb9 	bl	80063e8 <disk_status>
 8007c76:	4603      	mov	r3, r0
 8007c78:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007c7c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007c80:	f003 0301 	and.w	r3, r3, #1
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d10c      	bne.n	8007ca2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007c88:	79fb      	ldrb	r3, [r7, #7]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d007      	beq.n	8007c9e <find_volume+0x82>
 8007c8e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007c92:	f003 0304 	and.w	r3, r3, #4
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d001      	beq.n	8007c9e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8007c9a:	230a      	movs	r3, #10
 8007c9c:	e234      	b.n	8008108 <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	e232      	b.n	8008108 <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007ca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007ca8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007caa:	b2da      	uxtb	r2, r3
 8007cac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cae:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007cb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cb2:	785b      	ldrb	r3, [r3, #1]
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	f7fe fbb1 	bl	800641c <disk_initialize>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007cc0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007cc4:	f003 0301 	and.w	r3, r3, #1
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d001      	beq.n	8007cd0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007ccc:	2303      	movs	r3, #3
 8007cce:	e21b      	b.n	8008108 <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007cd0:	79fb      	ldrb	r3, [r7, #7]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d007      	beq.n	8007ce6 <find_volume+0xca>
 8007cd6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007cda:	f003 0304 	and.w	r3, r3, #4
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d001      	beq.n	8007ce6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8007ce2:	230a      	movs	r3, #10
 8007ce4:	e210      	b.n	8008108 <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8007ce6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ce8:	7858      	ldrb	r0, [r3, #1]
 8007cea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cec:	330c      	adds	r3, #12
 8007cee:	461a      	mov	r2, r3
 8007cf0:	2102      	movs	r1, #2
 8007cf2:	f7fe fbfb 	bl	80064ec <disk_ioctl>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d001      	beq.n	8007d00 <find_volume+0xe4>
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	e203      	b.n	8008108 <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8007d00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d02:	899b      	ldrh	r3, [r3, #12]
 8007d04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d08:	d80d      	bhi.n	8007d26 <find_volume+0x10a>
 8007d0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d0c:	899b      	ldrh	r3, [r3, #12]
 8007d0e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d12:	d308      	bcc.n	8007d26 <find_volume+0x10a>
 8007d14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d16:	899b      	ldrh	r3, [r3, #12]
 8007d18:	461a      	mov	r2, r3
 8007d1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d1c:	899b      	ldrh	r3, [r3, #12]
 8007d1e:	3b01      	subs	r3, #1
 8007d20:	4013      	ands	r3, r2
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d001      	beq.n	8007d2a <find_volume+0x10e>
 8007d26:	2301      	movs	r3, #1
 8007d28:	e1ee      	b.n	8008108 <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007d2e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007d30:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007d32:	f7ff ff1d 	bl	8007b70 <check_fs>
 8007d36:	4603      	mov	r3, r0
 8007d38:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007d3c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007d40:	2b02      	cmp	r3, #2
 8007d42:	d149      	bne.n	8007dd8 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007d44:	2300      	movs	r3, #0
 8007d46:	643b      	str	r3, [r7, #64]	@ 0x40
 8007d48:	e01e      	b.n	8007d88 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007d4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d4c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8007d50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d52:	011b      	lsls	r3, r3, #4
 8007d54:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8007d58:	4413      	add	r3, r2
 8007d5a:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007d5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d5e:	3304      	adds	r3, #4
 8007d60:	781b      	ldrb	r3, [r3, #0]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d006      	beq.n	8007d74 <find_volume+0x158>
 8007d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d68:	3308      	adds	r3, #8
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f7fe fbf4 	bl	8006558 <ld_dword>
 8007d70:	4602      	mov	r2, r0
 8007d72:	e000      	b.n	8007d76 <find_volume+0x15a>
 8007d74:	2200      	movs	r2, #0
 8007d76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d78:	009b      	lsls	r3, r3, #2
 8007d7a:	3358      	adds	r3, #88	@ 0x58
 8007d7c:	443b      	add	r3, r7
 8007d7e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007d82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d84:	3301      	adds	r3, #1
 8007d86:	643b      	str	r3, [r7, #64]	@ 0x40
 8007d88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d8a:	2b03      	cmp	r3, #3
 8007d8c:	d9dd      	bls.n	8007d4a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007d8e:	2300      	movs	r3, #0
 8007d90:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8007d92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d002      	beq.n	8007d9e <find_volume+0x182>
 8007d98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d9a:	3b01      	subs	r3, #1
 8007d9c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007d9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007da0:	009b      	lsls	r3, r3, #2
 8007da2:	3358      	adds	r3, #88	@ 0x58
 8007da4:	443b      	add	r3, r7
 8007da6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007daa:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007dac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d005      	beq.n	8007dbe <find_volume+0x1a2>
 8007db2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007db4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007db6:	f7ff fedb 	bl	8007b70 <check_fs>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	e000      	b.n	8007dc0 <find_volume+0x1a4>
 8007dbe:	2303      	movs	r3, #3
 8007dc0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007dc4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007dc8:	2b01      	cmp	r3, #1
 8007dca:	d905      	bls.n	8007dd8 <find_volume+0x1bc>
 8007dcc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007dce:	3301      	adds	r3, #1
 8007dd0:	643b      	str	r3, [r7, #64]	@ 0x40
 8007dd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007dd4:	2b03      	cmp	r3, #3
 8007dd6:	d9e2      	bls.n	8007d9e <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007dd8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007ddc:	2b04      	cmp	r3, #4
 8007dde:	d101      	bne.n	8007de4 <find_volume+0x1c8>
 8007de0:	2301      	movs	r3, #1
 8007de2:	e191      	b.n	8008108 <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007de4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007de8:	2b01      	cmp	r3, #1
 8007dea:	d901      	bls.n	8007df0 <find_volume+0x1d4>
 8007dec:	230d      	movs	r3, #13
 8007dee:	e18b      	b.n	8008108 <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007df0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007df2:	3334      	adds	r3, #52	@ 0x34
 8007df4:	330b      	adds	r3, #11
 8007df6:	4618      	mov	r0, r3
 8007df8:	f7fe fb96 	bl	8006528 <ld_word>
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	461a      	mov	r2, r3
 8007e00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e02:	899b      	ldrh	r3, [r3, #12]
 8007e04:	429a      	cmp	r2, r3
 8007e06:	d001      	beq.n	8007e0c <find_volume+0x1f0>
 8007e08:	230d      	movs	r3, #13
 8007e0a:	e17d      	b.n	8008108 <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007e0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e0e:	3334      	adds	r3, #52	@ 0x34
 8007e10:	3316      	adds	r3, #22
 8007e12:	4618      	mov	r0, r3
 8007e14:	f7fe fb88 	bl	8006528 <ld_word>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007e1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d106      	bne.n	8007e30 <find_volume+0x214>
 8007e22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e24:	3334      	adds	r3, #52	@ 0x34
 8007e26:	3324      	adds	r3, #36	@ 0x24
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f7fe fb95 	bl	8006558 <ld_dword>
 8007e2e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8007e30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e32:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007e34:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007e36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e38:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8007e3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e3e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007e40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e42:	789b      	ldrb	r3, [r3, #2]
 8007e44:	2b01      	cmp	r3, #1
 8007e46:	d005      	beq.n	8007e54 <find_volume+0x238>
 8007e48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e4a:	789b      	ldrb	r3, [r3, #2]
 8007e4c:	2b02      	cmp	r3, #2
 8007e4e:	d001      	beq.n	8007e54 <find_volume+0x238>
 8007e50:	230d      	movs	r3, #13
 8007e52:	e159      	b.n	8008108 <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007e54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e56:	789b      	ldrb	r3, [r3, #2]
 8007e58:	461a      	mov	r2, r3
 8007e5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e5c:	fb02 f303 	mul.w	r3, r2, r3
 8007e60:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007e62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007e68:	461a      	mov	r2, r3
 8007e6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e6c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007e6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e70:	895b      	ldrh	r3, [r3, #10]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d008      	beq.n	8007e88 <find_volume+0x26c>
 8007e76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e78:	895b      	ldrh	r3, [r3, #10]
 8007e7a:	461a      	mov	r2, r3
 8007e7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e7e:	895b      	ldrh	r3, [r3, #10]
 8007e80:	3b01      	subs	r3, #1
 8007e82:	4013      	ands	r3, r2
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d001      	beq.n	8007e8c <find_volume+0x270>
 8007e88:	230d      	movs	r3, #13
 8007e8a:	e13d      	b.n	8008108 <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007e8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e8e:	3334      	adds	r3, #52	@ 0x34
 8007e90:	3311      	adds	r3, #17
 8007e92:	4618      	mov	r0, r3
 8007e94:	f7fe fb48 	bl	8006528 <ld_word>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	461a      	mov	r2, r3
 8007e9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e9e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007ea0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ea2:	891b      	ldrh	r3, [r3, #8]
 8007ea4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007ea6:	8992      	ldrh	r2, [r2, #12]
 8007ea8:	0952      	lsrs	r2, r2, #5
 8007eaa:	b292      	uxth	r2, r2
 8007eac:	fbb3 f1f2 	udiv	r1, r3, r2
 8007eb0:	fb01 f202 	mul.w	r2, r1, r2
 8007eb4:	1a9b      	subs	r3, r3, r2
 8007eb6:	b29b      	uxth	r3, r3
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d003      	beq.n	8007ec4 <find_volume+0x2a8>
 8007ebc:	230d      	movs	r3, #13
 8007ebe:	e123      	b.n	8008108 <find_volume+0x4ec>
 8007ec0:	20002308 	.word	0x20002308

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007ec4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ec6:	3334      	adds	r3, #52	@ 0x34
 8007ec8:	3313      	adds	r3, #19
 8007eca:	4618      	mov	r0, r3
 8007ecc:	f7fe fb2c 	bl	8006528 <ld_word>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007ed4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d106      	bne.n	8007ee8 <find_volume+0x2cc>
 8007eda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007edc:	3334      	adds	r3, #52	@ 0x34
 8007ede:	3320      	adds	r3, #32
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	f7fe fb39 	bl	8006558 <ld_dword>
 8007ee6:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007ee8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eea:	3334      	adds	r3, #52	@ 0x34
 8007eec:	330e      	adds	r3, #14
 8007eee:	4618      	mov	r0, r3
 8007ef0:	f7fe fb1a 	bl	8006528 <ld_word>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007ef8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d101      	bne.n	8007f02 <find_volume+0x2e6>
 8007efe:	230d      	movs	r3, #13
 8007f00:	e102      	b.n	8008108 <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007f02:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8007f04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f06:	4413      	add	r3, r2
 8007f08:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007f0a:	8911      	ldrh	r1, [r2, #8]
 8007f0c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007f0e:	8992      	ldrh	r2, [r2, #12]
 8007f10:	0952      	lsrs	r2, r2, #5
 8007f12:	b292      	uxth	r2, r2
 8007f14:	fbb1 f2f2 	udiv	r2, r1, r2
 8007f18:	b292      	uxth	r2, r2
 8007f1a:	4413      	add	r3, r2
 8007f1c:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007f1e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007f20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f22:	429a      	cmp	r2, r3
 8007f24:	d201      	bcs.n	8007f2a <find_volume+0x30e>
 8007f26:	230d      	movs	r3, #13
 8007f28:	e0ee      	b.n	8008108 <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007f2a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007f2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f2e:	1ad3      	subs	r3, r2, r3
 8007f30:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007f32:	8952      	ldrh	r2, [r2, #10]
 8007f34:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f38:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d101      	bne.n	8007f44 <find_volume+0x328>
 8007f40:	230d      	movs	r3, #13
 8007f42:	e0e1      	b.n	8008108 <find_volume+0x4ec>
		fmt = FS_FAT32;
 8007f44:	2303      	movs	r3, #3
 8007f46:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f4c:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d802      	bhi.n	8007f5a <find_volume+0x33e>
 8007f54:	2302      	movs	r3, #2
 8007f56:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f5c:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d802      	bhi.n	8007f6a <find_volume+0x34e>
 8007f64:	2301      	movs	r3, #1
 8007f66:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f6c:	1c9a      	adds	r2, r3, #2
 8007f6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f70:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8007f72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f74:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007f76:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007f78:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8007f7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007f7c:	441a      	add	r2, r3
 8007f7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f80:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8007f82:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f86:	441a      	add	r2, r3
 8007f88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f8a:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 8007f8c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007f90:	2b03      	cmp	r3, #3
 8007f92:	d11e      	bne.n	8007fd2 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007f94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f96:	3334      	adds	r3, #52	@ 0x34
 8007f98:	332a      	adds	r3, #42	@ 0x2a
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f7fe fac4 	bl	8006528 <ld_word>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d001      	beq.n	8007faa <find_volume+0x38e>
 8007fa6:	230d      	movs	r3, #13
 8007fa8:	e0ae      	b.n	8008108 <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007faa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fac:	891b      	ldrh	r3, [r3, #8]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d001      	beq.n	8007fb6 <find_volume+0x39a>
 8007fb2:	230d      	movs	r3, #13
 8007fb4:	e0a8      	b.n	8008108 <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007fb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fb8:	3334      	adds	r3, #52	@ 0x34
 8007fba:	332c      	adds	r3, #44	@ 0x2c
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f7fe facb 	bl	8006558 <ld_dword>
 8007fc2:	4602      	mov	r2, r0
 8007fc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fc6:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007fc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fca:	699b      	ldr	r3, [r3, #24]
 8007fcc:	009b      	lsls	r3, r3, #2
 8007fce:	647b      	str	r3, [r7, #68]	@ 0x44
 8007fd0:	e01f      	b.n	8008012 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007fd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fd4:	891b      	ldrh	r3, [r3, #8]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d101      	bne.n	8007fde <find_volume+0x3c2>
 8007fda:	230d      	movs	r3, #13
 8007fdc:	e094      	b.n	8008108 <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007fde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fe0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007fe2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007fe4:	441a      	add	r2, r3
 8007fe6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fe8:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007fea:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007fee:	2b02      	cmp	r3, #2
 8007ff0:	d103      	bne.n	8007ffa <find_volume+0x3de>
 8007ff2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ff4:	699b      	ldr	r3, [r3, #24]
 8007ff6:	005b      	lsls	r3, r3, #1
 8007ff8:	e00a      	b.n	8008010 <find_volume+0x3f4>
 8007ffa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ffc:	699a      	ldr	r2, [r3, #24]
 8007ffe:	4613      	mov	r3, r2
 8008000:	005b      	lsls	r3, r3, #1
 8008002:	4413      	add	r3, r2
 8008004:	085a      	lsrs	r2, r3, #1
 8008006:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008008:	699b      	ldr	r3, [r3, #24]
 800800a:	f003 0301 	and.w	r3, r3, #1
 800800e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008010:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008012:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008014:	69da      	ldr	r2, [r3, #28]
 8008016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008018:	899b      	ldrh	r3, [r3, #12]
 800801a:	4619      	mov	r1, r3
 800801c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800801e:	440b      	add	r3, r1
 8008020:	3b01      	subs	r3, #1
 8008022:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008024:	8989      	ldrh	r1, [r1, #12]
 8008026:	fbb3 f3f1 	udiv	r3, r3, r1
 800802a:	429a      	cmp	r2, r3
 800802c:	d201      	bcs.n	8008032 <find_volume+0x416>
 800802e:	230d      	movs	r3, #13
 8008030:	e06a      	b.n	8008108 <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008032:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008034:	f04f 32ff 	mov.w	r2, #4294967295
 8008038:	615a      	str	r2, [r3, #20]
 800803a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800803c:	695a      	ldr	r2, [r3, #20]
 800803e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008040:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8008042:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008044:	2280      	movs	r2, #128	@ 0x80
 8008046:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008048:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800804c:	2b03      	cmp	r3, #3
 800804e:	d149      	bne.n	80080e4 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008050:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008052:	3334      	adds	r3, #52	@ 0x34
 8008054:	3330      	adds	r3, #48	@ 0x30
 8008056:	4618      	mov	r0, r3
 8008058:	f7fe fa66 	bl	8006528 <ld_word>
 800805c:	4603      	mov	r3, r0
 800805e:	2b01      	cmp	r3, #1
 8008060:	d140      	bne.n	80080e4 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008062:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008064:	3301      	adds	r3, #1
 8008066:	4619      	mov	r1, r3
 8008068:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800806a:	f7fe fd0d 	bl	8006a88 <move_window>
 800806e:	4603      	mov	r3, r0
 8008070:	2b00      	cmp	r3, #0
 8008072:	d137      	bne.n	80080e4 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8008074:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008076:	2200      	movs	r2, #0
 8008078:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800807a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800807c:	3334      	adds	r3, #52	@ 0x34
 800807e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008082:	4618      	mov	r0, r3
 8008084:	f7fe fa50 	bl	8006528 <ld_word>
 8008088:	4603      	mov	r3, r0
 800808a:	461a      	mov	r2, r3
 800808c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8008090:	429a      	cmp	r2, r3
 8008092:	d127      	bne.n	80080e4 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008096:	3334      	adds	r3, #52	@ 0x34
 8008098:	4618      	mov	r0, r3
 800809a:	f7fe fa5d 	bl	8006558 <ld_dword>
 800809e:	4603      	mov	r3, r0
 80080a0:	4a1b      	ldr	r2, [pc, #108]	@ (8008110 <find_volume+0x4f4>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d11e      	bne.n	80080e4 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80080a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080a8:	3334      	adds	r3, #52	@ 0x34
 80080aa:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80080ae:	4618      	mov	r0, r3
 80080b0:	f7fe fa52 	bl	8006558 <ld_dword>
 80080b4:	4603      	mov	r3, r0
 80080b6:	4a17      	ldr	r2, [pc, #92]	@ (8008114 <find_volume+0x4f8>)
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d113      	bne.n	80080e4 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80080bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080be:	3334      	adds	r3, #52	@ 0x34
 80080c0:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80080c4:	4618      	mov	r0, r3
 80080c6:	f7fe fa47 	bl	8006558 <ld_dword>
 80080ca:	4602      	mov	r2, r0
 80080cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080ce:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80080d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080d2:	3334      	adds	r3, #52	@ 0x34
 80080d4:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80080d8:	4618      	mov	r0, r3
 80080da:	f7fe fa3d 	bl	8006558 <ld_dword>
 80080de:	4602      	mov	r2, r0
 80080e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080e2:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80080e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080e6:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80080ea:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80080ec:	4b0a      	ldr	r3, [pc, #40]	@ (8008118 <find_volume+0x4fc>)
 80080ee:	881b      	ldrh	r3, [r3, #0]
 80080f0:	3301      	adds	r3, #1
 80080f2:	b29a      	uxth	r2, r3
 80080f4:	4b08      	ldr	r3, [pc, #32]	@ (8008118 <find_volume+0x4fc>)
 80080f6:	801a      	strh	r2, [r3, #0]
 80080f8:	4b07      	ldr	r3, [pc, #28]	@ (8008118 <find_volume+0x4fc>)
 80080fa:	881a      	ldrh	r2, [r3, #0]
 80080fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080fe:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8008100:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008102:	f7fe fc59 	bl	80069b8 <clear_lock>
#endif
	return FR_OK;
 8008106:	2300      	movs	r3, #0
}
 8008108:	4618      	mov	r0, r3
 800810a:	3758      	adds	r7, #88	@ 0x58
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}
 8008110:	41615252 	.word	0x41615252
 8008114:	61417272 	.word	0x61417272
 8008118:	2000230c 	.word	0x2000230c

0800811c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b084      	sub	sp, #16
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
 8008124:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8008126:	2309      	movs	r3, #9
 8008128:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d01c      	beq.n	800816a <validate+0x4e>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d018      	beq.n	800816a <validate+0x4e>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	781b      	ldrb	r3, [r3, #0]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d013      	beq.n	800816a <validate+0x4e>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	889a      	ldrh	r2, [r3, #4]
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	88db      	ldrh	r3, [r3, #6]
 800814c:	429a      	cmp	r2, r3
 800814e:	d10c      	bne.n	800816a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	785b      	ldrb	r3, [r3, #1]
 8008156:	4618      	mov	r0, r3
 8008158:	f7fe f946 	bl	80063e8 <disk_status>
 800815c:	4603      	mov	r3, r0
 800815e:	f003 0301 	and.w	r3, r3, #1
 8008162:	2b00      	cmp	r3, #0
 8008164:	d101      	bne.n	800816a <validate+0x4e>
			res = FR_OK;
 8008166:	2300      	movs	r3, #0
 8008168:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800816a:	7bfb      	ldrb	r3, [r7, #15]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d102      	bne.n	8008176 <validate+0x5a>
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	e000      	b.n	8008178 <validate+0x5c>
 8008176:	2300      	movs	r3, #0
 8008178:	683a      	ldr	r2, [r7, #0]
 800817a:	6013      	str	r3, [r2, #0]
	return res;
 800817c:	7bfb      	ldrb	r3, [r7, #15]
}
 800817e:	4618      	mov	r0, r3
 8008180:	3710      	adds	r7, #16
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}
	...

08008188 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b088      	sub	sp, #32
 800818c:	af00      	add	r7, sp, #0
 800818e:	60f8      	str	r0, [r7, #12]
 8008190:	60b9      	str	r1, [r7, #8]
 8008192:	4613      	mov	r3, r2
 8008194:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800819a:	f107 0310 	add.w	r3, r7, #16
 800819e:	4618      	mov	r0, r3
 80081a0:	f7ff fca2 	bl	8007ae8 <get_ldnumber>
 80081a4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80081a6:	69fb      	ldr	r3, [r7, #28]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	da01      	bge.n	80081b0 <f_mount+0x28>
 80081ac:	230b      	movs	r3, #11
 80081ae:	e02b      	b.n	8008208 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80081b0:	4a17      	ldr	r2, [pc, #92]	@ (8008210 <f_mount+0x88>)
 80081b2:	69fb      	ldr	r3, [r7, #28]
 80081b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081b8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80081ba:	69bb      	ldr	r3, [r7, #24]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d005      	beq.n	80081cc <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80081c0:	69b8      	ldr	r0, [r7, #24]
 80081c2:	f7fe fbf9 	bl	80069b8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80081c6:	69bb      	ldr	r3, [r7, #24]
 80081c8:	2200      	movs	r2, #0
 80081ca:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d002      	beq.n	80081d8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	2200      	movs	r2, #0
 80081d6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80081d8:	68fa      	ldr	r2, [r7, #12]
 80081da:	490d      	ldr	r1, [pc, #52]	@ (8008210 <f_mount+0x88>)
 80081dc:	69fb      	ldr	r3, [r7, #28]
 80081de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d002      	beq.n	80081ee <f_mount+0x66>
 80081e8:	79fb      	ldrb	r3, [r7, #7]
 80081ea:	2b01      	cmp	r3, #1
 80081ec:	d001      	beq.n	80081f2 <f_mount+0x6a>
 80081ee:	2300      	movs	r3, #0
 80081f0:	e00a      	b.n	8008208 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80081f2:	f107 010c 	add.w	r1, r7, #12
 80081f6:	f107 0308 	add.w	r3, r7, #8
 80081fa:	2200      	movs	r2, #0
 80081fc:	4618      	mov	r0, r3
 80081fe:	f7ff fd0d 	bl	8007c1c <find_volume>
 8008202:	4603      	mov	r3, r0
 8008204:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008206:	7dfb      	ldrb	r3, [r7, #23]
}
 8008208:	4618      	mov	r0, r3
 800820a:	3720      	adds	r7, #32
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}
 8008210:	20002308 	.word	0x20002308

08008214 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b098      	sub	sp, #96	@ 0x60
 8008218:	af00      	add	r7, sp, #0
 800821a:	60f8      	str	r0, [r7, #12]
 800821c:	60b9      	str	r1, [r7, #8]
 800821e:	4613      	mov	r3, r2
 8008220:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d101      	bne.n	800822c <f_open+0x18>
 8008228:	2309      	movs	r3, #9
 800822a:	e1b7      	b.n	800859c <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800822c:	79fb      	ldrb	r3, [r7, #7]
 800822e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008232:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8008234:	79fa      	ldrb	r2, [r7, #7]
 8008236:	f107 0110 	add.w	r1, r7, #16
 800823a:	f107 0308 	add.w	r3, r7, #8
 800823e:	4618      	mov	r0, r3
 8008240:	f7ff fcec 	bl	8007c1c <find_volume>
 8008244:	4603      	mov	r3, r0
 8008246:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800824a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800824e:	2b00      	cmp	r3, #0
 8008250:	f040 819b 	bne.w	800858a <f_open+0x376>
		dj.obj.fs = fs;
 8008254:	693b      	ldr	r3, [r7, #16]
 8008256:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008258:	68ba      	ldr	r2, [r7, #8]
 800825a:	f107 0314 	add.w	r3, r7, #20
 800825e:	4611      	mov	r1, r2
 8008260:	4618      	mov	r0, r3
 8008262:	f7ff fbcb 	bl	80079fc <follow_path>
 8008266:	4603      	mov	r3, r0
 8008268:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800826c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008270:	2b00      	cmp	r3, #0
 8008272:	d118      	bne.n	80082a6 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008274:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008278:	b25b      	sxtb	r3, r3
 800827a:	2b00      	cmp	r3, #0
 800827c:	da03      	bge.n	8008286 <f_open+0x72>
				res = FR_INVALID_NAME;
 800827e:	2306      	movs	r3, #6
 8008280:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8008284:	e00f      	b.n	80082a6 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008286:	79fb      	ldrb	r3, [r7, #7]
 8008288:	2b01      	cmp	r3, #1
 800828a:	bf8c      	ite	hi
 800828c:	2301      	movhi	r3, #1
 800828e:	2300      	movls	r3, #0
 8008290:	b2db      	uxtb	r3, r3
 8008292:	461a      	mov	r2, r3
 8008294:	f107 0314 	add.w	r3, r7, #20
 8008298:	4611      	mov	r1, r2
 800829a:	4618      	mov	r0, r3
 800829c:	f7fe fa44 	bl	8006728 <chk_lock>
 80082a0:	4603      	mov	r3, r0
 80082a2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80082a6:	79fb      	ldrb	r3, [r7, #7]
 80082a8:	f003 031c 	and.w	r3, r3, #28
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d07f      	beq.n	80083b0 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 80082b0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d017      	beq.n	80082e8 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80082b8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80082bc:	2b04      	cmp	r3, #4
 80082be:	d10e      	bne.n	80082de <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80082c0:	f7fe fa8e 	bl	80067e0 <enq_lock>
 80082c4:	4603      	mov	r3, r0
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d006      	beq.n	80082d8 <f_open+0xc4>
 80082ca:	f107 0314 	add.w	r3, r7, #20
 80082ce:	4618      	mov	r0, r3
 80082d0:	f7ff fa50 	bl	8007774 <dir_register>
 80082d4:	4603      	mov	r3, r0
 80082d6:	e000      	b.n	80082da <f_open+0xc6>
 80082d8:	2312      	movs	r3, #18
 80082da:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80082de:	79fb      	ldrb	r3, [r7, #7]
 80082e0:	f043 0308 	orr.w	r3, r3, #8
 80082e4:	71fb      	strb	r3, [r7, #7]
 80082e6:	e010      	b.n	800830a <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80082e8:	7ebb      	ldrb	r3, [r7, #26]
 80082ea:	f003 0311 	and.w	r3, r3, #17
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d003      	beq.n	80082fa <f_open+0xe6>
					res = FR_DENIED;
 80082f2:	2307      	movs	r3, #7
 80082f4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80082f8:	e007      	b.n	800830a <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80082fa:	79fb      	ldrb	r3, [r7, #7]
 80082fc:	f003 0304 	and.w	r3, r3, #4
 8008300:	2b00      	cmp	r3, #0
 8008302:	d002      	beq.n	800830a <f_open+0xf6>
 8008304:	2308      	movs	r3, #8
 8008306:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800830a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800830e:	2b00      	cmp	r3, #0
 8008310:	d168      	bne.n	80083e4 <f_open+0x1d0>
 8008312:	79fb      	ldrb	r3, [r7, #7]
 8008314:	f003 0308 	and.w	r3, r3, #8
 8008318:	2b00      	cmp	r3, #0
 800831a:	d063      	beq.n	80083e4 <f_open+0x1d0>
				dw = GET_FATTIME();
 800831c:	f7fd fe22 	bl	8005f64 <get_fattime>
 8008320:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8008322:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008324:	330e      	adds	r3, #14
 8008326:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008328:	4618      	mov	r0, r3
 800832a:	f7fe f953 	bl	80065d4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800832e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008330:	3316      	adds	r3, #22
 8008332:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008334:	4618      	mov	r0, r3
 8008336:	f7fe f94d 	bl	80065d4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800833a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800833c:	330b      	adds	r3, #11
 800833e:	2220      	movs	r2, #32
 8008340:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008342:	693b      	ldr	r3, [r7, #16]
 8008344:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008346:	4611      	mov	r1, r2
 8008348:	4618      	mov	r0, r3
 800834a:	f7ff f922 	bl	8007592 <ld_clust>
 800834e:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008350:	693b      	ldr	r3, [r7, #16]
 8008352:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008354:	2200      	movs	r2, #0
 8008356:	4618      	mov	r0, r3
 8008358:	f7ff f93a 	bl	80075d0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800835c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800835e:	331c      	adds	r3, #28
 8008360:	2100      	movs	r1, #0
 8008362:	4618      	mov	r0, r3
 8008364:	f7fe f936 	bl	80065d4 <st_dword>
					fs->wflag = 1;
 8008368:	693b      	ldr	r3, [r7, #16]
 800836a:	2201      	movs	r2, #1
 800836c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800836e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008370:	2b00      	cmp	r3, #0
 8008372:	d037      	beq.n	80083e4 <f_open+0x1d0>
						dw = fs->winsect;
 8008374:	693b      	ldr	r3, [r7, #16]
 8008376:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008378:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800837a:	f107 0314 	add.w	r3, r7, #20
 800837e:	2200      	movs	r2, #0
 8008380:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8008382:	4618      	mov	r0, r3
 8008384:	f7fe fe2a 	bl	8006fdc <remove_chain>
 8008388:	4603      	mov	r3, r0
 800838a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800838e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008392:	2b00      	cmp	r3, #0
 8008394:	d126      	bne.n	80083e4 <f_open+0x1d0>
							res = move_window(fs, dw);
 8008396:	693b      	ldr	r3, [r7, #16]
 8008398:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800839a:	4618      	mov	r0, r3
 800839c:	f7fe fb74 	bl	8006a88 <move_window>
 80083a0:	4603      	mov	r3, r0
 80083a2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80083a6:	693b      	ldr	r3, [r7, #16]
 80083a8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80083aa:	3a01      	subs	r2, #1
 80083ac:	611a      	str	r2, [r3, #16]
 80083ae:	e019      	b.n	80083e4 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80083b0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d115      	bne.n	80083e4 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80083b8:	7ebb      	ldrb	r3, [r7, #26]
 80083ba:	f003 0310 	and.w	r3, r3, #16
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d003      	beq.n	80083ca <f_open+0x1b6>
					res = FR_NO_FILE;
 80083c2:	2304      	movs	r3, #4
 80083c4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80083c8:	e00c      	b.n	80083e4 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80083ca:	79fb      	ldrb	r3, [r7, #7]
 80083cc:	f003 0302 	and.w	r3, r3, #2
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d007      	beq.n	80083e4 <f_open+0x1d0>
 80083d4:	7ebb      	ldrb	r3, [r7, #26]
 80083d6:	f003 0301 	and.w	r3, r3, #1
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d002      	beq.n	80083e4 <f_open+0x1d0>
						res = FR_DENIED;
 80083de:	2307      	movs	r3, #7
 80083e0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80083e4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d126      	bne.n	800843a <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80083ec:	79fb      	ldrb	r3, [r7, #7]
 80083ee:	f003 0308 	and.w	r3, r3, #8
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d003      	beq.n	80083fe <f_open+0x1ea>
				mode |= FA_MODIFIED;
 80083f6:	79fb      	ldrb	r3, [r7, #7]
 80083f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80083fc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80083fe:	693b      	ldr	r3, [r7, #16]
 8008400:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8008406:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800840c:	79fb      	ldrb	r3, [r7, #7]
 800840e:	2b01      	cmp	r3, #1
 8008410:	bf8c      	ite	hi
 8008412:	2301      	movhi	r3, #1
 8008414:	2300      	movls	r3, #0
 8008416:	b2db      	uxtb	r3, r3
 8008418:	461a      	mov	r2, r3
 800841a:	f107 0314 	add.w	r3, r7, #20
 800841e:	4611      	mov	r1, r2
 8008420:	4618      	mov	r0, r3
 8008422:	f7fe f9ff 	bl	8006824 <inc_lock>
 8008426:	4602      	mov	r2, r0
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	691b      	ldr	r3, [r3, #16]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d102      	bne.n	800843a <f_open+0x226>
 8008434:	2302      	movs	r3, #2
 8008436:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800843a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800843e:	2b00      	cmp	r3, #0
 8008440:	f040 80a3 	bne.w	800858a <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008444:	693b      	ldr	r3, [r7, #16]
 8008446:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008448:	4611      	mov	r1, r2
 800844a:	4618      	mov	r0, r3
 800844c:	f7ff f8a1 	bl	8007592 <ld_clust>
 8008450:	4602      	mov	r2, r0
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008456:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008458:	331c      	adds	r3, #28
 800845a:	4618      	mov	r0, r3
 800845c:	f7fe f87c 	bl	8006558 <ld_dword>
 8008460:	4602      	mov	r2, r0
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	2200      	movs	r2, #0
 800846a:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800846c:	693a      	ldr	r2, [r7, #16]
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8008472:	693b      	ldr	r3, [r7, #16]
 8008474:	88da      	ldrh	r2, [r3, #6]
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	79fa      	ldrb	r2, [r7, #7]
 800847e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	2200      	movs	r2, #0
 8008484:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	2200      	movs	r2, #0
 800848a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	2200      	movs	r2, #0
 8008490:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	3330      	adds	r3, #48	@ 0x30
 8008496:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800849a:	2100      	movs	r1, #0
 800849c:	4618      	mov	r0, r3
 800849e:	f7fe f8e6 	bl	800666e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80084a2:	79fb      	ldrb	r3, [r7, #7]
 80084a4:	f003 0320 	and.w	r3, r3, #32
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d06e      	beq.n	800858a <f_open+0x376>
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	68db      	ldr	r3, [r3, #12]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d06a      	beq.n	800858a <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	68da      	ldr	r2, [r3, #12]
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80084bc:	693b      	ldr	r3, [r7, #16]
 80084be:	895b      	ldrh	r3, [r3, #10]
 80084c0:	461a      	mov	r2, r3
 80084c2:	693b      	ldr	r3, [r7, #16]
 80084c4:	899b      	ldrh	r3, [r3, #12]
 80084c6:	fb02 f303 	mul.w	r3, r2, r3
 80084ca:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	689b      	ldr	r3, [r3, #8]
 80084d0:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	68db      	ldr	r3, [r3, #12]
 80084d6:	657b      	str	r3, [r7, #84]	@ 0x54
 80084d8:	e016      	b.n	8008508 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80084de:	4618      	mov	r0, r3
 80084e0:	f7fe fb8f 	bl	8006c02 <get_fat>
 80084e4:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80084e6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80084e8:	2b01      	cmp	r3, #1
 80084ea:	d802      	bhi.n	80084f2 <f_open+0x2de>
 80084ec:	2302      	movs	r3, #2
 80084ee:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80084f2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80084f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084f8:	d102      	bne.n	8008500 <f_open+0x2ec>
 80084fa:	2301      	movs	r3, #1
 80084fc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008500:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008502:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008504:	1ad3      	subs	r3, r2, r3
 8008506:	657b      	str	r3, [r7, #84]	@ 0x54
 8008508:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800850c:	2b00      	cmp	r3, #0
 800850e:	d103      	bne.n	8008518 <f_open+0x304>
 8008510:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008512:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008514:	429a      	cmp	r2, r3
 8008516:	d8e0      	bhi.n	80084da <f_open+0x2c6>
				}
				fp->clust = clst;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800851c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800851e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008522:	2b00      	cmp	r3, #0
 8008524:	d131      	bne.n	800858a <f_open+0x376>
 8008526:	693b      	ldr	r3, [r7, #16]
 8008528:	899b      	ldrh	r3, [r3, #12]
 800852a:	461a      	mov	r2, r3
 800852c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800852e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008532:	fb01 f202 	mul.w	r2, r1, r2
 8008536:	1a9b      	subs	r3, r3, r2
 8008538:	2b00      	cmp	r3, #0
 800853a:	d026      	beq.n	800858a <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800853c:	693b      	ldr	r3, [r7, #16]
 800853e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008540:	4618      	mov	r0, r3
 8008542:	f7fe fb3f 	bl	8006bc4 <clust2sect>
 8008546:	6478      	str	r0, [r7, #68]	@ 0x44
 8008548:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800854a:	2b00      	cmp	r3, #0
 800854c:	d103      	bne.n	8008556 <f_open+0x342>
						res = FR_INT_ERR;
 800854e:	2302      	movs	r3, #2
 8008550:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8008554:	e019      	b.n	800858a <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008556:	693b      	ldr	r3, [r7, #16]
 8008558:	899b      	ldrh	r3, [r3, #12]
 800855a:	461a      	mov	r2, r3
 800855c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800855e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008562:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008564:	441a      	add	r2, r3
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800856a:	693b      	ldr	r3, [r7, #16]
 800856c:	7858      	ldrb	r0, [r3, #1]
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	6a1a      	ldr	r2, [r3, #32]
 8008578:	2301      	movs	r3, #1
 800857a:	f7fd ff77 	bl	800646c <disk_read>
 800857e:	4603      	mov	r3, r0
 8008580:	2b00      	cmp	r3, #0
 8008582:	d002      	beq.n	800858a <f_open+0x376>
 8008584:	2301      	movs	r3, #1
 8008586:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800858a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800858e:	2b00      	cmp	r3, #0
 8008590:	d002      	beq.n	8008598 <f_open+0x384>
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	2200      	movs	r2, #0
 8008596:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008598:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800859c:	4618      	mov	r0, r3
 800859e:	3760      	adds	r7, #96	@ 0x60
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd80      	pop	{r7, pc}

080085a4 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b08c      	sub	sp, #48	@ 0x30
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	60f8      	str	r0, [r7, #12]
 80085ac:	60b9      	str	r1, [r7, #8]
 80085ae:	607a      	str	r2, [r7, #4]
 80085b0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	2200      	movs	r2, #0
 80085ba:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	f107 0210 	add.w	r2, r7, #16
 80085c2:	4611      	mov	r1, r2
 80085c4:	4618      	mov	r0, r3
 80085c6:	f7ff fda9 	bl	800811c <validate>
 80085ca:	4603      	mov	r3, r0
 80085cc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80085d0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d107      	bne.n	80085e8 <f_write+0x44>
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	7d5b      	ldrb	r3, [r3, #21]
 80085dc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80085e0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d002      	beq.n	80085ee <f_write+0x4a>
 80085e8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80085ec:	e16a      	b.n	80088c4 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	7d1b      	ldrb	r3, [r3, #20]
 80085f2:	f003 0302 	and.w	r3, r3, #2
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d101      	bne.n	80085fe <f_write+0x5a>
 80085fa:	2307      	movs	r3, #7
 80085fc:	e162      	b.n	80088c4 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	699a      	ldr	r2, [r3, #24]
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	441a      	add	r2, r3
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	699b      	ldr	r3, [r3, #24]
 800860a:	429a      	cmp	r2, r3
 800860c:	f080 814c 	bcs.w	80088a8 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	699b      	ldr	r3, [r3, #24]
 8008614:	43db      	mvns	r3, r3
 8008616:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008618:	e146      	b.n	80088a8 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	699b      	ldr	r3, [r3, #24]
 800861e:	693a      	ldr	r2, [r7, #16]
 8008620:	8992      	ldrh	r2, [r2, #12]
 8008622:	fbb3 f1f2 	udiv	r1, r3, r2
 8008626:	fb01 f202 	mul.w	r2, r1, r2
 800862a:	1a9b      	subs	r3, r3, r2
 800862c:	2b00      	cmp	r3, #0
 800862e:	f040 80f1 	bne.w	8008814 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	699b      	ldr	r3, [r3, #24]
 8008636:	693a      	ldr	r2, [r7, #16]
 8008638:	8992      	ldrh	r2, [r2, #12]
 800863a:	fbb3 f3f2 	udiv	r3, r3, r2
 800863e:	693a      	ldr	r2, [r7, #16]
 8008640:	8952      	ldrh	r2, [r2, #10]
 8008642:	3a01      	subs	r2, #1
 8008644:	4013      	ands	r3, r2
 8008646:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8008648:	69bb      	ldr	r3, [r7, #24]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d143      	bne.n	80086d6 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	699b      	ldr	r3, [r3, #24]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d10c      	bne.n	8008670 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	689b      	ldr	r3, [r3, #8]
 800865a:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800865c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800865e:	2b00      	cmp	r3, #0
 8008660:	d11a      	bne.n	8008698 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	2100      	movs	r1, #0
 8008666:	4618      	mov	r0, r3
 8008668:	f7fe fd1d 	bl	80070a6 <create_chain>
 800866c:	62b8      	str	r0, [r7, #40]	@ 0x28
 800866e:	e013      	b.n	8008698 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008674:	2b00      	cmp	r3, #0
 8008676:	d007      	beq.n	8008688 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	699b      	ldr	r3, [r3, #24]
 800867c:	4619      	mov	r1, r3
 800867e:	68f8      	ldr	r0, [r7, #12]
 8008680:	f7fe fda9 	bl	80071d6 <clmt_clust>
 8008684:	62b8      	str	r0, [r7, #40]	@ 0x28
 8008686:	e007      	b.n	8008698 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008688:	68fa      	ldr	r2, [r7, #12]
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	69db      	ldr	r3, [r3, #28]
 800868e:	4619      	mov	r1, r3
 8008690:	4610      	mov	r0, r2
 8008692:	f7fe fd08 	bl	80070a6 <create_chain>
 8008696:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800869a:	2b00      	cmp	r3, #0
 800869c:	f000 8109 	beq.w	80088b2 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80086a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086a2:	2b01      	cmp	r3, #1
 80086a4:	d104      	bne.n	80086b0 <f_write+0x10c>
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	2202      	movs	r2, #2
 80086aa:	755a      	strb	r2, [r3, #21]
 80086ac:	2302      	movs	r3, #2
 80086ae:	e109      	b.n	80088c4 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80086b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086b6:	d104      	bne.n	80086c2 <f_write+0x11e>
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	2201      	movs	r2, #1
 80086bc:	755a      	strb	r2, [r3, #21]
 80086be:	2301      	movs	r3, #1
 80086c0:	e100      	b.n	80088c4 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80086c6:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	689b      	ldr	r3, [r3, #8]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d102      	bne.n	80086d6 <f_write+0x132>
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80086d4:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	7d1b      	ldrb	r3, [r3, #20]
 80086da:	b25b      	sxtb	r3, r3
 80086dc:	2b00      	cmp	r3, #0
 80086de:	da18      	bge.n	8008712 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80086e0:	693b      	ldr	r3, [r7, #16]
 80086e2:	7858      	ldrb	r0, [r3, #1]
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	6a1a      	ldr	r2, [r3, #32]
 80086ee:	2301      	movs	r3, #1
 80086f0:	f7fd fedc 	bl	80064ac <disk_write>
 80086f4:	4603      	mov	r3, r0
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d004      	beq.n	8008704 <f_write+0x160>
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	2201      	movs	r2, #1
 80086fe:	755a      	strb	r2, [r3, #21]
 8008700:	2301      	movs	r3, #1
 8008702:	e0df      	b.n	80088c4 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	7d1b      	ldrb	r3, [r3, #20]
 8008708:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800870c:	b2da      	uxtb	r2, r3
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008712:	693a      	ldr	r2, [r7, #16]
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	69db      	ldr	r3, [r3, #28]
 8008718:	4619      	mov	r1, r3
 800871a:	4610      	mov	r0, r2
 800871c:	f7fe fa52 	bl	8006bc4 <clust2sect>
 8008720:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d104      	bne.n	8008732 <f_write+0x18e>
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	2202      	movs	r2, #2
 800872c:	755a      	strb	r2, [r3, #21]
 800872e:	2302      	movs	r3, #2
 8008730:	e0c8      	b.n	80088c4 <f_write+0x320>
			sect += csect;
 8008732:	697a      	ldr	r2, [r7, #20]
 8008734:	69bb      	ldr	r3, [r7, #24]
 8008736:	4413      	add	r3, r2
 8008738:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800873a:	693b      	ldr	r3, [r7, #16]
 800873c:	899b      	ldrh	r3, [r3, #12]
 800873e:	461a      	mov	r2, r3
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	fbb3 f3f2 	udiv	r3, r3, r2
 8008746:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008748:	6a3b      	ldr	r3, [r7, #32]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d043      	beq.n	80087d6 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800874e:	69ba      	ldr	r2, [r7, #24]
 8008750:	6a3b      	ldr	r3, [r7, #32]
 8008752:	4413      	add	r3, r2
 8008754:	693a      	ldr	r2, [r7, #16]
 8008756:	8952      	ldrh	r2, [r2, #10]
 8008758:	4293      	cmp	r3, r2
 800875a:	d905      	bls.n	8008768 <f_write+0x1c4>
					cc = fs->csize - csect;
 800875c:	693b      	ldr	r3, [r7, #16]
 800875e:	895b      	ldrh	r3, [r3, #10]
 8008760:	461a      	mov	r2, r3
 8008762:	69bb      	ldr	r3, [r7, #24]
 8008764:	1ad3      	subs	r3, r2, r3
 8008766:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008768:	693b      	ldr	r3, [r7, #16]
 800876a:	7858      	ldrb	r0, [r3, #1]
 800876c:	6a3b      	ldr	r3, [r7, #32]
 800876e:	697a      	ldr	r2, [r7, #20]
 8008770:	69f9      	ldr	r1, [r7, #28]
 8008772:	f7fd fe9b 	bl	80064ac <disk_write>
 8008776:	4603      	mov	r3, r0
 8008778:	2b00      	cmp	r3, #0
 800877a:	d004      	beq.n	8008786 <f_write+0x1e2>
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	2201      	movs	r2, #1
 8008780:	755a      	strb	r2, [r3, #21]
 8008782:	2301      	movs	r3, #1
 8008784:	e09e      	b.n	80088c4 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	6a1a      	ldr	r2, [r3, #32]
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	1ad3      	subs	r3, r2, r3
 800878e:	6a3a      	ldr	r2, [r7, #32]
 8008790:	429a      	cmp	r2, r3
 8008792:	d918      	bls.n	80087c6 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	6a1a      	ldr	r2, [r3, #32]
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	1ad3      	subs	r3, r2, r3
 80087a2:	693a      	ldr	r2, [r7, #16]
 80087a4:	8992      	ldrh	r2, [r2, #12]
 80087a6:	fb02 f303 	mul.w	r3, r2, r3
 80087aa:	69fa      	ldr	r2, [r7, #28]
 80087ac:	18d1      	adds	r1, r2, r3
 80087ae:	693b      	ldr	r3, [r7, #16]
 80087b0:	899b      	ldrh	r3, [r3, #12]
 80087b2:	461a      	mov	r2, r3
 80087b4:	f7fd ff3a 	bl	800662c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	7d1b      	ldrb	r3, [r3, #20]
 80087bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80087c0:	b2da      	uxtb	r2, r3
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80087c6:	693b      	ldr	r3, [r7, #16]
 80087c8:	899b      	ldrh	r3, [r3, #12]
 80087ca:	461a      	mov	r2, r3
 80087cc:	6a3b      	ldr	r3, [r7, #32]
 80087ce:	fb02 f303 	mul.w	r3, r2, r3
 80087d2:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 80087d4:	e04b      	b.n	800886e <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	6a1b      	ldr	r3, [r3, #32]
 80087da:	697a      	ldr	r2, [r7, #20]
 80087dc:	429a      	cmp	r2, r3
 80087de:	d016      	beq.n	800880e <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	699a      	ldr	r2, [r3, #24]
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80087e8:	429a      	cmp	r2, r3
 80087ea:	d210      	bcs.n	800880e <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80087ec:	693b      	ldr	r3, [r7, #16]
 80087ee:	7858      	ldrb	r0, [r3, #1]
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80087f6:	2301      	movs	r3, #1
 80087f8:	697a      	ldr	r2, [r7, #20]
 80087fa:	f7fd fe37 	bl	800646c <disk_read>
 80087fe:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008800:	2b00      	cmp	r3, #0
 8008802:	d004      	beq.n	800880e <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	2201      	movs	r2, #1
 8008808:	755a      	strb	r2, [r3, #21]
 800880a:	2301      	movs	r3, #1
 800880c:	e05a      	b.n	80088c4 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	697a      	ldr	r2, [r7, #20]
 8008812:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	899b      	ldrh	r3, [r3, #12]
 8008818:	4618      	mov	r0, r3
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	699b      	ldr	r3, [r3, #24]
 800881e:	693a      	ldr	r2, [r7, #16]
 8008820:	8992      	ldrh	r2, [r2, #12]
 8008822:	fbb3 f1f2 	udiv	r1, r3, r2
 8008826:	fb01 f202 	mul.w	r2, r1, r2
 800882a:	1a9b      	subs	r3, r3, r2
 800882c:	1ac3      	subs	r3, r0, r3
 800882e:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008830:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	429a      	cmp	r2, r3
 8008836:	d901      	bls.n	800883c <f_write+0x298>
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	699b      	ldr	r3, [r3, #24]
 8008846:	693a      	ldr	r2, [r7, #16]
 8008848:	8992      	ldrh	r2, [r2, #12]
 800884a:	fbb3 f0f2 	udiv	r0, r3, r2
 800884e:	fb00 f202 	mul.w	r2, r0, r2
 8008852:	1a9b      	subs	r3, r3, r2
 8008854:	440b      	add	r3, r1
 8008856:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008858:	69f9      	ldr	r1, [r7, #28]
 800885a:	4618      	mov	r0, r3
 800885c:	f7fd fee6 	bl	800662c <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	7d1b      	ldrb	r3, [r3, #20]
 8008864:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008868:	b2da      	uxtb	r2, r3
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800886e:	69fa      	ldr	r2, [r7, #28]
 8008870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008872:	4413      	add	r3, r2
 8008874:	61fb      	str	r3, [r7, #28]
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	699a      	ldr	r2, [r3, #24]
 800887a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800887c:	441a      	add	r2, r3
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	619a      	str	r2, [r3, #24]
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	68da      	ldr	r2, [r3, #12]
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	699b      	ldr	r3, [r3, #24]
 800888a:	429a      	cmp	r2, r3
 800888c:	bf38      	it	cc
 800888e:	461a      	movcc	r2, r3
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	60da      	str	r2, [r3, #12]
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	681a      	ldr	r2, [r3, #0]
 8008898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800889a:	441a      	add	r2, r3
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	601a      	str	r2, [r3, #0]
 80088a0:	687a      	ldr	r2, [r7, #4]
 80088a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088a4:	1ad3      	subs	r3, r2, r3
 80088a6:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	f47f aeb5 	bne.w	800861a <f_write+0x76>
 80088b0:	e000      	b.n	80088b4 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80088b2:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	7d1b      	ldrb	r3, [r3, #20]
 80088b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80088bc:	b2da      	uxtb	r2, r3
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80088c2:	2300      	movs	r3, #0
}
 80088c4:	4618      	mov	r0, r3
 80088c6:	3730      	adds	r7, #48	@ 0x30
 80088c8:	46bd      	mov	sp, r7
 80088ca:	bd80      	pop	{r7, pc}

080088cc <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b086      	sub	sp, #24
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f107 0208 	add.w	r2, r7, #8
 80088da:	4611      	mov	r1, r2
 80088dc:	4618      	mov	r0, r3
 80088de:	f7ff fc1d 	bl	800811c <validate>
 80088e2:	4603      	mov	r3, r0
 80088e4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80088e6:	7dfb      	ldrb	r3, [r7, #23]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d168      	bne.n	80089be <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	7d1b      	ldrb	r3, [r3, #20]
 80088f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d062      	beq.n	80089be <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	7d1b      	ldrb	r3, [r3, #20]
 80088fc:	b25b      	sxtb	r3, r3
 80088fe:	2b00      	cmp	r3, #0
 8008900:	da15      	bge.n	800892e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	7858      	ldrb	r0, [r3, #1]
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6a1a      	ldr	r2, [r3, #32]
 8008910:	2301      	movs	r3, #1
 8008912:	f7fd fdcb 	bl	80064ac <disk_write>
 8008916:	4603      	mov	r3, r0
 8008918:	2b00      	cmp	r3, #0
 800891a:	d001      	beq.n	8008920 <f_sync+0x54>
 800891c:	2301      	movs	r3, #1
 800891e:	e04f      	b.n	80089c0 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	7d1b      	ldrb	r3, [r3, #20]
 8008924:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008928:	b2da      	uxtb	r2, r3
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800892e:	f7fd fb19 	bl	8005f64 <get_fattime>
 8008932:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008934:	68ba      	ldr	r2, [r7, #8]
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800893a:	4619      	mov	r1, r3
 800893c:	4610      	mov	r0, r2
 800893e:	f7fe f8a3 	bl	8006a88 <move_window>
 8008942:	4603      	mov	r3, r0
 8008944:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008946:	7dfb      	ldrb	r3, [r7, #23]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d138      	bne.n	80089be <f_sync+0xf2>
					dir = fp->dir_ptr;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008950:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	330b      	adds	r3, #11
 8008956:	781a      	ldrb	r2, [r3, #0]
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	330b      	adds	r3, #11
 800895c:	f042 0220 	orr.w	r2, r2, #32
 8008960:	b2d2      	uxtb	r2, r2
 8008962:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6818      	ldr	r0, [r3, #0]
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	689b      	ldr	r3, [r3, #8]
 800896c:	461a      	mov	r2, r3
 800896e:	68f9      	ldr	r1, [r7, #12]
 8008970:	f7fe fe2e 	bl	80075d0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	f103 021c 	add.w	r2, r3, #28
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	68db      	ldr	r3, [r3, #12]
 800897e:	4619      	mov	r1, r3
 8008980:	4610      	mov	r0, r2
 8008982:	f7fd fe27 	bl	80065d4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	3316      	adds	r3, #22
 800898a:	6939      	ldr	r1, [r7, #16]
 800898c:	4618      	mov	r0, r3
 800898e:	f7fd fe21 	bl	80065d4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	3312      	adds	r3, #18
 8008996:	2100      	movs	r1, #0
 8008998:	4618      	mov	r0, r3
 800899a:	f7fd fe00 	bl	800659e <st_word>
					fs->wflag = 1;
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	2201      	movs	r2, #1
 80089a2:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	4618      	mov	r0, r3
 80089a8:	f7fe f89c 	bl	8006ae4 <sync_fs>
 80089ac:	4603      	mov	r3, r0
 80089ae:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	7d1b      	ldrb	r3, [r3, #20]
 80089b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80089b8:	b2da      	uxtb	r2, r3
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80089be:	7dfb      	ldrb	r3, [r7, #23]
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	3718      	adds	r7, #24
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd80      	pop	{r7, pc}

080089c8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b084      	sub	sp, #16
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f7ff ff7b 	bl	80088cc <f_sync>
 80089d6:	4603      	mov	r3, r0
 80089d8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80089da:	7bfb      	ldrb	r3, [r7, #15]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d118      	bne.n	8008a12 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f107 0208 	add.w	r2, r7, #8
 80089e6:	4611      	mov	r1, r2
 80089e8:	4618      	mov	r0, r3
 80089ea:	f7ff fb97 	bl	800811c <validate>
 80089ee:	4603      	mov	r3, r0
 80089f0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80089f2:	7bfb      	ldrb	r3, [r7, #15]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d10c      	bne.n	8008a12 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	691b      	ldr	r3, [r3, #16]
 80089fc:	4618      	mov	r0, r3
 80089fe:	f7fd ff9f 	bl	8006940 <dec_lock>
 8008a02:	4603      	mov	r3, r0
 8008a04:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008a06:	7bfb      	ldrb	r3, [r7, #15]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d102      	bne.n	8008a12 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a14:	4618      	mov	r0, r3
 8008a16:	3710      	adds	r7, #16
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bd80      	pop	{r7, pc}

08008a1c <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b086      	sub	sp, #24
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
 8008a24:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d101      	bne.n	8008a30 <f_opendir+0x14>
 8008a2c:	2309      	movs	r3, #9
 8008a2e:	e064      	b.n	8008afa <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8008a34:	f107 010c 	add.w	r1, r7, #12
 8008a38:	463b      	mov	r3, r7
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	f7ff f8ed 	bl	8007c1c <find_volume>
 8008a42:	4603      	mov	r3, r0
 8008a44:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008a46:	7dfb      	ldrb	r3, [r7, #23]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d14f      	bne.n	8008aec <f_opendir+0xd0>
		obj->fs = fs;
 8008a4c:	68fa      	ldr	r2, [r7, #12]
 8008a4e:	693b      	ldr	r3, [r7, #16]
 8008a50:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	4619      	mov	r1, r3
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f7fe ffd0 	bl	80079fc <follow_path>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8008a60:	7dfb      	ldrb	r3, [r7, #23]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d13d      	bne.n	8008ae2 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8008a6c:	b25b      	sxtb	r3, r3
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	db12      	blt.n	8008a98 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8008a72:	693b      	ldr	r3, [r7, #16]
 8008a74:	799b      	ldrb	r3, [r3, #6]
 8008a76:	f003 0310 	and.w	r3, r3, #16
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d00a      	beq.n	8008a94 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8008a7e:	68fa      	ldr	r2, [r7, #12]
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6a1b      	ldr	r3, [r3, #32]
 8008a84:	4619      	mov	r1, r3
 8008a86:	4610      	mov	r0, r2
 8008a88:	f7fe fd83 	bl	8007592 <ld_clust>
 8008a8c:	4602      	mov	r2, r0
 8008a8e:	693b      	ldr	r3, [r7, #16]
 8008a90:	609a      	str	r2, [r3, #8]
 8008a92:	e001      	b.n	8008a98 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8008a94:	2305      	movs	r3, #5
 8008a96:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8008a98:	7dfb      	ldrb	r3, [r7, #23]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d121      	bne.n	8008ae2 <f_opendir+0xc6>
				obj->id = fs->id;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	88da      	ldrh	r2, [r3, #6]
 8008aa2:	693b      	ldr	r3, [r7, #16]
 8008aa4:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8008aa6:	2100      	movs	r1, #0
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	f7fe fbcc 	bl	8007246 <dir_sdi>
 8008aae:	4603      	mov	r3, r0
 8008ab0:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8008ab2:	7dfb      	ldrb	r3, [r7, #23]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d114      	bne.n	8008ae2 <f_opendir+0xc6>
					if (obj->sclust) {
 8008ab8:	693b      	ldr	r3, [r7, #16]
 8008aba:	689b      	ldr	r3, [r3, #8]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d00d      	beq.n	8008adc <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8008ac0:	2100      	movs	r1, #0
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	f7fd feae 	bl	8006824 <inc_lock>
 8008ac8:	4602      	mov	r2, r0
 8008aca:	693b      	ldr	r3, [r7, #16]
 8008acc:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8008ace:	693b      	ldr	r3, [r7, #16]
 8008ad0:	691b      	ldr	r3, [r3, #16]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d105      	bne.n	8008ae2 <f_opendir+0xc6>
 8008ad6:	2312      	movs	r3, #18
 8008ad8:	75fb      	strb	r3, [r7, #23]
 8008ada:	e002      	b.n	8008ae2 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8008adc:	693b      	ldr	r3, [r7, #16]
 8008ade:	2200      	movs	r2, #0
 8008ae0:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8008ae2:	7dfb      	ldrb	r3, [r7, #23]
 8008ae4:	2b04      	cmp	r3, #4
 8008ae6:	d101      	bne.n	8008aec <f_opendir+0xd0>
 8008ae8:	2305      	movs	r3, #5
 8008aea:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8008aec:	7dfb      	ldrb	r3, [r7, #23]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d002      	beq.n	8008af8 <f_opendir+0xdc>
 8008af2:	693b      	ldr	r3, [r7, #16]
 8008af4:	2200      	movs	r2, #0
 8008af6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008af8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	3718      	adds	r7, #24
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}

08008b02 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8008b02:	b580      	push	{r7, lr}
 8008b04:	b084      	sub	sp, #16
 8008b06:	af00      	add	r7, sp, #0
 8008b08:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	f107 0208 	add.w	r2, r7, #8
 8008b10:	4611      	mov	r1, r2
 8008b12:	4618      	mov	r0, r3
 8008b14:	f7ff fb02 	bl	800811c <validate>
 8008b18:	4603      	mov	r3, r0
 8008b1a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008b1c:	7bfb      	ldrb	r3, [r7, #15]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d110      	bne.n	8008b44 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	691b      	ldr	r3, [r3, #16]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d006      	beq.n	8008b38 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	691b      	ldr	r3, [r3, #16]
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f7fd ff06 	bl	8006940 <dec_lock>
 8008b34:	4603      	mov	r3, r0
 8008b36:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8008b38:	7bfb      	ldrb	r3, [r7, #15]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d102      	bne.n	8008b44 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2200      	movs	r2, #0
 8008b42:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8008b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	3710      	adds	r7, #16
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}

08008b4e <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8008b4e:	b580      	push	{r7, lr}
 8008b50:	b084      	sub	sp, #16
 8008b52:	af00      	add	r7, sp, #0
 8008b54:	6078      	str	r0, [r7, #4]
 8008b56:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f107 0208 	add.w	r2, r7, #8
 8008b5e:	4611      	mov	r1, r2
 8008b60:	4618      	mov	r0, r3
 8008b62:	f7ff fadb 	bl	800811c <validate>
 8008b66:	4603      	mov	r3, r0
 8008b68:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008b6a:	7bfb      	ldrb	r3, [r7, #15]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d126      	bne.n	8008bbe <f_readdir+0x70>
		if (!fno) {
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d106      	bne.n	8008b84 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8008b76:	2100      	movs	r1, #0
 8008b78:	6878      	ldr	r0, [r7, #4]
 8008b7a:	f7fe fb64 	bl	8007246 <dir_sdi>
 8008b7e:	4603      	mov	r3, r0
 8008b80:	73fb      	strb	r3, [r7, #15]
 8008b82:	e01c      	b.n	8008bbe <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8008b84:	2100      	movs	r1, #0
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f7fe fd42 	bl	8007610 <dir_read>
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8008b90:	7bfb      	ldrb	r3, [r7, #15]
 8008b92:	2b04      	cmp	r3, #4
 8008b94:	d101      	bne.n	8008b9a <f_readdir+0x4c>
 8008b96:	2300      	movs	r3, #0
 8008b98:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8008b9a:	7bfb      	ldrb	r3, [r7, #15]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d10e      	bne.n	8008bbe <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8008ba0:	6839      	ldr	r1, [r7, #0]
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f7fe fe36 	bl	8007814 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8008ba8:	2100      	movs	r1, #0
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f7fe fbd4 	bl	8007358 <dir_next>
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8008bb4:	7bfb      	ldrb	r3, [r7, #15]
 8008bb6:	2b04      	cmp	r3, #4
 8008bb8:	d101      	bne.n	8008bbe <f_readdir+0x70>
 8008bba:	2300      	movs	r3, #0
 8008bbc:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8008bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	3710      	adds	r7, #16
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bd80      	pop	{r7, pc}

08008bc8 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b090      	sub	sp, #64	@ 0x40
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
 8008bd0:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 8008bd2:	f107 010c 	add.w	r1, r7, #12
 8008bd6:	1d3b      	adds	r3, r7, #4
 8008bd8:	2200      	movs	r2, #0
 8008bda:	4618      	mov	r0, r3
 8008bdc:	f7ff f81e 	bl	8007c1c <find_volume>
 8008be0:	4603      	mov	r3, r0
 8008be2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) {
 8008be6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d11f      	bne.n	8008c2e <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008bee:	687a      	ldr	r2, [r7, #4]
 8008bf0:	f107 030c 	add.w	r3, r7, #12
 8008bf4:	4611      	mov	r1, r2
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	f7fe ff00 	bl	80079fc <follow_path>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
		if (res == FR_OK) {				/* Follow completed */
 8008c02:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d111      	bne.n	8008c2e <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8008c0a:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8008c0e:	b25b      	sxtb	r3, r3
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	da03      	bge.n	8008c1c <f_stat+0x54>
				res = FR_INVALID_NAME;
 8008c14:	2306      	movs	r3, #6
 8008c16:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8008c1a:	e008      	b.n	8008c2e <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d005      	beq.n	8008c2e <f_stat+0x66>
 8008c22:	f107 030c 	add.w	r3, r7, #12
 8008c26:	6839      	ldr	r1, [r7, #0]
 8008c28:	4618      	mov	r0, r3
 8008c2a:	f7fe fdf3 	bl	8007814 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 8008c2e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	3740      	adds	r7, #64	@ 0x40
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}

08008c3a <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8008c3a:	b580      	push	{r7, lr}
 8008c3c:	b09e      	sub	sp, #120	@ 0x78
 8008c3e:	af00      	add	r7, sp, #0
 8008c40:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8008c42:	2300      	movs	r3, #0
 8008c44:	673b      	str	r3, [r7, #112]	@ 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8008c46:	f107 010c 	add.w	r1, r7, #12
 8008c4a:	1d3b      	adds	r3, r7, #4
 8008c4c:	2202      	movs	r2, #2
 8008c4e:	4618      	mov	r0, r3
 8008c50:	f7fe ffe4 	bl	8007c1c <find_volume>
 8008c54:	4603      	mov	r3, r0
 8008c56:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	dj.obj.fs = fs;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	643b      	str	r3, [r7, #64]	@ 0x40
	if (res == FR_OK) {
 8008c5e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	f040 808e 	bne.w	8008d84 <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8008c68:	687a      	ldr	r2, [r7, #4]
 8008c6a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8008c6e:	4611      	mov	r1, r2
 8008c70:	4618      	mov	r0, r3
 8008c72:	f7fe fec3 	bl	80079fc <follow_path>
 8008c76:	4603      	mov	r3, r0
 8008c78:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8008c7c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d108      	bne.n	8008c96 <f_unlink+0x5c>
 8008c84:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8008c88:	2102      	movs	r1, #2
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	f7fd fd4c 	bl	8006728 <chk_lock>
 8008c90:	4603      	mov	r3, r0
 8008c92:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8008c96:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d172      	bne.n	8008d84 <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8008c9e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8008ca2:	b25b      	sxtb	r3, r3
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	da03      	bge.n	8008cb0 <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8008ca8:	2306      	movs	r3, #6
 8008caa:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8008cae:	e008      	b.n	8008cc2 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8008cb0:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008cb4:	f003 0301 	and.w	r3, r3, #1
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d002      	beq.n	8008cc2 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8008cbc:	2307      	movs	r3, #7
 8008cbe:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
				}
			}
			if (res == FR_OK) {
 8008cc2:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d134      	bne.n	8008d34 <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008cce:	4611      	mov	r1, r2
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	f7fe fc5e 	bl	8007592 <ld_clust>
 8008cd6:	6738      	str	r0, [r7, #112]	@ 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8008cd8:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008cdc:	f003 0310 	and.w	r3, r3, #16
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d027      	beq.n	8008d34 <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 8008ce8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008cea:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8008cec:	f107 0310 	add.w	r3, r7, #16
 8008cf0:	2100      	movs	r1, #0
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	f7fe faa7 	bl	8007246 <dir_sdi>
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
						if (res == FR_OK) {
 8008cfe:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d116      	bne.n	8008d34 <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 8008d06:	f107 0310 	add.w	r3, r7, #16
 8008d0a:	2100      	movs	r1, #0
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f7fe fc7f 	bl	8007610 <dir_read>
 8008d12:	4603      	mov	r3, r0
 8008d14:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8008d18:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d102      	bne.n	8008d26 <f_unlink+0xec>
 8008d20:	2307      	movs	r3, #7
 8008d22:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8008d26:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8008d2a:	2b04      	cmp	r3, #4
 8008d2c:	d102      	bne.n	8008d34 <f_unlink+0xfa>
 8008d2e:	2300      	movs	r3, #0
 8008d30:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 8008d34:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d123      	bne.n	8008d84 <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8008d3c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8008d40:	4618      	mov	r0, r3
 8008d42:	f7fe fd49 	bl	80077d8 <dir_remove>
 8008d46:	4603      	mov	r3, r0
 8008d48:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8008d4c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d10c      	bne.n	8008d6e <f_unlink+0x134>
 8008d54:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d009      	beq.n	8008d6e <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8008d5a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8008d5e:	2200      	movs	r2, #0
 8008d60:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8008d62:	4618      	mov	r0, r3
 8008d64:	f7fe f93a 	bl	8006fdc <remove_chain>
 8008d68:	4603      	mov	r3, r0
 8008d6a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8008d6e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d106      	bne.n	8008d84 <f_unlink+0x14a>
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	4618      	mov	r0, r3
 8008d7a:	f7fd feb3 	bl	8006ae4 <sync_fs>
 8008d7e:	4603      	mov	r3, r0
 8008d80:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8008d84:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8008d88:	4618      	mov	r0, r3
 8008d8a:	3778      	adds	r7, #120	@ 0x78
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bd80      	pop	{r7, pc}

08008d90 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008d90:	b480      	push	{r7}
 8008d92:	b087      	sub	sp, #28
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	60f8      	str	r0, [r7, #12]
 8008d98:	60b9      	str	r1, [r7, #8]
 8008d9a:	4613      	mov	r3, r2
 8008d9c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008d9e:	2301      	movs	r3, #1
 8008da0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008da2:	2300      	movs	r3, #0
 8008da4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008da6:	4b1f      	ldr	r3, [pc, #124]	@ (8008e24 <FATFS_LinkDriverEx+0x94>)
 8008da8:	7a5b      	ldrb	r3, [r3, #9]
 8008daa:	b2db      	uxtb	r3, r3
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d131      	bne.n	8008e14 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008db0:	4b1c      	ldr	r3, [pc, #112]	@ (8008e24 <FATFS_LinkDriverEx+0x94>)
 8008db2:	7a5b      	ldrb	r3, [r3, #9]
 8008db4:	b2db      	uxtb	r3, r3
 8008db6:	461a      	mov	r2, r3
 8008db8:	4b1a      	ldr	r3, [pc, #104]	@ (8008e24 <FATFS_LinkDriverEx+0x94>)
 8008dba:	2100      	movs	r1, #0
 8008dbc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008dbe:	4b19      	ldr	r3, [pc, #100]	@ (8008e24 <FATFS_LinkDriverEx+0x94>)
 8008dc0:	7a5b      	ldrb	r3, [r3, #9]
 8008dc2:	b2db      	uxtb	r3, r3
 8008dc4:	4a17      	ldr	r2, [pc, #92]	@ (8008e24 <FATFS_LinkDriverEx+0x94>)
 8008dc6:	009b      	lsls	r3, r3, #2
 8008dc8:	4413      	add	r3, r2
 8008dca:	68fa      	ldr	r2, [r7, #12]
 8008dcc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008dce:	4b15      	ldr	r3, [pc, #84]	@ (8008e24 <FATFS_LinkDriverEx+0x94>)
 8008dd0:	7a5b      	ldrb	r3, [r3, #9]
 8008dd2:	b2db      	uxtb	r3, r3
 8008dd4:	461a      	mov	r2, r3
 8008dd6:	4b13      	ldr	r3, [pc, #76]	@ (8008e24 <FATFS_LinkDriverEx+0x94>)
 8008dd8:	4413      	add	r3, r2
 8008dda:	79fa      	ldrb	r2, [r7, #7]
 8008ddc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008dde:	4b11      	ldr	r3, [pc, #68]	@ (8008e24 <FATFS_LinkDriverEx+0x94>)
 8008de0:	7a5b      	ldrb	r3, [r3, #9]
 8008de2:	b2db      	uxtb	r3, r3
 8008de4:	1c5a      	adds	r2, r3, #1
 8008de6:	b2d1      	uxtb	r1, r2
 8008de8:	4a0e      	ldr	r2, [pc, #56]	@ (8008e24 <FATFS_LinkDriverEx+0x94>)
 8008dea:	7251      	strb	r1, [r2, #9]
 8008dec:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008dee:	7dbb      	ldrb	r3, [r7, #22]
 8008df0:	3330      	adds	r3, #48	@ 0x30
 8008df2:	b2da      	uxtb	r2, r3
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	3301      	adds	r3, #1
 8008dfc:	223a      	movs	r2, #58	@ 0x3a
 8008dfe:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008e00:	68bb      	ldr	r3, [r7, #8]
 8008e02:	3302      	adds	r3, #2
 8008e04:	222f      	movs	r2, #47	@ 0x2f
 8008e06:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008e08:	68bb      	ldr	r3, [r7, #8]
 8008e0a:	3303      	adds	r3, #3
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008e10:	2300      	movs	r3, #0
 8008e12:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008e14:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e16:	4618      	mov	r0, r3
 8008e18:	371c      	adds	r7, #28
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e20:	4770      	bx	lr
 8008e22:	bf00      	nop
 8008e24:	20002330 	.word	0x20002330

08008e28 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b082      	sub	sp, #8
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
 8008e30:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008e32:	2200      	movs	r2, #0
 8008e34:	6839      	ldr	r1, [r7, #0]
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	f7ff ffaa 	bl	8008d90 <FATFS_LinkDriverEx>
 8008e3c:	4603      	mov	r3, r0
}
 8008e3e:	4618      	mov	r0, r3
 8008e40:	3708      	adds	r7, #8
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}
	...

08008e48 <malloc>:
 8008e48:	4b02      	ldr	r3, [pc, #8]	@ (8008e54 <malloc+0xc>)
 8008e4a:	4601      	mov	r1, r0
 8008e4c:	6818      	ldr	r0, [r3, #0]
 8008e4e:	f000 b82d 	b.w	8008eac <_malloc_r>
 8008e52:	bf00      	nop
 8008e54:	2000000c 	.word	0x2000000c

08008e58 <free>:
 8008e58:	4b02      	ldr	r3, [pc, #8]	@ (8008e64 <free+0xc>)
 8008e5a:	4601      	mov	r1, r0
 8008e5c:	6818      	ldr	r0, [r3, #0]
 8008e5e:	f000 b915 	b.w	800908c <_free_r>
 8008e62:	bf00      	nop
 8008e64:	2000000c 	.word	0x2000000c

08008e68 <sbrk_aligned>:
 8008e68:	b570      	push	{r4, r5, r6, lr}
 8008e6a:	4e0f      	ldr	r6, [pc, #60]	@ (8008ea8 <sbrk_aligned+0x40>)
 8008e6c:	460c      	mov	r4, r1
 8008e6e:	6831      	ldr	r1, [r6, #0]
 8008e70:	4605      	mov	r5, r0
 8008e72:	b911      	cbnz	r1, 8008e7a <sbrk_aligned+0x12>
 8008e74:	f000 f8ce 	bl	8009014 <_sbrk_r>
 8008e78:	6030      	str	r0, [r6, #0]
 8008e7a:	4621      	mov	r1, r4
 8008e7c:	4628      	mov	r0, r5
 8008e7e:	f000 f8c9 	bl	8009014 <_sbrk_r>
 8008e82:	1c43      	adds	r3, r0, #1
 8008e84:	d103      	bne.n	8008e8e <sbrk_aligned+0x26>
 8008e86:	f04f 34ff 	mov.w	r4, #4294967295
 8008e8a:	4620      	mov	r0, r4
 8008e8c:	bd70      	pop	{r4, r5, r6, pc}
 8008e8e:	1cc4      	adds	r4, r0, #3
 8008e90:	f024 0403 	bic.w	r4, r4, #3
 8008e94:	42a0      	cmp	r0, r4
 8008e96:	d0f8      	beq.n	8008e8a <sbrk_aligned+0x22>
 8008e98:	1a21      	subs	r1, r4, r0
 8008e9a:	4628      	mov	r0, r5
 8008e9c:	f000 f8ba 	bl	8009014 <_sbrk_r>
 8008ea0:	3001      	adds	r0, #1
 8008ea2:	d1f2      	bne.n	8008e8a <sbrk_aligned+0x22>
 8008ea4:	e7ef      	b.n	8008e86 <sbrk_aligned+0x1e>
 8008ea6:	bf00      	nop
 8008ea8:	2000233c 	.word	0x2000233c

08008eac <_malloc_r>:
 8008eac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008eb0:	1ccd      	adds	r5, r1, #3
 8008eb2:	f025 0503 	bic.w	r5, r5, #3
 8008eb6:	3508      	adds	r5, #8
 8008eb8:	2d0c      	cmp	r5, #12
 8008eba:	bf38      	it	cc
 8008ebc:	250c      	movcc	r5, #12
 8008ebe:	2d00      	cmp	r5, #0
 8008ec0:	4606      	mov	r6, r0
 8008ec2:	db01      	blt.n	8008ec8 <_malloc_r+0x1c>
 8008ec4:	42a9      	cmp	r1, r5
 8008ec6:	d904      	bls.n	8008ed2 <_malloc_r+0x26>
 8008ec8:	230c      	movs	r3, #12
 8008eca:	6033      	str	r3, [r6, #0]
 8008ecc:	2000      	movs	r0, #0
 8008ece:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ed2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008fa8 <_malloc_r+0xfc>
 8008ed6:	f000 f869 	bl	8008fac <__malloc_lock>
 8008eda:	f8d8 3000 	ldr.w	r3, [r8]
 8008ede:	461c      	mov	r4, r3
 8008ee0:	bb44      	cbnz	r4, 8008f34 <_malloc_r+0x88>
 8008ee2:	4629      	mov	r1, r5
 8008ee4:	4630      	mov	r0, r6
 8008ee6:	f7ff ffbf 	bl	8008e68 <sbrk_aligned>
 8008eea:	1c43      	adds	r3, r0, #1
 8008eec:	4604      	mov	r4, r0
 8008eee:	d158      	bne.n	8008fa2 <_malloc_r+0xf6>
 8008ef0:	f8d8 4000 	ldr.w	r4, [r8]
 8008ef4:	4627      	mov	r7, r4
 8008ef6:	2f00      	cmp	r7, #0
 8008ef8:	d143      	bne.n	8008f82 <_malloc_r+0xd6>
 8008efa:	2c00      	cmp	r4, #0
 8008efc:	d04b      	beq.n	8008f96 <_malloc_r+0xea>
 8008efe:	6823      	ldr	r3, [r4, #0]
 8008f00:	4639      	mov	r1, r7
 8008f02:	4630      	mov	r0, r6
 8008f04:	eb04 0903 	add.w	r9, r4, r3
 8008f08:	f000 f884 	bl	8009014 <_sbrk_r>
 8008f0c:	4581      	cmp	r9, r0
 8008f0e:	d142      	bne.n	8008f96 <_malloc_r+0xea>
 8008f10:	6821      	ldr	r1, [r4, #0]
 8008f12:	1a6d      	subs	r5, r5, r1
 8008f14:	4629      	mov	r1, r5
 8008f16:	4630      	mov	r0, r6
 8008f18:	f7ff ffa6 	bl	8008e68 <sbrk_aligned>
 8008f1c:	3001      	adds	r0, #1
 8008f1e:	d03a      	beq.n	8008f96 <_malloc_r+0xea>
 8008f20:	6823      	ldr	r3, [r4, #0]
 8008f22:	442b      	add	r3, r5
 8008f24:	6023      	str	r3, [r4, #0]
 8008f26:	f8d8 3000 	ldr.w	r3, [r8]
 8008f2a:	685a      	ldr	r2, [r3, #4]
 8008f2c:	bb62      	cbnz	r2, 8008f88 <_malloc_r+0xdc>
 8008f2e:	f8c8 7000 	str.w	r7, [r8]
 8008f32:	e00f      	b.n	8008f54 <_malloc_r+0xa8>
 8008f34:	6822      	ldr	r2, [r4, #0]
 8008f36:	1b52      	subs	r2, r2, r5
 8008f38:	d420      	bmi.n	8008f7c <_malloc_r+0xd0>
 8008f3a:	2a0b      	cmp	r2, #11
 8008f3c:	d917      	bls.n	8008f6e <_malloc_r+0xc2>
 8008f3e:	1961      	adds	r1, r4, r5
 8008f40:	42a3      	cmp	r3, r4
 8008f42:	6025      	str	r5, [r4, #0]
 8008f44:	bf18      	it	ne
 8008f46:	6059      	strne	r1, [r3, #4]
 8008f48:	6863      	ldr	r3, [r4, #4]
 8008f4a:	bf08      	it	eq
 8008f4c:	f8c8 1000 	streq.w	r1, [r8]
 8008f50:	5162      	str	r2, [r4, r5]
 8008f52:	604b      	str	r3, [r1, #4]
 8008f54:	4630      	mov	r0, r6
 8008f56:	f000 f82f 	bl	8008fb8 <__malloc_unlock>
 8008f5a:	f104 000b 	add.w	r0, r4, #11
 8008f5e:	1d23      	adds	r3, r4, #4
 8008f60:	f020 0007 	bic.w	r0, r0, #7
 8008f64:	1ac2      	subs	r2, r0, r3
 8008f66:	bf1c      	itt	ne
 8008f68:	1a1b      	subne	r3, r3, r0
 8008f6a:	50a3      	strne	r3, [r4, r2]
 8008f6c:	e7af      	b.n	8008ece <_malloc_r+0x22>
 8008f6e:	6862      	ldr	r2, [r4, #4]
 8008f70:	42a3      	cmp	r3, r4
 8008f72:	bf0c      	ite	eq
 8008f74:	f8c8 2000 	streq.w	r2, [r8]
 8008f78:	605a      	strne	r2, [r3, #4]
 8008f7a:	e7eb      	b.n	8008f54 <_malloc_r+0xa8>
 8008f7c:	4623      	mov	r3, r4
 8008f7e:	6864      	ldr	r4, [r4, #4]
 8008f80:	e7ae      	b.n	8008ee0 <_malloc_r+0x34>
 8008f82:	463c      	mov	r4, r7
 8008f84:	687f      	ldr	r7, [r7, #4]
 8008f86:	e7b6      	b.n	8008ef6 <_malloc_r+0x4a>
 8008f88:	461a      	mov	r2, r3
 8008f8a:	685b      	ldr	r3, [r3, #4]
 8008f8c:	42a3      	cmp	r3, r4
 8008f8e:	d1fb      	bne.n	8008f88 <_malloc_r+0xdc>
 8008f90:	2300      	movs	r3, #0
 8008f92:	6053      	str	r3, [r2, #4]
 8008f94:	e7de      	b.n	8008f54 <_malloc_r+0xa8>
 8008f96:	230c      	movs	r3, #12
 8008f98:	6033      	str	r3, [r6, #0]
 8008f9a:	4630      	mov	r0, r6
 8008f9c:	f000 f80c 	bl	8008fb8 <__malloc_unlock>
 8008fa0:	e794      	b.n	8008ecc <_malloc_r+0x20>
 8008fa2:	6005      	str	r5, [r0, #0]
 8008fa4:	e7d6      	b.n	8008f54 <_malloc_r+0xa8>
 8008fa6:	bf00      	nop
 8008fa8:	20002340 	.word	0x20002340

08008fac <__malloc_lock>:
 8008fac:	4801      	ldr	r0, [pc, #4]	@ (8008fb4 <__malloc_lock+0x8>)
 8008fae:	f000 b86b 	b.w	8009088 <__retarget_lock_acquire_recursive>
 8008fb2:	bf00      	nop
 8008fb4:	20002480 	.word	0x20002480

08008fb8 <__malloc_unlock>:
 8008fb8:	4801      	ldr	r0, [pc, #4]	@ (8008fc0 <__malloc_unlock+0x8>)
 8008fba:	f000 b866 	b.w	800908a <__retarget_lock_release_recursive>
 8008fbe:	bf00      	nop
 8008fc0:	20002480 	.word	0x20002480

08008fc4 <siprintf>:
 8008fc4:	b40e      	push	{r1, r2, r3}
 8008fc6:	b500      	push	{lr}
 8008fc8:	b09c      	sub	sp, #112	@ 0x70
 8008fca:	ab1d      	add	r3, sp, #116	@ 0x74
 8008fcc:	9002      	str	r0, [sp, #8]
 8008fce:	9006      	str	r0, [sp, #24]
 8008fd0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008fd4:	4809      	ldr	r0, [pc, #36]	@ (8008ffc <siprintf+0x38>)
 8008fd6:	9107      	str	r1, [sp, #28]
 8008fd8:	9104      	str	r1, [sp, #16]
 8008fda:	4909      	ldr	r1, [pc, #36]	@ (8009000 <siprintf+0x3c>)
 8008fdc:	f853 2b04 	ldr.w	r2, [r3], #4
 8008fe0:	9105      	str	r1, [sp, #20]
 8008fe2:	6800      	ldr	r0, [r0, #0]
 8008fe4:	9301      	str	r3, [sp, #4]
 8008fe6:	a902      	add	r1, sp, #8
 8008fe8:	f000 f8f6 	bl	80091d8 <_svfiprintf_r>
 8008fec:	9b02      	ldr	r3, [sp, #8]
 8008fee:	2200      	movs	r2, #0
 8008ff0:	701a      	strb	r2, [r3, #0]
 8008ff2:	b01c      	add	sp, #112	@ 0x70
 8008ff4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ff8:	b003      	add	sp, #12
 8008ffa:	4770      	bx	lr
 8008ffc:	2000000c 	.word	0x2000000c
 8009000:	ffff0208 	.word	0xffff0208

08009004 <memset>:
 8009004:	4402      	add	r2, r0
 8009006:	4603      	mov	r3, r0
 8009008:	4293      	cmp	r3, r2
 800900a:	d100      	bne.n	800900e <memset+0xa>
 800900c:	4770      	bx	lr
 800900e:	f803 1b01 	strb.w	r1, [r3], #1
 8009012:	e7f9      	b.n	8009008 <memset+0x4>

08009014 <_sbrk_r>:
 8009014:	b538      	push	{r3, r4, r5, lr}
 8009016:	4d06      	ldr	r5, [pc, #24]	@ (8009030 <_sbrk_r+0x1c>)
 8009018:	2300      	movs	r3, #0
 800901a:	4604      	mov	r4, r0
 800901c:	4608      	mov	r0, r1
 800901e:	602b      	str	r3, [r5, #0]
 8009020:	f7f8 f85a 	bl	80010d8 <_sbrk>
 8009024:	1c43      	adds	r3, r0, #1
 8009026:	d102      	bne.n	800902e <_sbrk_r+0x1a>
 8009028:	682b      	ldr	r3, [r5, #0]
 800902a:	b103      	cbz	r3, 800902e <_sbrk_r+0x1a>
 800902c:	6023      	str	r3, [r4, #0]
 800902e:	bd38      	pop	{r3, r4, r5, pc}
 8009030:	2000247c 	.word	0x2000247c

08009034 <__errno>:
 8009034:	4b01      	ldr	r3, [pc, #4]	@ (800903c <__errno+0x8>)
 8009036:	6818      	ldr	r0, [r3, #0]
 8009038:	4770      	bx	lr
 800903a:	bf00      	nop
 800903c:	2000000c 	.word	0x2000000c

08009040 <__libc_init_array>:
 8009040:	b570      	push	{r4, r5, r6, lr}
 8009042:	4d0d      	ldr	r5, [pc, #52]	@ (8009078 <__libc_init_array+0x38>)
 8009044:	4c0d      	ldr	r4, [pc, #52]	@ (800907c <__libc_init_array+0x3c>)
 8009046:	1b64      	subs	r4, r4, r5
 8009048:	10a4      	asrs	r4, r4, #2
 800904a:	2600      	movs	r6, #0
 800904c:	42a6      	cmp	r6, r4
 800904e:	d109      	bne.n	8009064 <__libc_init_array+0x24>
 8009050:	4d0b      	ldr	r5, [pc, #44]	@ (8009080 <__libc_init_array+0x40>)
 8009052:	4c0c      	ldr	r4, [pc, #48]	@ (8009084 <__libc_init_array+0x44>)
 8009054:	f000 fba8 	bl	80097a8 <_init>
 8009058:	1b64      	subs	r4, r4, r5
 800905a:	10a4      	asrs	r4, r4, #2
 800905c:	2600      	movs	r6, #0
 800905e:	42a6      	cmp	r6, r4
 8009060:	d105      	bne.n	800906e <__libc_init_array+0x2e>
 8009062:	bd70      	pop	{r4, r5, r6, pc}
 8009064:	f855 3b04 	ldr.w	r3, [r5], #4
 8009068:	4798      	blx	r3
 800906a:	3601      	adds	r6, #1
 800906c:	e7ee      	b.n	800904c <__libc_init_array+0xc>
 800906e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009072:	4798      	blx	r3
 8009074:	3601      	adds	r6, #1
 8009076:	e7f2      	b.n	800905e <__libc_init_array+0x1e>
 8009078:	08009d34 	.word	0x08009d34
 800907c:	08009d34 	.word	0x08009d34
 8009080:	08009d34 	.word	0x08009d34
 8009084:	08009d38 	.word	0x08009d38

08009088 <__retarget_lock_acquire_recursive>:
 8009088:	4770      	bx	lr

0800908a <__retarget_lock_release_recursive>:
 800908a:	4770      	bx	lr

0800908c <_free_r>:
 800908c:	b538      	push	{r3, r4, r5, lr}
 800908e:	4605      	mov	r5, r0
 8009090:	2900      	cmp	r1, #0
 8009092:	d041      	beq.n	8009118 <_free_r+0x8c>
 8009094:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009098:	1f0c      	subs	r4, r1, #4
 800909a:	2b00      	cmp	r3, #0
 800909c:	bfb8      	it	lt
 800909e:	18e4      	addlt	r4, r4, r3
 80090a0:	f7ff ff84 	bl	8008fac <__malloc_lock>
 80090a4:	4a1d      	ldr	r2, [pc, #116]	@ (800911c <_free_r+0x90>)
 80090a6:	6813      	ldr	r3, [r2, #0]
 80090a8:	b933      	cbnz	r3, 80090b8 <_free_r+0x2c>
 80090aa:	6063      	str	r3, [r4, #4]
 80090ac:	6014      	str	r4, [r2, #0]
 80090ae:	4628      	mov	r0, r5
 80090b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80090b4:	f7ff bf80 	b.w	8008fb8 <__malloc_unlock>
 80090b8:	42a3      	cmp	r3, r4
 80090ba:	d908      	bls.n	80090ce <_free_r+0x42>
 80090bc:	6820      	ldr	r0, [r4, #0]
 80090be:	1821      	adds	r1, r4, r0
 80090c0:	428b      	cmp	r3, r1
 80090c2:	bf01      	itttt	eq
 80090c4:	6819      	ldreq	r1, [r3, #0]
 80090c6:	685b      	ldreq	r3, [r3, #4]
 80090c8:	1809      	addeq	r1, r1, r0
 80090ca:	6021      	streq	r1, [r4, #0]
 80090cc:	e7ed      	b.n	80090aa <_free_r+0x1e>
 80090ce:	461a      	mov	r2, r3
 80090d0:	685b      	ldr	r3, [r3, #4]
 80090d2:	b10b      	cbz	r3, 80090d8 <_free_r+0x4c>
 80090d4:	42a3      	cmp	r3, r4
 80090d6:	d9fa      	bls.n	80090ce <_free_r+0x42>
 80090d8:	6811      	ldr	r1, [r2, #0]
 80090da:	1850      	adds	r0, r2, r1
 80090dc:	42a0      	cmp	r0, r4
 80090de:	d10b      	bne.n	80090f8 <_free_r+0x6c>
 80090e0:	6820      	ldr	r0, [r4, #0]
 80090e2:	4401      	add	r1, r0
 80090e4:	1850      	adds	r0, r2, r1
 80090e6:	4283      	cmp	r3, r0
 80090e8:	6011      	str	r1, [r2, #0]
 80090ea:	d1e0      	bne.n	80090ae <_free_r+0x22>
 80090ec:	6818      	ldr	r0, [r3, #0]
 80090ee:	685b      	ldr	r3, [r3, #4]
 80090f0:	6053      	str	r3, [r2, #4]
 80090f2:	4408      	add	r0, r1
 80090f4:	6010      	str	r0, [r2, #0]
 80090f6:	e7da      	b.n	80090ae <_free_r+0x22>
 80090f8:	d902      	bls.n	8009100 <_free_r+0x74>
 80090fa:	230c      	movs	r3, #12
 80090fc:	602b      	str	r3, [r5, #0]
 80090fe:	e7d6      	b.n	80090ae <_free_r+0x22>
 8009100:	6820      	ldr	r0, [r4, #0]
 8009102:	1821      	adds	r1, r4, r0
 8009104:	428b      	cmp	r3, r1
 8009106:	bf04      	itt	eq
 8009108:	6819      	ldreq	r1, [r3, #0]
 800910a:	685b      	ldreq	r3, [r3, #4]
 800910c:	6063      	str	r3, [r4, #4]
 800910e:	bf04      	itt	eq
 8009110:	1809      	addeq	r1, r1, r0
 8009112:	6021      	streq	r1, [r4, #0]
 8009114:	6054      	str	r4, [r2, #4]
 8009116:	e7ca      	b.n	80090ae <_free_r+0x22>
 8009118:	bd38      	pop	{r3, r4, r5, pc}
 800911a:	bf00      	nop
 800911c:	20002340 	.word	0x20002340

08009120 <__ssputs_r>:
 8009120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009124:	688e      	ldr	r6, [r1, #8]
 8009126:	461f      	mov	r7, r3
 8009128:	42be      	cmp	r6, r7
 800912a:	680b      	ldr	r3, [r1, #0]
 800912c:	4682      	mov	sl, r0
 800912e:	460c      	mov	r4, r1
 8009130:	4690      	mov	r8, r2
 8009132:	d82d      	bhi.n	8009190 <__ssputs_r+0x70>
 8009134:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009138:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800913c:	d026      	beq.n	800918c <__ssputs_r+0x6c>
 800913e:	6965      	ldr	r5, [r4, #20]
 8009140:	6909      	ldr	r1, [r1, #16]
 8009142:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009146:	eba3 0901 	sub.w	r9, r3, r1
 800914a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800914e:	1c7b      	adds	r3, r7, #1
 8009150:	444b      	add	r3, r9
 8009152:	106d      	asrs	r5, r5, #1
 8009154:	429d      	cmp	r5, r3
 8009156:	bf38      	it	cc
 8009158:	461d      	movcc	r5, r3
 800915a:	0553      	lsls	r3, r2, #21
 800915c:	d527      	bpl.n	80091ae <__ssputs_r+0x8e>
 800915e:	4629      	mov	r1, r5
 8009160:	f7ff fea4 	bl	8008eac <_malloc_r>
 8009164:	4606      	mov	r6, r0
 8009166:	b360      	cbz	r0, 80091c2 <__ssputs_r+0xa2>
 8009168:	6921      	ldr	r1, [r4, #16]
 800916a:	464a      	mov	r2, r9
 800916c:	f000 fad8 	bl	8009720 <memcpy>
 8009170:	89a3      	ldrh	r3, [r4, #12]
 8009172:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009176:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800917a:	81a3      	strh	r3, [r4, #12]
 800917c:	6126      	str	r6, [r4, #16]
 800917e:	6165      	str	r5, [r4, #20]
 8009180:	444e      	add	r6, r9
 8009182:	eba5 0509 	sub.w	r5, r5, r9
 8009186:	6026      	str	r6, [r4, #0]
 8009188:	60a5      	str	r5, [r4, #8]
 800918a:	463e      	mov	r6, r7
 800918c:	42be      	cmp	r6, r7
 800918e:	d900      	bls.n	8009192 <__ssputs_r+0x72>
 8009190:	463e      	mov	r6, r7
 8009192:	6820      	ldr	r0, [r4, #0]
 8009194:	4632      	mov	r2, r6
 8009196:	4641      	mov	r1, r8
 8009198:	f000 faa8 	bl	80096ec <memmove>
 800919c:	68a3      	ldr	r3, [r4, #8]
 800919e:	1b9b      	subs	r3, r3, r6
 80091a0:	60a3      	str	r3, [r4, #8]
 80091a2:	6823      	ldr	r3, [r4, #0]
 80091a4:	4433      	add	r3, r6
 80091a6:	6023      	str	r3, [r4, #0]
 80091a8:	2000      	movs	r0, #0
 80091aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091ae:	462a      	mov	r2, r5
 80091b0:	f000 fac4 	bl	800973c <_realloc_r>
 80091b4:	4606      	mov	r6, r0
 80091b6:	2800      	cmp	r0, #0
 80091b8:	d1e0      	bne.n	800917c <__ssputs_r+0x5c>
 80091ba:	6921      	ldr	r1, [r4, #16]
 80091bc:	4650      	mov	r0, sl
 80091be:	f7ff ff65 	bl	800908c <_free_r>
 80091c2:	230c      	movs	r3, #12
 80091c4:	f8ca 3000 	str.w	r3, [sl]
 80091c8:	89a3      	ldrh	r3, [r4, #12]
 80091ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80091ce:	81a3      	strh	r3, [r4, #12]
 80091d0:	f04f 30ff 	mov.w	r0, #4294967295
 80091d4:	e7e9      	b.n	80091aa <__ssputs_r+0x8a>
	...

080091d8 <_svfiprintf_r>:
 80091d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091dc:	4698      	mov	r8, r3
 80091de:	898b      	ldrh	r3, [r1, #12]
 80091e0:	061b      	lsls	r3, r3, #24
 80091e2:	b09d      	sub	sp, #116	@ 0x74
 80091e4:	4607      	mov	r7, r0
 80091e6:	460d      	mov	r5, r1
 80091e8:	4614      	mov	r4, r2
 80091ea:	d510      	bpl.n	800920e <_svfiprintf_r+0x36>
 80091ec:	690b      	ldr	r3, [r1, #16]
 80091ee:	b973      	cbnz	r3, 800920e <_svfiprintf_r+0x36>
 80091f0:	2140      	movs	r1, #64	@ 0x40
 80091f2:	f7ff fe5b 	bl	8008eac <_malloc_r>
 80091f6:	6028      	str	r0, [r5, #0]
 80091f8:	6128      	str	r0, [r5, #16]
 80091fa:	b930      	cbnz	r0, 800920a <_svfiprintf_r+0x32>
 80091fc:	230c      	movs	r3, #12
 80091fe:	603b      	str	r3, [r7, #0]
 8009200:	f04f 30ff 	mov.w	r0, #4294967295
 8009204:	b01d      	add	sp, #116	@ 0x74
 8009206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800920a:	2340      	movs	r3, #64	@ 0x40
 800920c:	616b      	str	r3, [r5, #20]
 800920e:	2300      	movs	r3, #0
 8009210:	9309      	str	r3, [sp, #36]	@ 0x24
 8009212:	2320      	movs	r3, #32
 8009214:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009218:	f8cd 800c 	str.w	r8, [sp, #12]
 800921c:	2330      	movs	r3, #48	@ 0x30
 800921e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80093bc <_svfiprintf_r+0x1e4>
 8009222:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009226:	f04f 0901 	mov.w	r9, #1
 800922a:	4623      	mov	r3, r4
 800922c:	469a      	mov	sl, r3
 800922e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009232:	b10a      	cbz	r2, 8009238 <_svfiprintf_r+0x60>
 8009234:	2a25      	cmp	r2, #37	@ 0x25
 8009236:	d1f9      	bne.n	800922c <_svfiprintf_r+0x54>
 8009238:	ebba 0b04 	subs.w	fp, sl, r4
 800923c:	d00b      	beq.n	8009256 <_svfiprintf_r+0x7e>
 800923e:	465b      	mov	r3, fp
 8009240:	4622      	mov	r2, r4
 8009242:	4629      	mov	r1, r5
 8009244:	4638      	mov	r0, r7
 8009246:	f7ff ff6b 	bl	8009120 <__ssputs_r>
 800924a:	3001      	adds	r0, #1
 800924c:	f000 80a7 	beq.w	800939e <_svfiprintf_r+0x1c6>
 8009250:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009252:	445a      	add	r2, fp
 8009254:	9209      	str	r2, [sp, #36]	@ 0x24
 8009256:	f89a 3000 	ldrb.w	r3, [sl]
 800925a:	2b00      	cmp	r3, #0
 800925c:	f000 809f 	beq.w	800939e <_svfiprintf_r+0x1c6>
 8009260:	2300      	movs	r3, #0
 8009262:	f04f 32ff 	mov.w	r2, #4294967295
 8009266:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800926a:	f10a 0a01 	add.w	sl, sl, #1
 800926e:	9304      	str	r3, [sp, #16]
 8009270:	9307      	str	r3, [sp, #28]
 8009272:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009276:	931a      	str	r3, [sp, #104]	@ 0x68
 8009278:	4654      	mov	r4, sl
 800927a:	2205      	movs	r2, #5
 800927c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009280:	484e      	ldr	r0, [pc, #312]	@ (80093bc <_svfiprintf_r+0x1e4>)
 8009282:	f7f6 ffdd 	bl	8000240 <memchr>
 8009286:	9a04      	ldr	r2, [sp, #16]
 8009288:	b9d8      	cbnz	r0, 80092c2 <_svfiprintf_r+0xea>
 800928a:	06d0      	lsls	r0, r2, #27
 800928c:	bf44      	itt	mi
 800928e:	2320      	movmi	r3, #32
 8009290:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009294:	0711      	lsls	r1, r2, #28
 8009296:	bf44      	itt	mi
 8009298:	232b      	movmi	r3, #43	@ 0x2b
 800929a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800929e:	f89a 3000 	ldrb.w	r3, [sl]
 80092a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80092a4:	d015      	beq.n	80092d2 <_svfiprintf_r+0xfa>
 80092a6:	9a07      	ldr	r2, [sp, #28]
 80092a8:	4654      	mov	r4, sl
 80092aa:	2000      	movs	r0, #0
 80092ac:	f04f 0c0a 	mov.w	ip, #10
 80092b0:	4621      	mov	r1, r4
 80092b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80092b6:	3b30      	subs	r3, #48	@ 0x30
 80092b8:	2b09      	cmp	r3, #9
 80092ba:	d94b      	bls.n	8009354 <_svfiprintf_r+0x17c>
 80092bc:	b1b0      	cbz	r0, 80092ec <_svfiprintf_r+0x114>
 80092be:	9207      	str	r2, [sp, #28]
 80092c0:	e014      	b.n	80092ec <_svfiprintf_r+0x114>
 80092c2:	eba0 0308 	sub.w	r3, r0, r8
 80092c6:	fa09 f303 	lsl.w	r3, r9, r3
 80092ca:	4313      	orrs	r3, r2
 80092cc:	9304      	str	r3, [sp, #16]
 80092ce:	46a2      	mov	sl, r4
 80092d0:	e7d2      	b.n	8009278 <_svfiprintf_r+0xa0>
 80092d2:	9b03      	ldr	r3, [sp, #12]
 80092d4:	1d19      	adds	r1, r3, #4
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	9103      	str	r1, [sp, #12]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	bfbb      	ittet	lt
 80092de:	425b      	neglt	r3, r3
 80092e0:	f042 0202 	orrlt.w	r2, r2, #2
 80092e4:	9307      	strge	r3, [sp, #28]
 80092e6:	9307      	strlt	r3, [sp, #28]
 80092e8:	bfb8      	it	lt
 80092ea:	9204      	strlt	r2, [sp, #16]
 80092ec:	7823      	ldrb	r3, [r4, #0]
 80092ee:	2b2e      	cmp	r3, #46	@ 0x2e
 80092f0:	d10a      	bne.n	8009308 <_svfiprintf_r+0x130>
 80092f2:	7863      	ldrb	r3, [r4, #1]
 80092f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80092f6:	d132      	bne.n	800935e <_svfiprintf_r+0x186>
 80092f8:	9b03      	ldr	r3, [sp, #12]
 80092fa:	1d1a      	adds	r2, r3, #4
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	9203      	str	r2, [sp, #12]
 8009300:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009304:	3402      	adds	r4, #2
 8009306:	9305      	str	r3, [sp, #20]
 8009308:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80093cc <_svfiprintf_r+0x1f4>
 800930c:	7821      	ldrb	r1, [r4, #0]
 800930e:	2203      	movs	r2, #3
 8009310:	4650      	mov	r0, sl
 8009312:	f7f6 ff95 	bl	8000240 <memchr>
 8009316:	b138      	cbz	r0, 8009328 <_svfiprintf_r+0x150>
 8009318:	9b04      	ldr	r3, [sp, #16]
 800931a:	eba0 000a 	sub.w	r0, r0, sl
 800931e:	2240      	movs	r2, #64	@ 0x40
 8009320:	4082      	lsls	r2, r0
 8009322:	4313      	orrs	r3, r2
 8009324:	3401      	adds	r4, #1
 8009326:	9304      	str	r3, [sp, #16]
 8009328:	f814 1b01 	ldrb.w	r1, [r4], #1
 800932c:	4824      	ldr	r0, [pc, #144]	@ (80093c0 <_svfiprintf_r+0x1e8>)
 800932e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009332:	2206      	movs	r2, #6
 8009334:	f7f6 ff84 	bl	8000240 <memchr>
 8009338:	2800      	cmp	r0, #0
 800933a:	d036      	beq.n	80093aa <_svfiprintf_r+0x1d2>
 800933c:	4b21      	ldr	r3, [pc, #132]	@ (80093c4 <_svfiprintf_r+0x1ec>)
 800933e:	bb1b      	cbnz	r3, 8009388 <_svfiprintf_r+0x1b0>
 8009340:	9b03      	ldr	r3, [sp, #12]
 8009342:	3307      	adds	r3, #7
 8009344:	f023 0307 	bic.w	r3, r3, #7
 8009348:	3308      	adds	r3, #8
 800934a:	9303      	str	r3, [sp, #12]
 800934c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800934e:	4433      	add	r3, r6
 8009350:	9309      	str	r3, [sp, #36]	@ 0x24
 8009352:	e76a      	b.n	800922a <_svfiprintf_r+0x52>
 8009354:	fb0c 3202 	mla	r2, ip, r2, r3
 8009358:	460c      	mov	r4, r1
 800935a:	2001      	movs	r0, #1
 800935c:	e7a8      	b.n	80092b0 <_svfiprintf_r+0xd8>
 800935e:	2300      	movs	r3, #0
 8009360:	3401      	adds	r4, #1
 8009362:	9305      	str	r3, [sp, #20]
 8009364:	4619      	mov	r1, r3
 8009366:	f04f 0c0a 	mov.w	ip, #10
 800936a:	4620      	mov	r0, r4
 800936c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009370:	3a30      	subs	r2, #48	@ 0x30
 8009372:	2a09      	cmp	r2, #9
 8009374:	d903      	bls.n	800937e <_svfiprintf_r+0x1a6>
 8009376:	2b00      	cmp	r3, #0
 8009378:	d0c6      	beq.n	8009308 <_svfiprintf_r+0x130>
 800937a:	9105      	str	r1, [sp, #20]
 800937c:	e7c4      	b.n	8009308 <_svfiprintf_r+0x130>
 800937e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009382:	4604      	mov	r4, r0
 8009384:	2301      	movs	r3, #1
 8009386:	e7f0      	b.n	800936a <_svfiprintf_r+0x192>
 8009388:	ab03      	add	r3, sp, #12
 800938a:	9300      	str	r3, [sp, #0]
 800938c:	462a      	mov	r2, r5
 800938e:	4b0e      	ldr	r3, [pc, #56]	@ (80093c8 <_svfiprintf_r+0x1f0>)
 8009390:	a904      	add	r1, sp, #16
 8009392:	4638      	mov	r0, r7
 8009394:	f3af 8000 	nop.w
 8009398:	1c42      	adds	r2, r0, #1
 800939a:	4606      	mov	r6, r0
 800939c:	d1d6      	bne.n	800934c <_svfiprintf_r+0x174>
 800939e:	89ab      	ldrh	r3, [r5, #12]
 80093a0:	065b      	lsls	r3, r3, #25
 80093a2:	f53f af2d 	bmi.w	8009200 <_svfiprintf_r+0x28>
 80093a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80093a8:	e72c      	b.n	8009204 <_svfiprintf_r+0x2c>
 80093aa:	ab03      	add	r3, sp, #12
 80093ac:	9300      	str	r3, [sp, #0]
 80093ae:	462a      	mov	r2, r5
 80093b0:	4b05      	ldr	r3, [pc, #20]	@ (80093c8 <_svfiprintf_r+0x1f0>)
 80093b2:	a904      	add	r1, sp, #16
 80093b4:	4638      	mov	r0, r7
 80093b6:	f000 f879 	bl	80094ac <_printf_i>
 80093ba:	e7ed      	b.n	8009398 <_svfiprintf_r+0x1c0>
 80093bc:	08009cf8 	.word	0x08009cf8
 80093c0:	08009d02 	.word	0x08009d02
 80093c4:	00000000 	.word	0x00000000
 80093c8:	08009121 	.word	0x08009121
 80093cc:	08009cfe 	.word	0x08009cfe

080093d0 <_printf_common>:
 80093d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093d4:	4616      	mov	r6, r2
 80093d6:	4698      	mov	r8, r3
 80093d8:	688a      	ldr	r2, [r1, #8]
 80093da:	690b      	ldr	r3, [r1, #16]
 80093dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80093e0:	4293      	cmp	r3, r2
 80093e2:	bfb8      	it	lt
 80093e4:	4613      	movlt	r3, r2
 80093e6:	6033      	str	r3, [r6, #0]
 80093e8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80093ec:	4607      	mov	r7, r0
 80093ee:	460c      	mov	r4, r1
 80093f0:	b10a      	cbz	r2, 80093f6 <_printf_common+0x26>
 80093f2:	3301      	adds	r3, #1
 80093f4:	6033      	str	r3, [r6, #0]
 80093f6:	6823      	ldr	r3, [r4, #0]
 80093f8:	0699      	lsls	r1, r3, #26
 80093fa:	bf42      	ittt	mi
 80093fc:	6833      	ldrmi	r3, [r6, #0]
 80093fe:	3302      	addmi	r3, #2
 8009400:	6033      	strmi	r3, [r6, #0]
 8009402:	6825      	ldr	r5, [r4, #0]
 8009404:	f015 0506 	ands.w	r5, r5, #6
 8009408:	d106      	bne.n	8009418 <_printf_common+0x48>
 800940a:	f104 0a19 	add.w	sl, r4, #25
 800940e:	68e3      	ldr	r3, [r4, #12]
 8009410:	6832      	ldr	r2, [r6, #0]
 8009412:	1a9b      	subs	r3, r3, r2
 8009414:	42ab      	cmp	r3, r5
 8009416:	dc26      	bgt.n	8009466 <_printf_common+0x96>
 8009418:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800941c:	6822      	ldr	r2, [r4, #0]
 800941e:	3b00      	subs	r3, #0
 8009420:	bf18      	it	ne
 8009422:	2301      	movne	r3, #1
 8009424:	0692      	lsls	r2, r2, #26
 8009426:	d42b      	bmi.n	8009480 <_printf_common+0xb0>
 8009428:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800942c:	4641      	mov	r1, r8
 800942e:	4638      	mov	r0, r7
 8009430:	47c8      	blx	r9
 8009432:	3001      	adds	r0, #1
 8009434:	d01e      	beq.n	8009474 <_printf_common+0xa4>
 8009436:	6823      	ldr	r3, [r4, #0]
 8009438:	6922      	ldr	r2, [r4, #16]
 800943a:	f003 0306 	and.w	r3, r3, #6
 800943e:	2b04      	cmp	r3, #4
 8009440:	bf02      	ittt	eq
 8009442:	68e5      	ldreq	r5, [r4, #12]
 8009444:	6833      	ldreq	r3, [r6, #0]
 8009446:	1aed      	subeq	r5, r5, r3
 8009448:	68a3      	ldr	r3, [r4, #8]
 800944a:	bf0c      	ite	eq
 800944c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009450:	2500      	movne	r5, #0
 8009452:	4293      	cmp	r3, r2
 8009454:	bfc4      	itt	gt
 8009456:	1a9b      	subgt	r3, r3, r2
 8009458:	18ed      	addgt	r5, r5, r3
 800945a:	2600      	movs	r6, #0
 800945c:	341a      	adds	r4, #26
 800945e:	42b5      	cmp	r5, r6
 8009460:	d11a      	bne.n	8009498 <_printf_common+0xc8>
 8009462:	2000      	movs	r0, #0
 8009464:	e008      	b.n	8009478 <_printf_common+0xa8>
 8009466:	2301      	movs	r3, #1
 8009468:	4652      	mov	r2, sl
 800946a:	4641      	mov	r1, r8
 800946c:	4638      	mov	r0, r7
 800946e:	47c8      	blx	r9
 8009470:	3001      	adds	r0, #1
 8009472:	d103      	bne.n	800947c <_printf_common+0xac>
 8009474:	f04f 30ff 	mov.w	r0, #4294967295
 8009478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800947c:	3501      	adds	r5, #1
 800947e:	e7c6      	b.n	800940e <_printf_common+0x3e>
 8009480:	18e1      	adds	r1, r4, r3
 8009482:	1c5a      	adds	r2, r3, #1
 8009484:	2030      	movs	r0, #48	@ 0x30
 8009486:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800948a:	4422      	add	r2, r4
 800948c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009490:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009494:	3302      	adds	r3, #2
 8009496:	e7c7      	b.n	8009428 <_printf_common+0x58>
 8009498:	2301      	movs	r3, #1
 800949a:	4622      	mov	r2, r4
 800949c:	4641      	mov	r1, r8
 800949e:	4638      	mov	r0, r7
 80094a0:	47c8      	blx	r9
 80094a2:	3001      	adds	r0, #1
 80094a4:	d0e6      	beq.n	8009474 <_printf_common+0xa4>
 80094a6:	3601      	adds	r6, #1
 80094a8:	e7d9      	b.n	800945e <_printf_common+0x8e>
	...

080094ac <_printf_i>:
 80094ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80094b0:	7e0f      	ldrb	r7, [r1, #24]
 80094b2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80094b4:	2f78      	cmp	r7, #120	@ 0x78
 80094b6:	4691      	mov	r9, r2
 80094b8:	4680      	mov	r8, r0
 80094ba:	460c      	mov	r4, r1
 80094bc:	469a      	mov	sl, r3
 80094be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80094c2:	d807      	bhi.n	80094d4 <_printf_i+0x28>
 80094c4:	2f62      	cmp	r7, #98	@ 0x62
 80094c6:	d80a      	bhi.n	80094de <_printf_i+0x32>
 80094c8:	2f00      	cmp	r7, #0
 80094ca:	f000 80d2 	beq.w	8009672 <_printf_i+0x1c6>
 80094ce:	2f58      	cmp	r7, #88	@ 0x58
 80094d0:	f000 80b9 	beq.w	8009646 <_printf_i+0x19a>
 80094d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80094d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80094dc:	e03a      	b.n	8009554 <_printf_i+0xa8>
 80094de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80094e2:	2b15      	cmp	r3, #21
 80094e4:	d8f6      	bhi.n	80094d4 <_printf_i+0x28>
 80094e6:	a101      	add	r1, pc, #4	@ (adr r1, 80094ec <_printf_i+0x40>)
 80094e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80094ec:	08009545 	.word	0x08009545
 80094f0:	08009559 	.word	0x08009559
 80094f4:	080094d5 	.word	0x080094d5
 80094f8:	080094d5 	.word	0x080094d5
 80094fc:	080094d5 	.word	0x080094d5
 8009500:	080094d5 	.word	0x080094d5
 8009504:	08009559 	.word	0x08009559
 8009508:	080094d5 	.word	0x080094d5
 800950c:	080094d5 	.word	0x080094d5
 8009510:	080094d5 	.word	0x080094d5
 8009514:	080094d5 	.word	0x080094d5
 8009518:	08009659 	.word	0x08009659
 800951c:	08009583 	.word	0x08009583
 8009520:	08009613 	.word	0x08009613
 8009524:	080094d5 	.word	0x080094d5
 8009528:	080094d5 	.word	0x080094d5
 800952c:	0800967b 	.word	0x0800967b
 8009530:	080094d5 	.word	0x080094d5
 8009534:	08009583 	.word	0x08009583
 8009538:	080094d5 	.word	0x080094d5
 800953c:	080094d5 	.word	0x080094d5
 8009540:	0800961b 	.word	0x0800961b
 8009544:	6833      	ldr	r3, [r6, #0]
 8009546:	1d1a      	adds	r2, r3, #4
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	6032      	str	r2, [r6, #0]
 800954c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009550:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009554:	2301      	movs	r3, #1
 8009556:	e09d      	b.n	8009694 <_printf_i+0x1e8>
 8009558:	6833      	ldr	r3, [r6, #0]
 800955a:	6820      	ldr	r0, [r4, #0]
 800955c:	1d19      	adds	r1, r3, #4
 800955e:	6031      	str	r1, [r6, #0]
 8009560:	0606      	lsls	r6, r0, #24
 8009562:	d501      	bpl.n	8009568 <_printf_i+0xbc>
 8009564:	681d      	ldr	r5, [r3, #0]
 8009566:	e003      	b.n	8009570 <_printf_i+0xc4>
 8009568:	0645      	lsls	r5, r0, #25
 800956a:	d5fb      	bpl.n	8009564 <_printf_i+0xb8>
 800956c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009570:	2d00      	cmp	r5, #0
 8009572:	da03      	bge.n	800957c <_printf_i+0xd0>
 8009574:	232d      	movs	r3, #45	@ 0x2d
 8009576:	426d      	negs	r5, r5
 8009578:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800957c:	4859      	ldr	r0, [pc, #356]	@ (80096e4 <_printf_i+0x238>)
 800957e:	230a      	movs	r3, #10
 8009580:	e011      	b.n	80095a6 <_printf_i+0xfa>
 8009582:	6821      	ldr	r1, [r4, #0]
 8009584:	6833      	ldr	r3, [r6, #0]
 8009586:	0608      	lsls	r0, r1, #24
 8009588:	f853 5b04 	ldr.w	r5, [r3], #4
 800958c:	d402      	bmi.n	8009594 <_printf_i+0xe8>
 800958e:	0649      	lsls	r1, r1, #25
 8009590:	bf48      	it	mi
 8009592:	b2ad      	uxthmi	r5, r5
 8009594:	2f6f      	cmp	r7, #111	@ 0x6f
 8009596:	4853      	ldr	r0, [pc, #332]	@ (80096e4 <_printf_i+0x238>)
 8009598:	6033      	str	r3, [r6, #0]
 800959a:	bf14      	ite	ne
 800959c:	230a      	movne	r3, #10
 800959e:	2308      	moveq	r3, #8
 80095a0:	2100      	movs	r1, #0
 80095a2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80095a6:	6866      	ldr	r6, [r4, #4]
 80095a8:	60a6      	str	r6, [r4, #8]
 80095aa:	2e00      	cmp	r6, #0
 80095ac:	bfa2      	ittt	ge
 80095ae:	6821      	ldrge	r1, [r4, #0]
 80095b0:	f021 0104 	bicge.w	r1, r1, #4
 80095b4:	6021      	strge	r1, [r4, #0]
 80095b6:	b90d      	cbnz	r5, 80095bc <_printf_i+0x110>
 80095b8:	2e00      	cmp	r6, #0
 80095ba:	d04b      	beq.n	8009654 <_printf_i+0x1a8>
 80095bc:	4616      	mov	r6, r2
 80095be:	fbb5 f1f3 	udiv	r1, r5, r3
 80095c2:	fb03 5711 	mls	r7, r3, r1, r5
 80095c6:	5dc7      	ldrb	r7, [r0, r7]
 80095c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80095cc:	462f      	mov	r7, r5
 80095ce:	42bb      	cmp	r3, r7
 80095d0:	460d      	mov	r5, r1
 80095d2:	d9f4      	bls.n	80095be <_printf_i+0x112>
 80095d4:	2b08      	cmp	r3, #8
 80095d6:	d10b      	bne.n	80095f0 <_printf_i+0x144>
 80095d8:	6823      	ldr	r3, [r4, #0]
 80095da:	07df      	lsls	r7, r3, #31
 80095dc:	d508      	bpl.n	80095f0 <_printf_i+0x144>
 80095de:	6923      	ldr	r3, [r4, #16]
 80095e0:	6861      	ldr	r1, [r4, #4]
 80095e2:	4299      	cmp	r1, r3
 80095e4:	bfde      	ittt	le
 80095e6:	2330      	movle	r3, #48	@ 0x30
 80095e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80095ec:	f106 36ff 	addle.w	r6, r6, #4294967295
 80095f0:	1b92      	subs	r2, r2, r6
 80095f2:	6122      	str	r2, [r4, #16]
 80095f4:	f8cd a000 	str.w	sl, [sp]
 80095f8:	464b      	mov	r3, r9
 80095fa:	aa03      	add	r2, sp, #12
 80095fc:	4621      	mov	r1, r4
 80095fe:	4640      	mov	r0, r8
 8009600:	f7ff fee6 	bl	80093d0 <_printf_common>
 8009604:	3001      	adds	r0, #1
 8009606:	d14a      	bne.n	800969e <_printf_i+0x1f2>
 8009608:	f04f 30ff 	mov.w	r0, #4294967295
 800960c:	b004      	add	sp, #16
 800960e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009612:	6823      	ldr	r3, [r4, #0]
 8009614:	f043 0320 	orr.w	r3, r3, #32
 8009618:	6023      	str	r3, [r4, #0]
 800961a:	4833      	ldr	r0, [pc, #204]	@ (80096e8 <_printf_i+0x23c>)
 800961c:	2778      	movs	r7, #120	@ 0x78
 800961e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009622:	6823      	ldr	r3, [r4, #0]
 8009624:	6831      	ldr	r1, [r6, #0]
 8009626:	061f      	lsls	r7, r3, #24
 8009628:	f851 5b04 	ldr.w	r5, [r1], #4
 800962c:	d402      	bmi.n	8009634 <_printf_i+0x188>
 800962e:	065f      	lsls	r7, r3, #25
 8009630:	bf48      	it	mi
 8009632:	b2ad      	uxthmi	r5, r5
 8009634:	6031      	str	r1, [r6, #0]
 8009636:	07d9      	lsls	r1, r3, #31
 8009638:	bf44      	itt	mi
 800963a:	f043 0320 	orrmi.w	r3, r3, #32
 800963e:	6023      	strmi	r3, [r4, #0]
 8009640:	b11d      	cbz	r5, 800964a <_printf_i+0x19e>
 8009642:	2310      	movs	r3, #16
 8009644:	e7ac      	b.n	80095a0 <_printf_i+0xf4>
 8009646:	4827      	ldr	r0, [pc, #156]	@ (80096e4 <_printf_i+0x238>)
 8009648:	e7e9      	b.n	800961e <_printf_i+0x172>
 800964a:	6823      	ldr	r3, [r4, #0]
 800964c:	f023 0320 	bic.w	r3, r3, #32
 8009650:	6023      	str	r3, [r4, #0]
 8009652:	e7f6      	b.n	8009642 <_printf_i+0x196>
 8009654:	4616      	mov	r6, r2
 8009656:	e7bd      	b.n	80095d4 <_printf_i+0x128>
 8009658:	6833      	ldr	r3, [r6, #0]
 800965a:	6825      	ldr	r5, [r4, #0]
 800965c:	6961      	ldr	r1, [r4, #20]
 800965e:	1d18      	adds	r0, r3, #4
 8009660:	6030      	str	r0, [r6, #0]
 8009662:	062e      	lsls	r6, r5, #24
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	d501      	bpl.n	800966c <_printf_i+0x1c0>
 8009668:	6019      	str	r1, [r3, #0]
 800966a:	e002      	b.n	8009672 <_printf_i+0x1c6>
 800966c:	0668      	lsls	r0, r5, #25
 800966e:	d5fb      	bpl.n	8009668 <_printf_i+0x1bc>
 8009670:	8019      	strh	r1, [r3, #0]
 8009672:	2300      	movs	r3, #0
 8009674:	6123      	str	r3, [r4, #16]
 8009676:	4616      	mov	r6, r2
 8009678:	e7bc      	b.n	80095f4 <_printf_i+0x148>
 800967a:	6833      	ldr	r3, [r6, #0]
 800967c:	1d1a      	adds	r2, r3, #4
 800967e:	6032      	str	r2, [r6, #0]
 8009680:	681e      	ldr	r6, [r3, #0]
 8009682:	6862      	ldr	r2, [r4, #4]
 8009684:	2100      	movs	r1, #0
 8009686:	4630      	mov	r0, r6
 8009688:	f7f6 fdda 	bl	8000240 <memchr>
 800968c:	b108      	cbz	r0, 8009692 <_printf_i+0x1e6>
 800968e:	1b80      	subs	r0, r0, r6
 8009690:	6060      	str	r0, [r4, #4]
 8009692:	6863      	ldr	r3, [r4, #4]
 8009694:	6123      	str	r3, [r4, #16]
 8009696:	2300      	movs	r3, #0
 8009698:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800969c:	e7aa      	b.n	80095f4 <_printf_i+0x148>
 800969e:	6923      	ldr	r3, [r4, #16]
 80096a0:	4632      	mov	r2, r6
 80096a2:	4649      	mov	r1, r9
 80096a4:	4640      	mov	r0, r8
 80096a6:	47d0      	blx	sl
 80096a8:	3001      	adds	r0, #1
 80096aa:	d0ad      	beq.n	8009608 <_printf_i+0x15c>
 80096ac:	6823      	ldr	r3, [r4, #0]
 80096ae:	079b      	lsls	r3, r3, #30
 80096b0:	d413      	bmi.n	80096da <_printf_i+0x22e>
 80096b2:	68e0      	ldr	r0, [r4, #12]
 80096b4:	9b03      	ldr	r3, [sp, #12]
 80096b6:	4298      	cmp	r0, r3
 80096b8:	bfb8      	it	lt
 80096ba:	4618      	movlt	r0, r3
 80096bc:	e7a6      	b.n	800960c <_printf_i+0x160>
 80096be:	2301      	movs	r3, #1
 80096c0:	4632      	mov	r2, r6
 80096c2:	4649      	mov	r1, r9
 80096c4:	4640      	mov	r0, r8
 80096c6:	47d0      	blx	sl
 80096c8:	3001      	adds	r0, #1
 80096ca:	d09d      	beq.n	8009608 <_printf_i+0x15c>
 80096cc:	3501      	adds	r5, #1
 80096ce:	68e3      	ldr	r3, [r4, #12]
 80096d0:	9903      	ldr	r1, [sp, #12]
 80096d2:	1a5b      	subs	r3, r3, r1
 80096d4:	42ab      	cmp	r3, r5
 80096d6:	dcf2      	bgt.n	80096be <_printf_i+0x212>
 80096d8:	e7eb      	b.n	80096b2 <_printf_i+0x206>
 80096da:	2500      	movs	r5, #0
 80096dc:	f104 0619 	add.w	r6, r4, #25
 80096e0:	e7f5      	b.n	80096ce <_printf_i+0x222>
 80096e2:	bf00      	nop
 80096e4:	08009d09 	.word	0x08009d09
 80096e8:	08009d1a 	.word	0x08009d1a

080096ec <memmove>:
 80096ec:	4288      	cmp	r0, r1
 80096ee:	b510      	push	{r4, lr}
 80096f0:	eb01 0402 	add.w	r4, r1, r2
 80096f4:	d902      	bls.n	80096fc <memmove+0x10>
 80096f6:	4284      	cmp	r4, r0
 80096f8:	4623      	mov	r3, r4
 80096fa:	d807      	bhi.n	800970c <memmove+0x20>
 80096fc:	1e43      	subs	r3, r0, #1
 80096fe:	42a1      	cmp	r1, r4
 8009700:	d008      	beq.n	8009714 <memmove+0x28>
 8009702:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009706:	f803 2f01 	strb.w	r2, [r3, #1]!
 800970a:	e7f8      	b.n	80096fe <memmove+0x12>
 800970c:	4402      	add	r2, r0
 800970e:	4601      	mov	r1, r0
 8009710:	428a      	cmp	r2, r1
 8009712:	d100      	bne.n	8009716 <memmove+0x2a>
 8009714:	bd10      	pop	{r4, pc}
 8009716:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800971a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800971e:	e7f7      	b.n	8009710 <memmove+0x24>

08009720 <memcpy>:
 8009720:	440a      	add	r2, r1
 8009722:	4291      	cmp	r1, r2
 8009724:	f100 33ff 	add.w	r3, r0, #4294967295
 8009728:	d100      	bne.n	800972c <memcpy+0xc>
 800972a:	4770      	bx	lr
 800972c:	b510      	push	{r4, lr}
 800972e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009732:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009736:	4291      	cmp	r1, r2
 8009738:	d1f9      	bne.n	800972e <memcpy+0xe>
 800973a:	bd10      	pop	{r4, pc}

0800973c <_realloc_r>:
 800973c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009740:	4680      	mov	r8, r0
 8009742:	4615      	mov	r5, r2
 8009744:	460c      	mov	r4, r1
 8009746:	b921      	cbnz	r1, 8009752 <_realloc_r+0x16>
 8009748:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800974c:	4611      	mov	r1, r2
 800974e:	f7ff bbad 	b.w	8008eac <_malloc_r>
 8009752:	b92a      	cbnz	r2, 8009760 <_realloc_r+0x24>
 8009754:	f7ff fc9a 	bl	800908c <_free_r>
 8009758:	2400      	movs	r4, #0
 800975a:	4620      	mov	r0, r4
 800975c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009760:	f000 f81a 	bl	8009798 <_malloc_usable_size_r>
 8009764:	4285      	cmp	r5, r0
 8009766:	4606      	mov	r6, r0
 8009768:	d802      	bhi.n	8009770 <_realloc_r+0x34>
 800976a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800976e:	d8f4      	bhi.n	800975a <_realloc_r+0x1e>
 8009770:	4629      	mov	r1, r5
 8009772:	4640      	mov	r0, r8
 8009774:	f7ff fb9a 	bl	8008eac <_malloc_r>
 8009778:	4607      	mov	r7, r0
 800977a:	2800      	cmp	r0, #0
 800977c:	d0ec      	beq.n	8009758 <_realloc_r+0x1c>
 800977e:	42b5      	cmp	r5, r6
 8009780:	462a      	mov	r2, r5
 8009782:	4621      	mov	r1, r4
 8009784:	bf28      	it	cs
 8009786:	4632      	movcs	r2, r6
 8009788:	f7ff ffca 	bl	8009720 <memcpy>
 800978c:	4621      	mov	r1, r4
 800978e:	4640      	mov	r0, r8
 8009790:	f7ff fc7c 	bl	800908c <_free_r>
 8009794:	463c      	mov	r4, r7
 8009796:	e7e0      	b.n	800975a <_realloc_r+0x1e>

08009798 <_malloc_usable_size_r>:
 8009798:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800979c:	1f18      	subs	r0, r3, #4
 800979e:	2b00      	cmp	r3, #0
 80097a0:	bfbc      	itt	lt
 80097a2:	580b      	ldrlt	r3, [r1, r0]
 80097a4:	18c0      	addlt	r0, r0, r3
 80097a6:	4770      	bx	lr

080097a8 <_init>:
 80097a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097aa:	bf00      	nop
 80097ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097ae:	bc08      	pop	{r3}
 80097b0:	469e      	mov	lr, r3
 80097b2:	4770      	bx	lr

080097b4 <_fini>:
 80097b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097b6:	bf00      	nop
 80097b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097ba:	bc08      	pop	{r3}
 80097bc:	469e      	mov	lr, r3
 80097be:	4770      	bx	lr
